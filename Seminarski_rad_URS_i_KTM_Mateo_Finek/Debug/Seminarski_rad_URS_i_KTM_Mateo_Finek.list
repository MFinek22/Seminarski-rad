
Seminarski_rad_URS_i_KTM_Mateo_Finek.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005cb4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005e84  08005e84  00006e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f54  08005f54  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  08005f54  08005f54  00006f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f5c  08005f5c  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f5c  08005f5c  00006f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005f60  08005f60  00006f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08005f64  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  2000006c  08005fd0  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  08005fd0  00007380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de33  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c9  00000000  00000000  00014ecf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  00017198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af5  00000000  00000000  00017fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002270e  00000000  00000000  00018a9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001224e  00000000  00000000  0003b1ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1336  00000000  00000000  0004d3f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e72f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040b0  00000000  00000000  0011e774  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  00122824  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005e6c 	.word	0x08005e6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	08005e6c 	.word	0x08005e6c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <LCD_Init>:
        0b00110,
        0b00000
};

void LCD_Init(uint8_t rows)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8000d86:	4a38      	ldr	r2, [pc, #224]	@ (8000e68 <LCD_Init+0xec>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8000d8c:	4b37      	ldr	r3, [pc, #220]	@ (8000e6c <LCD_Init+0xf0>)
 8000d8e:	2208      	movs	r2, #8
 8000d90:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000d92:	4b37      	ldr	r3, [pc, #220]	@ (8000e70 <LCD_Init+0xf4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8000d98:	4b33      	ldr	r3, [pc, #204]	@ (8000e68 <LCD_Init+0xec>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d907      	bls.n	8000db0 <LCD_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8000da0:	4b33      	ldr	r3, [pc, #204]	@ (8000e70 <LCD_Init+0xf4>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	f043 0308 	orr.w	r3, r3, #8
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <LCD_Init+0xf4>)
 8000dac:	701a      	strb	r2, [r3, #0]
 8000dae:	e006      	b.n	8000dbe <LCD_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8000db0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e70 <LCD_Init+0xf4>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	f043 0304 	orr.w	r3, r3, #4
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b2d      	ldr	r3, [pc, #180]	@ (8000e70 <LCD_Init+0xf4>)
 8000dbc:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8000dbe:	f000 f993 	bl	80010e8 <DelayInit>
  HAL_Delay(50);
 8000dc2:	2032      	movs	r0, #50	@ 0x32
 8000dc4:	f001 fdd2 	bl	800296c <HAL_Delay>

  ExpanderWrite(dpBacklight);
 8000dc8:	4b28      	ldr	r3, [pc, #160]	@ (8000e6c <LCD_Init+0xf0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f951 	bl	8001074 <ExpanderWrite>
  HAL_Delay(1000);
 8000dd2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dd6:	f001 fdc9 	bl	800296c <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 8000dda:	2030      	movs	r0, #48	@ 0x30
 8000ddc:	f000 f938 	bl	8001050 <Write4Bits>
  DelayUS(4500);
 8000de0:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000de4:	f000 f9aa 	bl	800113c <DelayUS>

  Write4Bits(0x03 << 4);
 8000de8:	2030      	movs	r0, #48	@ 0x30
 8000dea:	f000 f931 	bl	8001050 <Write4Bits>
  DelayUS(4500);
 8000dee:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000df2:	f000 f9a3 	bl	800113c <DelayUS>

  Write4Bits(0x03 << 4);
 8000df6:	2030      	movs	r0, #48	@ 0x30
 8000df8:	f000 f92a 	bl	8001050 <Write4Bits>
  DelayUS(4500);
 8000dfc:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e00:	f000 f99c 	bl	800113c <DelayUS>

  Write4Bits(0x02 << 4);
 8000e04:	2020      	movs	r0, #32
 8000e06:	f000 f923 	bl	8001050 <Write4Bits>
  DelayUS(100);
 8000e0a:	2064      	movs	r0, #100	@ 0x64
 8000e0c:	f000 f996 	bl	800113c <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 8000e10:	4b17      	ldr	r3, [pc, #92]	@ (8000e70 <LCD_Init+0xf4>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	f043 0320 	orr.w	r3, r3, #32
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f8db 	bl	8000fd6 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000e20:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <LCD_Init+0xf8>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	701a      	strb	r2, [r3, #0]
  LCD_Display();
 8000e26:	f000 f843 	bl	8000eb0 <LCD_Display>
  LCD_Clear();
 8000e2a:	f000 f82b 	bl	8000e84 <LCD_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000e2e:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <LCD_Init+0xfc>)
 8000e30:	2202      	movs	r2, #2
 8000e32:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8000e34:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <LCD_Init+0xfc>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	f043 0304 	orr.w	r3, r3, #4
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f8c9 	bl	8000fd6 <SendCommand>
  DelayUS(4500);
 8000e44:	f241 1094 	movw	r0, #4500	@ 0x1194
 8000e48:	f000 f978 	bl	800113c <DelayUS>

  LCD_CreateSpecialChar(0, special1);
 8000e4c:	490b      	ldr	r1, [pc, #44]	@ (8000e7c <LCD_Init+0x100>)
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f000 f876 	bl	8000f40 <LCD_CreateSpecialChar>
  LCD_CreateSpecialChar(1, special2);
 8000e54:	490a      	ldr	r1, [pc, #40]	@ (8000e80 <LCD_Init+0x104>)
 8000e56:	2001      	movs	r0, #1
 8000e58:	f000 f872 	bl	8000f40 <LCD_CreateSpecialChar>

  LCD_Home();
 8000e5c:	f000 f81d 	bl	8000e9a <LCD_Home>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	2000008b 	.word	0x2000008b
 8000e6c:	2000008c 	.word	0x2000008c
 8000e70:	20000088 	.word	0x20000088
 8000e74:	20000089 	.word	0x20000089
 8000e78:	2000008a 	.word	0x2000008a
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000008 	.word	0x20000008

08000e84 <LCD_Clear>:

void LCD_Clear()
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f000 f8a4 	bl	8000fd6 <SendCommand>
  DelayUS(2000);
 8000e8e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000e92:	f000 f953 	bl	800113c <DelayUS>
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <LCD_Home>:

void LCD_Home()
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f000 f899 	bl	8000fd6 <SendCommand>
  DelayUS(2000);
 8000ea4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000ea8:	f000 f948 	bl	800113c <DelayUS>
}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <LCD_Display>:

void LCD_Display()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <LCD_Display+0x28>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <LCD_Display+0x28>)
 8000ec0:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 8000ec2:	4b05      	ldr	r3, [pc, #20]	@ (8000ed8 <LCD_Display+0x28>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	f043 0308 	orr.w	r3, r3, #8
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 f882 	bl	8000fd6 <SendCommand>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000089 	.word	0x20000089

08000edc <LCD_SetCursor>:

void LCD_SetCursor(uint8_t col, uint8_t row)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b087      	sub	sp, #28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	460a      	mov	r2, r1
 8000ee6:	71fb      	strb	r3, [r7, #7]
 8000ee8:	4613      	mov	r3, r2
 8000eea:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000eec:	4b12      	ldr	r3, [pc, #72]	@ (8000f38 <LCD_SetCursor+0x5c>)
 8000eee:	f107 0408 	add.w	r4, r7, #8
 8000ef2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8000ef8:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <LCD_SetCursor+0x60>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	79ba      	ldrb	r2, [r7, #6]
 8000efe:	429a      	cmp	r2, r3
 8000f00:	d303      	bcc.n	8000f0a <LCD_SetCursor+0x2e>
  {
    row = dpRows-1;
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <LCD_SetCursor+0x60>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000f0a:	79bb      	ldrb	r3, [r7, #6]
 8000f0c:	009b      	lsls	r3, r3, #2
 8000f0e:	3318      	adds	r3, #24
 8000f10:	443b      	add	r3, r7
 8000f12:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	b25b      	sxtb	r3, r3
 8000f20:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f24:	b25b      	sxtb	r3, r3
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f000 f854 	bl	8000fd6 <SendCommand>
}
 8000f2e:	bf00      	nop
 8000f30:	371c      	adds	r7, #28
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	08005e84 	.word	0x08005e84
 8000f3c:	2000008b 	.word	0x2000008b

08000f40 <LCD_CreateSpecialChar>:

void LCD_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	6039      	str	r1, [r7, #0]
 8000f4a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f5e:	b25b      	sxtb	r3, r3
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 f837 	bl	8000fd6 <SendCommand>
  for (int i=0; i<8; i++)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	e009      	b.n	8000f82 <LCD_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	683a      	ldr	r2, [r7, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f83b 	bl	8000ff2 <SendChar>
  for (int i=0; i<8; i++)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b07      	cmp	r3, #7
 8000f86:	ddf2      	ble.n	8000f6e <LCD_CreateSpecialChar+0x2e>
  }
}
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <LCD_PrintSpecialChar>:

void LCD_PrintSpecialChar(uint8_t index)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	4603      	mov	r3, r0
 8000f9a:	71fb      	strb	r3, [r7, #7]
  SendChar(index);
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 f827 	bl	8000ff2 <SendChar>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <LCD_PrintStr>:
{
	LCD_CreateSpecialChar(char_num, rows);
}

void LCD_PrintStr(const char c[])
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 8000fb4:	e006      	b.n	8000fc4 <LCD_PrintStr+0x18>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	1c5a      	adds	r2, r3, #1
 8000fba:	607a      	str	r2, [r7, #4]
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f817 	bl	8000ff2 <SendChar>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f4      	bne.n	8000fb6 <LCD_PrintStr+0xa>
}
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <SendCommand>:

static void SendCommand(uint8_t cmd)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f812 	bl	800100e <Send>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <SendChar>:

static void SendChar(uint8_t ch)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b082      	sub	sp, #8
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	2101      	movs	r1, #1
 8001000:	4618      	mov	r0, r3
 8001002:	f000 f804 	bl	800100e <Send>
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	460a      	mov	r2, r1
 8001018:	71fb      	strb	r3, [r7, #7]
 800101a:	4613      	mov	r3, r2
 800101c:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f023 030f 	bic.w	r3, r3, #15
 8001024:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 800102c:	7bfa      	ldrb	r2, [r7, #15]
 800102e:	79bb      	ldrb	r3, [r7, #6]
 8001030:	4313      	orrs	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f80b 	bl	8001050 <Write4Bits>
  Write4Bits((lownib)|mode);
 800103a:	7bba      	ldrb	r2, [r7, #14]
 800103c:	79bb      	ldrb	r3, [r7, #6]
 800103e:	4313      	orrs	r3, r2
 8001040:	b2db      	uxtb	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f804 	bl	8001050 <Write4Bits>
}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f809 	bl	8001074 <ExpanderWrite>
  PulseEnable(value);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f000 f821 	bl	80010ac <PulseEnable>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af02      	add	r7, sp, #8
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 800107e:	4b09      	ldr	r3, [pc, #36]	@ (80010a4 <ExpanderWrite+0x30>)
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	4313      	orrs	r3, r2
 8001086:	b2db      	uxtb	r3, r3
 8001088:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800108a:	f107 020f 	add.w	r2, r7, #15
 800108e:	230a      	movs	r3, #10
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	214e      	movs	r1, #78	@ 0x4e
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <ExpanderWrite+0x34>)
 8001098:	f002 f8da 	bl	8003250 <HAL_I2C_Master_Transmit>
}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	2000008c 	.word	0x2000008c
 80010a8:	20000090 	.word	0x20000090

080010ac <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	f043 0304 	orr.w	r3, r3, #4
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ffd8 	bl	8001074 <ExpanderWrite>
  DelayUS(20);
 80010c4:	2014      	movs	r0, #20
 80010c6:	f000 f839 	bl	800113c <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	f023 0304 	bic.w	r3, r3, #4
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffce 	bl	8001074 <ExpanderWrite>
  DelayUS(20);
 80010d8:	2014      	movs	r0, #20
 80010da:	f000 f82f 	bl	800113c <DelayUS>
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
	...

080010e8 <DelayInit>:

static void DelayInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <DelayInit+0x4c>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	4a10      	ldr	r2, [pc, #64]	@ (8001134 <DelayInit+0x4c>)
 80010f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80010f6:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80010f8:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <DelayInit+0x4c>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <DelayInit+0x4c>)
 80010fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001102:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <DelayInit+0x50>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a0b      	ldr	r2, [pc, #44]	@ (8001138 <DelayInit+0x50>)
 800110a:	f023 0301 	bic.w	r3, r3, #1
 800110e:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <DelayInit+0x50>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a08      	ldr	r2, [pc, #32]	@ (8001138 <DelayInit+0x50>)
 8001116:	f043 0301 	orr.w	r3, r3, #1
 800111a:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <DelayInit+0x50>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 8001122:	bf00      	nop
  __ASM volatile ("NOP");
 8001124:	bf00      	nop
  __ASM volatile ("NOP");
 8001126:	bf00      	nop
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
 8001132:	bf00      	nop
 8001134:	e000edf0 	.word	0xe000edf0
 8001138:	e0001000 	.word	0xe0001000

0800113c <DelayUS>:

static void DelayUS(uint32_t us) {
 800113c:	b480      	push	{r7}
 800113e:	b087      	sub	sp, #28
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001144:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <DelayUS+0x44>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a0e      	ldr	r2, [pc, #56]	@ (8001184 <DelayUS+0x48>)
 800114a:	fba2 2303 	umull	r2, r3, r2, r3
 800114e:	0c9a      	lsrs	r2, r3, #18
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	fb02 f303 	mul.w	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <DelayUS+0x4c>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 800115e:	4b0a      	ldr	r3, [pc, #40]	@ (8001188 <DelayUS+0x4c>)
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	429a      	cmp	r2, r3
 800116e:	d8f6      	bhi.n	800115e <DelayUS+0x22>
}
 8001170:	bf00      	nop
 8001172:	bf00      	nop
 8001174:	371c      	adds	r7, #28
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	20000010 	.word	0x20000010
 8001184:	431bde83 	.word	0x431bde83
 8001188:	e0001000 	.word	0xe0001000

0800118c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b088      	sub	sp, #32
 8001190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	605a      	str	r2, [r3, #4]
 800119c:	609a      	str	r2, [r3, #8]
 800119e:	60da      	str	r2, [r3, #12]
 80011a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	4b45      	ldr	r3, [pc, #276]	@ (80012bc <MX_GPIO_Init+0x130>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a44      	ldr	r2, [pc, #272]	@ (80012bc <MX_GPIO_Init+0x130>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b42      	ldr	r3, [pc, #264]	@ (80012bc <MX_GPIO_Init+0x130>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
 80011c2:	4b3e      	ldr	r3, [pc, #248]	@ (80012bc <MX_GPIO_Init+0x130>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a3d      	ldr	r2, [pc, #244]	@ (80012bc <MX_GPIO_Init+0x130>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b3b      	ldr	r3, [pc, #236]	@ (80012bc <MX_GPIO_Init+0x130>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	603b      	str	r3, [r7, #0]
 80011de:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <MX_GPIO_Init+0x130>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e2:	4a36      	ldr	r2, [pc, #216]	@ (80012bc <MX_GPIO_Init+0x130>)
 80011e4:	f043 0304 	orr.w	r3, r3, #4
 80011e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ea:	4b34      	ldr	r3, [pc, #208]	@ (80012bc <MX_GPIO_Init+0x130>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	603b      	str	r3, [r7, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_6, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2142      	movs	r1, #66	@ 0x42
 80011fa:	4831      	ldr	r0, [pc, #196]	@ (80012c0 <MX_GPIO_Init+0x134>)
 80011fc:	f001 fe98 	bl	8002f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	2180      	movs	r1, #128	@ 0x80
 8001204:	482f      	ldr	r0, [pc, #188]	@ (80012c4 <MX_GPIO_Init+0x138>)
 8001206:	f001 fe93 	bl	8002f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800120a:	2200      	movs	r2, #0
 800120c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001210:	482d      	ldr	r0, [pc, #180]	@ (80012c8 <MX_GPIO_Init+0x13c>)
 8001212:	f001 fe8d 	bl	8002f30 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6;
 8001216:	2342      	movs	r3, #66	@ 0x42
 8001218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121a:	2301      	movs	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4619      	mov	r1, r3
 800122c:	4824      	ldr	r0, [pc, #144]	@ (80012c0 <MX_GPIO_Init+0x134>)
 800122e:	f001 fcd3 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001232:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001238:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123e:	2301      	movs	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	4619      	mov	r1, r3
 8001248:	481d      	ldr	r0, [pc, #116]	@ (80012c0 <MX_GPIO_Init+0x134>)
 800124a:	f001 fcc5 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800124e:	2380      	movs	r3, #128	@ 0x80
 8001250:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	4619      	mov	r1, r3
 8001264:	4817      	ldr	r0, [pc, #92]	@ (80012c4 <MX_GPIO_Init+0x138>)
 8001266:	f001 fcb7 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800126a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800126e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001270:	2300      	movs	r3, #0
 8001272:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	4812      	ldr	r0, [pc, #72]	@ (80012c8 <MX_GPIO_Init+0x13c>)
 8001280:	f001 fcaa 	bl	8002bd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001284:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	480a      	ldr	r0, [pc, #40]	@ (80012c8 <MX_GPIO_Init+0x13c>)
 800129e:	f001 fc9b 	bl	8002bd8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2103      	movs	r1, #3
 80012a6:	2028      	movs	r0, #40	@ 0x28
 80012a8:	f001 fc5f 	bl	8002b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012ac:	2028      	movs	r0, #40	@ 0x28
 80012ae:	f001 fc78 	bl	8002ba2 <HAL_NVIC_EnableIRQ>

}
 80012b2:	bf00      	nop
 80012b4:	3720      	adds	r7, #32
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020800 	.word	0x40020800
 80012c8:	40020000 	.word	0x40020000

080012cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012d0:	4b12      	ldr	r3, [pc, #72]	@ (800131c <MX_I2C1_Init+0x50>)
 80012d2:	4a13      	ldr	r2, [pc, #76]	@ (8001320 <MX_I2C1_Init+0x54>)
 80012d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012d6:	4b11      	ldr	r3, [pc, #68]	@ (800131c <MX_I2C1_Init+0x50>)
 80012d8:	4a12      	ldr	r2, [pc, #72]	@ (8001324 <MX_I2C1_Init+0x58>)
 80012da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012dc:	4b0f      	ldr	r3, [pc, #60]	@ (800131c <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012e2:	4b0e      	ldr	r3, [pc, #56]	@ (800131c <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012e8:	4b0c      	ldr	r3, [pc, #48]	@ (800131c <MX_I2C1_Init+0x50>)
 80012ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f0:	4b0a      	ldr	r3, [pc, #40]	@ (800131c <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012f6:	4b09      	ldr	r3, [pc, #36]	@ (800131c <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012fc:	4b07      	ldr	r3, [pc, #28]	@ (800131c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001308:	4804      	ldr	r0, [pc, #16]	@ (800131c <MX_I2C1_Init+0x50>)
 800130a:	f001 fe5d 	bl	8002fc8 <HAL_I2C_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001314:	f000 ffec 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000090 	.word	0x20000090
 8001320:	40005400 	.word	0x40005400
 8001324:	000186a0 	.word	0x000186a0

08001328 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	@ 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001330:	f107 0314 	add.w	r3, r7, #20
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a19      	ldr	r2, [pc, #100]	@ (80013ac <HAL_I2C_MspInit+0x84>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d12c      	bne.n	80013a4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
 800134e:	4b18      	ldr	r3, [pc, #96]	@ (80013b0 <HAL_I2C_MspInit+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	4a17      	ldr	r2, [pc, #92]	@ (80013b0 <HAL_I2C_MspInit+0x88>)
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	6313      	str	r3, [r2, #48]	@ 0x30
 800135a:	4b15      	ldr	r3, [pc, #84]	@ (80013b0 <HAL_I2C_MspInit+0x88>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	f003 0302 	and.w	r3, r3, #2
 8001362:	613b      	str	r3, [r7, #16]
 8001364:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001366:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800136a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800136c:	2312      	movs	r3, #18
 800136e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001374:	2303      	movs	r3, #3
 8001376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001378:	2304      	movs	r3, #4
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137c:	f107 0314 	add.w	r3, r7, #20
 8001380:	4619      	mov	r1, r3
 8001382:	480c      	ldr	r0, [pc, #48]	@ (80013b4 <HAL_I2C_MspInit+0x8c>)
 8001384:	f001 fc28 	bl	8002bd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <HAL_I2C_MspInit+0x88>)
 800138e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001390:	4a07      	ldr	r2, [pc, #28]	@ (80013b0 <HAL_I2C_MspInit+0x88>)
 8001392:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001396:	6413      	str	r3, [r2, #64]	@ 0x40
 8001398:	4b05      	ldr	r3, [pc, #20]	@ (80013b0 <HAL_I2C_MspInit+0x88>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	@ 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40005400 	.word	0x40005400
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40020400 	.word	0x40020400

080013b8 <ledCrvena>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void ledCrvena (void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim6, 1299);
 80013bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <ledCrvena+0x78>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f240 5213 	movw	r2, #1299	@ 0x513
 80013c4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80013c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <ledCrvena+0x78>)
 80013c8:	f240 5213 	movw	r2, #1299	@ 0x513
 80013cc:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);
 80013ce:	4818      	ldr	r0, [pc, #96]	@ (8001430 <ledCrvena+0x78>)
 80013d0:	f003 f89e 	bl	8004510 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	@ 0x80
 80013d8:	4816      	ldr	r0, [pc, #88]	@ (8001434 <ledCrvena+0x7c>)
 80013da:	f001 fda9 	bl	8002f30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 80013de:	2200      	movs	r2, #0
 80013e0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80013e4:	4814      	ldr	r0, [pc, #80]	@ (8001438 <ledCrvena+0x80>)
 80013e6:	f001 fda3 	bl	8002f30 <HAL_GPIO_WritePin>
	// pistalica
	if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)==1){
 80013ea:	2140      	movs	r1, #64	@ 0x40
 80013ec:	4813      	ldr	r0, [pc, #76]	@ (800143c <ledCrvena+0x84>)
 80013ee:	f001 fd87 	bl	8002f00 <HAL_GPIO_ReadPin>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d10d      	bne.n	8001414 <ledCrvena+0x5c>
 	__HAL_TIM_SET_AUTORELOAD(&htim2, 300);
 80013f8:	4b11      	ldr	r3, [pc, #68]	@ (8001440 <ledCrvena+0x88>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001400:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001402:	4b0f      	ldr	r3, [pc, #60]	@ (8001440 <ledCrvena+0x88>)
 8001404:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001408:	60da      	str	r2, [r3, #12]
 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 10);
 800140a:	4b0d      	ldr	r3, [pc, #52]	@ (8001440 <ledCrvena+0x88>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	220a      	movs	r2, #10
 8001410:	639a      	str	r2, [r3, #56]	@ 0x38
	else{
	__HAL_TIM_SET_AUTORELOAD(&htim2, 0);
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
	}

}
 8001412:	e00a      	b.n	800142a <ledCrvena+0x72>
	__HAL_TIM_SET_AUTORELOAD(&htim2, 0);
 8001414:	4b0a      	ldr	r3, [pc, #40]	@ (8001440 <ledCrvena+0x88>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2200      	movs	r2, #0
 800141a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800141c:	4b08      	ldr	r3, [pc, #32]	@ (8001440 <ledCrvena+0x88>)
 800141e:	2200      	movs	r2, #0
 8001420:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <ledCrvena+0x88>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	200001a4 	.word	0x200001a4
 8001434:	40020800 	.word	0x40020800
 8001438:	40020000 	.word	0x40020000
 800143c:	40020400 	.word	0x40020400
 8001440:	2000015c 	.word	0x2000015c

08001444 <ledZuta>:
void ledZuta (void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim6, 1999);
 8001448:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <ledZuta+0x78>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001450:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <ledZuta+0x78>)
 8001454:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8001458:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);
 800145a:	4818      	ldr	r0, [pc, #96]	@ (80014bc <ledZuta+0x78>)
 800145c:	f003 f858 	bl	8004510 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001460:	2200      	movs	r2, #0
 8001462:	2140      	movs	r1, #64	@ 0x40
 8001464:	4816      	ldr	r0, [pc, #88]	@ (80014c0 <ledZuta+0x7c>)
 8001466:	f001 fd63 	bl	8002f30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001470:	4814      	ldr	r0, [pc, #80]	@ (80014c4 <ledZuta+0x80>)
 8001472:	f001 fd5d 	bl	8002f30 <HAL_GPIO_WritePin>
	// pistalica
 	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7)==1){
 8001476:	2180      	movs	r1, #128	@ 0x80
 8001478:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <ledZuta+0x84>)
 800147a:	f001 fd41 	bl	8002f00 <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b01      	cmp	r3, #1
 8001482:	d10d      	bne.n	80014a0 <ledZuta+0x5c>
 	 	__HAL_TIM_SET_AUTORELOAD(&htim2, 300);
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <ledZuta+0x88>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800148c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800148e:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <ledZuta+0x88>)
 8001490:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001494:	60da      	str	r2, [r3, #12]
 	 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 5);
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <ledZuta+0x88>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2205      	movs	r2, #5
 800149c:	639a      	str	r2, [r3, #56]	@ 0x38
 	else{
 		__HAL_TIM_SET_AUTORELOAD(&htim2, 0);
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 		}

}
 800149e:	e00a      	b.n	80014b6 <ledZuta+0x72>
 		__HAL_TIM_SET_AUTORELOAD(&htim2, 0);
 80014a0:	4b0a      	ldr	r3, [pc, #40]	@ (80014cc <ledZuta+0x88>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2200      	movs	r2, #0
 80014a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <ledZuta+0x88>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	60da      	str	r2, [r3, #12]
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <ledZuta+0x88>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200001a4 	.word	0x200001a4
 80014c0:	40020400 	.word	0x40020400
 80014c4:	40020000 	.word	0x40020000
 80014c8:	40020800 	.word	0x40020800
 80014cc:	2000015c 	.word	0x2000015c

080014d0 <ledZelena>:
void ledZelena (void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_AUTORELOAD(&htim6, 2999);
 80014d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <ledZelena+0x78>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80014dc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80014de:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <ledZelena+0x78>)
 80014e0:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80014e4:	60da      	str	r2, [r3, #12]
	HAL_TIM_Base_Start_IT(&htim6);
 80014e6:	4818      	ldr	r0, [pc, #96]	@ (8001548 <ledZelena+0x78>)
 80014e8:	f003 f812 	bl	8004510 <HAL_TIM_Base_Start_IT>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 80014ec:	2200      	movs	r2, #0
 80014ee:	2140      	movs	r1, #64	@ 0x40
 80014f0:	4816      	ldr	r0, [pc, #88]	@ (800154c <ledZelena+0x7c>)
 80014f2:	f001 fd1d 	bl	8002f30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2180      	movs	r1, #128	@ 0x80
 80014fa:	4815      	ldr	r0, [pc, #84]	@ (8001550 <ledZelena+0x80>)
 80014fc:	f001 fd18 	bl	8002f30 <HAL_GPIO_WritePin>
 	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9)==1){
 8001500:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001504:	4813      	ldr	r0, [pc, #76]	@ (8001554 <ledZelena+0x84>)
 8001506:	f001 fcfb 	bl	8002f00 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	2b01      	cmp	r3, #1
 800150e:	d10d      	bne.n	800152c <ledZelena+0x5c>
 	 	__HAL_TIM_SET_AUTORELOAD(&htim2, 300);
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <ledZelena+0x88>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001518:	62da      	str	r2, [r3, #44]	@ 0x2c
 800151a:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <ledZelena+0x88>)
 800151c:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001520:	60da      	str	r2, [r3, #12]
 	 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 3);
 8001522:	4b0d      	ldr	r3, [pc, #52]	@ (8001558 <ledZelena+0x88>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2203      	movs	r2, #3
 8001528:	639a      	str	r2, [r3, #56]	@ 0x38
 	else{
 		__HAL_TIM_SET_AUTORELOAD(&htim2, 0);
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 		}

}
 800152a:	e00a      	b.n	8001542 <ledZelena+0x72>
 		__HAL_TIM_SET_AUTORELOAD(&htim2, 0);
 800152c:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <ledZelena+0x88>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2200      	movs	r2, #0
 8001532:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <ledZelena+0x88>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
 		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <ledZelena+0x88>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2200      	movs	r2, #0
 8001540:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	200001a4 	.word	0x200001a4
 800154c:	40020400 	.word	0x40020400
 8001550:	40020800 	.word	0x40020800
 8001554:	40020000 	.word	0x40020000
 8001558:	2000015c 	.word	0x2000015c

0800155c <ledNula>:
void ledNula (void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2140      	movs	r1, #64	@ 0x40
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <ledNula+0x40>)
 8001566:	f001 fce3 	bl	8002f30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2180      	movs	r1, #128	@ 0x80
 800156e:	480c      	ldr	r0, [pc, #48]	@ (80015a0 <ledNula+0x44>)
 8001570:	f001 fcde 	bl	8002f30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, 0);
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800157a:	480a      	ldr	r0, [pc, #40]	@ (80015a4 <ledNula+0x48>)
 800157c:	f001 fcd8 	bl	8002f30 <HAL_GPIO_WritePin>
 	__HAL_TIM_SET_AUTORELOAD(&htim2, 0);
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <ledNula+0x4c>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001588:	4b07      	ldr	r3, [pc, #28]	@ (80015a8 <ledNula+0x4c>)
 800158a:	2200      	movs	r2, #0
 800158c:	60da      	str	r2, [r3, #12]
 	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <ledNula+0x4c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2200      	movs	r2, #0
 8001594:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40020400 	.word	0x40020400
 80015a0:	40020800 	.word	0x40020800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	2000015c 	.word	0x2000015c

080015ac <signalizacijaNum>:
void signalizacijaNum (void){
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    if(Distance<7){
 80015b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001664 <signalizacijaNum+0xb8>)
 80015b2:	881b      	ldrh	r3, [r3, #0]
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d812      	bhi.n	80015de <signalizacijaNum+0x32>
    	LCD_Clear();
 80015b8:	f7ff fc64 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(6,0);
 80015bc:	2100      	movs	r1, #0
 80015be:	2006      	movs	r0, #6
 80015c0:	f7ff fc8c 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("POZOR");
 80015c4:	4828      	ldr	r0, [pc, #160]	@ (8001668 <signalizacijaNum+0xbc>)
 80015c6:	f7ff fcf1 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(6,1);
 80015ca:	2101      	movs	r1, #1
 80015cc:	2006      	movs	r0, #6
 80015ce:	f7ff fc85 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("STOJ!");
 80015d2:	4826      	ldr	r0, [pc, #152]	@ (800166c <signalizacijaNum+0xc0>)
 80015d4:	f7ff fcea 	bl	8000fac <LCD_PrintStr>
    	ledCrvena();
 80015d8:	f7ff feee 	bl	80013b8 <ledCrvena>
    	LCD_PrintStr(strUdaljenost);
    	LCD_SetCursor(0,0);
    	LCD_PrintStr("Udaljenost");
    	ledNula();
    }
}
 80015dc:	e03f      	b.n	800165e <signalizacijaNum+0xb2>
    else if(Distance<15){
 80015de:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <signalizacijaNum+0xb8>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	2b0e      	cmp	r3, #14
 80015e4:	d812      	bhi.n	800160c <signalizacijaNum+0x60>
    	LCD_Clear();
 80015e6:	f7ff fc4d 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,1);
 80015ea:	2101      	movs	r1, #1
 80015ec:	2000      	movs	r0, #0
 80015ee:	f7ff fc75 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr(strUdaljenost);
 80015f2:	481f      	ldr	r0, [pc, #124]	@ (8001670 <signalizacijaNum+0xc4>)
 80015f4:	f7ff fcda 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,0);
 80015f8:	2100      	movs	r1, #0
 80015fa:	2000      	movs	r0, #0
 80015fc:	f7ff fc6e 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost");
 8001600:	481c      	ldr	r0, [pc, #112]	@ (8001674 <signalizacijaNum+0xc8>)
 8001602:	f7ff fcd3 	bl	8000fac <LCD_PrintStr>
    	ledZuta();
 8001606:	f7ff ff1d 	bl	8001444 <ledZuta>
}
 800160a:	e028      	b.n	800165e <signalizacijaNum+0xb2>
    else if(Distance<30){
 800160c:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <signalizacijaNum+0xb8>)
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	2b1d      	cmp	r3, #29
 8001612:	d812      	bhi.n	800163a <signalizacijaNum+0x8e>
    	LCD_Clear();
 8001614:	f7ff fc36 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,1);
 8001618:	2101      	movs	r1, #1
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fc5e 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr(strUdaljenost);
 8001620:	4813      	ldr	r0, [pc, #76]	@ (8001670 <signalizacijaNum+0xc4>)
 8001622:	f7ff fcc3 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,0);
 8001626:	2100      	movs	r1, #0
 8001628:	2000      	movs	r0, #0
 800162a:	f7ff fc57 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost");
 800162e:	4811      	ldr	r0, [pc, #68]	@ (8001674 <signalizacijaNum+0xc8>)
 8001630:	f7ff fcbc 	bl	8000fac <LCD_PrintStr>
		ledZelena();
 8001634:	f7ff ff4c 	bl	80014d0 <ledZelena>
}
 8001638:	e011      	b.n	800165e <signalizacijaNum+0xb2>
    	LCD_Clear();
 800163a:	f7ff fc23 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,1);
 800163e:	2101      	movs	r1, #1
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fc4b 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr(strUdaljenost);
 8001646:	480a      	ldr	r0, [pc, #40]	@ (8001670 <signalizacijaNum+0xc4>)
 8001648:	f7ff fcb0 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,0);
 800164c:	2100      	movs	r1, #0
 800164e:	2000      	movs	r0, #0
 8001650:	f7ff fc44 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost");
 8001654:	4807      	ldr	r0, [pc, #28]	@ (8001674 <signalizacijaNum+0xc8>)
 8001656:	f7ff fca9 	bl	8000fac <LCD_PrintStr>
    	ledNula();
 800165a:	f7ff ff7f 	bl	800155c <ledNula>
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200000f8 	.word	0x200000f8
 8001668:	08005e94 	.word	0x08005e94
 800166c:	08005e9c 	.word	0x08005e9c
 8001670:	200000fc 	.word	0x200000fc
 8001674:	08005ea4 	.word	0x08005ea4

08001678 <signalizacijaBar>:

void signalizacijaBar (void){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
    if(Distance<7){
 800167c:	4bdb      	ldr	r3, [pc, #876]	@ (80019ec <signalizacijaBar+0x374>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	2b06      	cmp	r3, #6
 8001682:	d87b      	bhi.n	800177c <signalizacijaBar+0x104>
    	LCD_Clear();
 8001684:	f7ff fbfe 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(3,0);
 8001688:	2100      	movs	r1, #0
 800168a:	2003      	movs	r0, #3
 800168c:	f7ff fc26 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("UPOZORENJE");
 8001690:	48d7      	ldr	r0, [pc, #860]	@ (80019f0 <signalizacijaBar+0x378>)
 8001692:	f7ff fc8b 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001696:	2101      	movs	r1, #1
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff fc1f 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 800169e:	20ff      	movs	r0, #255	@ 0xff
 80016a0:	f7ff fc77 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 80016a4:	2101      	movs	r1, #1
 80016a6:	2001      	movs	r0, #1
 80016a8:	f7ff fc18 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80016ac:	20ff      	movs	r0, #255	@ 0xff
 80016ae:	f7ff fc70 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 80016b2:	2101      	movs	r1, #1
 80016b4:	2002      	movs	r0, #2
 80016b6:	f7ff fc11 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80016ba:	20ff      	movs	r0, #255	@ 0xff
 80016bc:	f7ff fc69 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 80016c0:	2101      	movs	r1, #1
 80016c2:	2003      	movs	r0, #3
 80016c4:	f7ff fc0a 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80016c8:	20ff      	movs	r0, #255	@ 0xff
 80016ca:	f7ff fc62 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 80016ce:	2101      	movs	r1, #1
 80016d0:	2004      	movs	r0, #4
 80016d2:	f7ff fc03 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80016d6:	20ff      	movs	r0, #255	@ 0xff
 80016d8:	f7ff fc5b 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(5,1);
 80016dc:	2101      	movs	r1, #1
 80016de:	2005      	movs	r0, #5
 80016e0:	f7ff fbfc 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80016e4:	20ff      	movs	r0, #255	@ 0xff
 80016e6:	f7ff fc54 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(6,1);
 80016ea:	2101      	movs	r1, #1
 80016ec:	2006      	movs	r0, #6
 80016ee:	f7ff fbf5 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80016f2:	20ff      	movs	r0, #255	@ 0xff
 80016f4:	f7ff fc4d 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(7,1);
 80016f8:	2101      	movs	r1, #1
 80016fa:	2007      	movs	r0, #7
 80016fc:	f7ff fbee 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001700:	20ff      	movs	r0, #255	@ 0xff
 8001702:	f7ff fc46 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(8,1);
 8001706:	2101      	movs	r1, #1
 8001708:	2008      	movs	r0, #8
 800170a:	f7ff fbe7 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 800170e:	20ff      	movs	r0, #255	@ 0xff
 8001710:	f7ff fc3f 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(9,1);
 8001714:	2101      	movs	r1, #1
 8001716:	2009      	movs	r0, #9
 8001718:	f7ff fbe0 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 800171c:	20ff      	movs	r0, #255	@ 0xff
 800171e:	f7ff fc38 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(10,1);
 8001722:	2101      	movs	r1, #1
 8001724:	200a      	movs	r0, #10
 8001726:	f7ff fbd9 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 800172a:	20ff      	movs	r0, #255	@ 0xff
 800172c:	f7ff fc31 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(11,1);
 8001730:	2101      	movs	r1, #1
 8001732:	200b      	movs	r0, #11
 8001734:	f7ff fbd2 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001738:	20ff      	movs	r0, #255	@ 0xff
 800173a:	f7ff fc2a 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(12,1);
 800173e:	2101      	movs	r1, #1
 8001740:	200c      	movs	r0, #12
 8001742:	f7ff fbcb 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001746:	20ff      	movs	r0, #255	@ 0xff
 8001748:	f7ff fc23 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(13,1);
 800174c:	2101      	movs	r1, #1
 800174e:	200d      	movs	r0, #13
 8001750:	f7ff fbc4 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001754:	20ff      	movs	r0, #255	@ 0xff
 8001756:	f7ff fc1c 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(14,1);
 800175a:	2101      	movs	r1, #1
 800175c:	200e      	movs	r0, #14
 800175e:	f7ff fbbd 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001762:	20ff      	movs	r0, #255	@ 0xff
 8001764:	f7ff fc15 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(15,1);
 8001768:	2101      	movs	r1, #1
 800176a:	200f      	movs	r0, #15
 800176c:	f7ff fbb6 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001770:	20ff      	movs	r0, #255	@ 0xff
 8001772:	f7ff fc0e 	bl	8000f92 <LCD_PrintSpecialChar>
    	ledCrvena();
 8001776:	f7ff fe1f 	bl	80013b8 <ledCrvena>
    	LCD_Clear();
    	LCD_SetCursor(0,0);
    	LCD_PrintStr("Udaljenost stup:");
    	ledNula();
    }
}
 800177a:	e397      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<10 && Distance>=8){
 800177c:	4b9b      	ldr	r3, [pc, #620]	@ (80019ec <signalizacijaBar+0x374>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	2b09      	cmp	r3, #9
 8001782:	d86a      	bhi.n	800185a <signalizacijaBar+0x1e2>
 8001784:	4b99      	ldr	r3, [pc, #612]	@ (80019ec <signalizacijaBar+0x374>)
 8001786:	881b      	ldrh	r3, [r3, #0]
 8001788:	2b07      	cmp	r3, #7
 800178a:	d966      	bls.n	800185a <signalizacijaBar+0x1e2>
    	LCD_Clear();
 800178c:	f7ff fb7a 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001790:	2100      	movs	r1, #0
 8001792:	2000      	movs	r0, #0
 8001794:	f7ff fba2 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001798:	4896      	ldr	r0, [pc, #600]	@ (80019f4 <signalizacijaBar+0x37c>)
 800179a:	f7ff fc07 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 800179e:	2101      	movs	r1, #1
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fb9b 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80017a6:	20ff      	movs	r0, #255	@ 0xff
 80017a8:	f7ff fbf3 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 80017ac:	2101      	movs	r1, #1
 80017ae:	2001      	movs	r0, #1
 80017b0:	f7ff fb94 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80017b4:	20ff      	movs	r0, #255	@ 0xff
 80017b6:	f7ff fbec 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 80017ba:	2101      	movs	r1, #1
 80017bc:	2002      	movs	r0, #2
 80017be:	f7ff fb8d 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80017c2:	20ff      	movs	r0, #255	@ 0xff
 80017c4:	f7ff fbe5 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 80017c8:	2101      	movs	r1, #1
 80017ca:	2003      	movs	r0, #3
 80017cc:	f7ff fb86 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80017d0:	20ff      	movs	r0, #255	@ 0xff
 80017d2:	f7ff fbde 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 80017d6:	2101      	movs	r1, #1
 80017d8:	2004      	movs	r0, #4
 80017da:	f7ff fb7f 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80017de:	20ff      	movs	r0, #255	@ 0xff
 80017e0:	f7ff fbd7 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(5,1);
 80017e4:	2101      	movs	r1, #1
 80017e6:	2005      	movs	r0, #5
 80017e8:	f7ff fb78 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80017ec:	20ff      	movs	r0, #255	@ 0xff
 80017ee:	f7ff fbd0 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(6,1);
 80017f2:	2101      	movs	r1, #1
 80017f4:	2006      	movs	r0, #6
 80017f6:	f7ff fb71 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80017fa:	20ff      	movs	r0, #255	@ 0xff
 80017fc:	f7ff fbc9 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(7,1);
 8001800:	2101      	movs	r1, #1
 8001802:	2007      	movs	r0, #7
 8001804:	f7ff fb6a 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001808:	20ff      	movs	r0, #255	@ 0xff
 800180a:	f7ff fbc2 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(8,1);
 800180e:	2101      	movs	r1, #1
 8001810:	2008      	movs	r0, #8
 8001812:	f7ff fb63 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001816:	20ff      	movs	r0, #255	@ 0xff
 8001818:	f7ff fbbb 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(9,1);
 800181c:	2101      	movs	r1, #1
 800181e:	2009      	movs	r0, #9
 8001820:	f7ff fb5c 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001824:	20ff      	movs	r0, #255	@ 0xff
 8001826:	f7ff fbb4 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(10,1);
 800182a:	2101      	movs	r1, #1
 800182c:	200a      	movs	r0, #10
 800182e:	f7ff fb55 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001832:	20ff      	movs	r0, #255	@ 0xff
 8001834:	f7ff fbad 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(11,1);
 8001838:	2101      	movs	r1, #1
 800183a:	200b      	movs	r0, #11
 800183c:	f7ff fb4e 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001840:	20ff      	movs	r0, #255	@ 0xff
 8001842:	f7ff fba6 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(12,1);
 8001846:	2101      	movs	r1, #1
 8001848:	200c      	movs	r0, #12
 800184a:	f7ff fb47 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 800184e:	20ff      	movs	r0, #255	@ 0xff
 8001850:	f7ff fb9f 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZuta();
 8001854:	f7ff fdf6 	bl	8001444 <ledZuta>
 8001858:	e328      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<12 && Distance>=10){
 800185a:	4b64      	ldr	r3, [pc, #400]	@ (80019ec <signalizacijaBar+0x374>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	2b0b      	cmp	r3, #11
 8001860:	d863      	bhi.n	800192a <signalizacijaBar+0x2b2>
 8001862:	4b62      	ldr	r3, [pc, #392]	@ (80019ec <signalizacijaBar+0x374>)
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	2b09      	cmp	r3, #9
 8001868:	d95f      	bls.n	800192a <signalizacijaBar+0x2b2>
    	LCD_Clear();
 800186a:	f7ff fb0b 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 800186e:	2100      	movs	r1, #0
 8001870:	2000      	movs	r0, #0
 8001872:	f7ff fb33 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001876:	485f      	ldr	r0, [pc, #380]	@ (80019f4 <signalizacijaBar+0x37c>)
 8001878:	f7ff fb98 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 800187c:	2101      	movs	r1, #1
 800187e:	2000      	movs	r0, #0
 8001880:	f7ff fb2c 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001884:	20ff      	movs	r0, #255	@ 0xff
 8001886:	f7ff fb84 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 800188a:	2101      	movs	r1, #1
 800188c:	2001      	movs	r0, #1
 800188e:	f7ff fb25 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001892:	20ff      	movs	r0, #255	@ 0xff
 8001894:	f7ff fb7d 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001898:	2101      	movs	r1, #1
 800189a:	2002      	movs	r0, #2
 800189c:	f7ff fb1e 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80018a0:	20ff      	movs	r0, #255	@ 0xff
 80018a2:	f7ff fb76 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 80018a6:	2101      	movs	r1, #1
 80018a8:	2003      	movs	r0, #3
 80018aa:	f7ff fb17 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80018ae:	20ff      	movs	r0, #255	@ 0xff
 80018b0:	f7ff fb6f 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 80018b4:	2101      	movs	r1, #1
 80018b6:	2004      	movs	r0, #4
 80018b8:	f7ff fb10 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80018bc:	20ff      	movs	r0, #255	@ 0xff
 80018be:	f7ff fb68 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(5,1);
 80018c2:	2101      	movs	r1, #1
 80018c4:	2005      	movs	r0, #5
 80018c6:	f7ff fb09 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80018ca:	20ff      	movs	r0, #255	@ 0xff
 80018cc:	f7ff fb61 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(6,1);
 80018d0:	2101      	movs	r1, #1
 80018d2:	2006      	movs	r0, #6
 80018d4:	f7ff fb02 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80018d8:	20ff      	movs	r0, #255	@ 0xff
 80018da:	f7ff fb5a 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(7,1);
 80018de:	2101      	movs	r1, #1
 80018e0:	2007      	movs	r0, #7
 80018e2:	f7ff fafb 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80018e6:	20ff      	movs	r0, #255	@ 0xff
 80018e8:	f7ff fb53 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(8,1);
 80018ec:	2101      	movs	r1, #1
 80018ee:	2008      	movs	r0, #8
 80018f0:	f7ff faf4 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80018f4:	20ff      	movs	r0, #255	@ 0xff
 80018f6:	f7ff fb4c 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(9,1);
 80018fa:	2101      	movs	r1, #1
 80018fc:	2009      	movs	r0, #9
 80018fe:	f7ff faed 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001902:	20ff      	movs	r0, #255	@ 0xff
 8001904:	f7ff fb45 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(10,1);
 8001908:	2101      	movs	r1, #1
 800190a:	200a      	movs	r0, #10
 800190c:	f7ff fae6 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001910:	20ff      	movs	r0, #255	@ 0xff
 8001912:	f7ff fb3e 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(11,1);
 8001916:	2101      	movs	r1, #1
 8001918:	200b      	movs	r0, #11
 800191a:	f7ff fadf 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 800191e:	20ff      	movs	r0, #255	@ 0xff
 8001920:	f7ff fb37 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZuta();
 8001924:	f7ff fd8e 	bl	8001444 <ledZuta>
 8001928:	e2c0      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<14 && Distance>=12){
 800192a:	4b30      	ldr	r3, [pc, #192]	@ (80019ec <signalizacijaBar+0x374>)
 800192c:	881b      	ldrh	r3, [r3, #0]
 800192e:	2b0d      	cmp	r3, #13
 8001930:	d862      	bhi.n	80019f8 <signalizacijaBar+0x380>
 8001932:	4b2e      	ldr	r3, [pc, #184]	@ (80019ec <signalizacijaBar+0x374>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	2b0b      	cmp	r3, #11
 8001938:	d95e      	bls.n	80019f8 <signalizacijaBar+0x380>
    	LCD_Clear();
 800193a:	f7ff faa3 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 800193e:	2100      	movs	r1, #0
 8001940:	2000      	movs	r0, #0
 8001942:	f7ff facb 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001946:	482b      	ldr	r0, [pc, #172]	@ (80019f4 <signalizacijaBar+0x37c>)
 8001948:	f7ff fb30 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 800194c:	2101      	movs	r1, #1
 800194e:	2000      	movs	r0, #0
 8001950:	f7ff fac4 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001954:	20ff      	movs	r0, #255	@ 0xff
 8001956:	f7ff fb1c 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 800195a:	2101      	movs	r1, #1
 800195c:	2001      	movs	r0, #1
 800195e:	f7ff fabd 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001962:	20ff      	movs	r0, #255	@ 0xff
 8001964:	f7ff fb15 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001968:	2101      	movs	r1, #1
 800196a:	2002      	movs	r0, #2
 800196c:	f7ff fab6 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001970:	20ff      	movs	r0, #255	@ 0xff
 8001972:	f7ff fb0e 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 8001976:	2101      	movs	r1, #1
 8001978:	2003      	movs	r0, #3
 800197a:	f7ff faaf 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 800197e:	20ff      	movs	r0, #255	@ 0xff
 8001980:	f7ff fb07 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 8001984:	2101      	movs	r1, #1
 8001986:	2004      	movs	r0, #4
 8001988:	f7ff faa8 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 800198c:	20ff      	movs	r0, #255	@ 0xff
 800198e:	f7ff fb00 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(5,1);
 8001992:	2101      	movs	r1, #1
 8001994:	2005      	movs	r0, #5
 8001996:	f7ff faa1 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 800199a:	20ff      	movs	r0, #255	@ 0xff
 800199c:	f7ff faf9 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(6,1);
 80019a0:	2101      	movs	r1, #1
 80019a2:	2006      	movs	r0, #6
 80019a4:	f7ff fa9a 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80019a8:	20ff      	movs	r0, #255	@ 0xff
 80019aa:	f7ff faf2 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(7,1);
 80019ae:	2101      	movs	r1, #1
 80019b0:	2007      	movs	r0, #7
 80019b2:	f7ff fa93 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80019b6:	20ff      	movs	r0, #255	@ 0xff
 80019b8:	f7ff faeb 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(8,1);
 80019bc:	2101      	movs	r1, #1
 80019be:	2008      	movs	r0, #8
 80019c0:	f7ff fa8c 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80019c4:	20ff      	movs	r0, #255	@ 0xff
 80019c6:	f7ff fae4 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(9,1);
 80019ca:	2101      	movs	r1, #1
 80019cc:	2009      	movs	r0, #9
 80019ce:	f7ff fa85 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80019d2:	20ff      	movs	r0, #255	@ 0xff
 80019d4:	f7ff fadd 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(10,1);
 80019d8:	2101      	movs	r1, #1
 80019da:	200a      	movs	r0, #10
 80019dc:	f7ff fa7e 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 80019e0:	20ff      	movs	r0, #255	@ 0xff
 80019e2:	f7ff fad6 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZuta();
 80019e6:	f7ff fd2d 	bl	8001444 <ledZuta>
 80019ea:	e25f      	b.n	8001eac <signalizacijaBar+0x834>
 80019ec:	200000f8 	.word	0x200000f8
 80019f0:	08005eb0 	.word	0x08005eb0
 80019f4:	08005ebc 	.word	0x08005ebc
    else if(Distance<16 && Distance>=14){
 80019f8:	4bd9      	ldr	r3, [pc, #868]	@ (8001d60 <signalizacijaBar+0x6e8>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d855      	bhi.n	8001aac <signalizacijaBar+0x434>
 8001a00:	4bd7      	ldr	r3, [pc, #860]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001a02:	881b      	ldrh	r3, [r3, #0]
 8001a04:	2b0d      	cmp	r3, #13
 8001a06:	d951      	bls.n	8001aac <signalizacijaBar+0x434>
    	LCD_Clear();
 8001a08:	f7ff fa3c 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f7ff fa64 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001a14:	48d3      	ldr	r0, [pc, #844]	@ (8001d64 <signalizacijaBar+0x6ec>)
 8001a16:	f7ff fac9 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	2000      	movs	r0, #0
 8001a1e:	f7ff fa5d 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001a22:	20ff      	movs	r0, #255	@ 0xff
 8001a24:	f7ff fab5 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 8001a28:	2101      	movs	r1, #1
 8001a2a:	2001      	movs	r0, #1
 8001a2c:	f7ff fa56 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001a30:	20ff      	movs	r0, #255	@ 0xff
 8001a32:	f7ff faae 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001a36:	2101      	movs	r1, #1
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f7ff fa4f 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001a3e:	20ff      	movs	r0, #255	@ 0xff
 8001a40:	f7ff faa7 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 8001a44:	2101      	movs	r1, #1
 8001a46:	2003      	movs	r0, #3
 8001a48:	f7ff fa48 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001a4c:	20ff      	movs	r0, #255	@ 0xff
 8001a4e:	f7ff faa0 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 8001a52:	2101      	movs	r1, #1
 8001a54:	2004      	movs	r0, #4
 8001a56:	f7ff fa41 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001a5a:	20ff      	movs	r0, #255	@ 0xff
 8001a5c:	f7ff fa99 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(5,1);
 8001a60:	2101      	movs	r1, #1
 8001a62:	2005      	movs	r0, #5
 8001a64:	f7ff fa3a 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001a68:	20ff      	movs	r0, #255	@ 0xff
 8001a6a:	f7ff fa92 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(6,1);
 8001a6e:	2101      	movs	r1, #1
 8001a70:	2006      	movs	r0, #6
 8001a72:	f7ff fa33 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001a76:	20ff      	movs	r0, #255	@ 0xff
 8001a78:	f7ff fa8b 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(7,1);
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	2007      	movs	r0, #7
 8001a80:	f7ff fa2c 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001a84:	20ff      	movs	r0, #255	@ 0xff
 8001a86:	f7ff fa84 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(8,1);
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	2008      	movs	r0, #8
 8001a8e:	f7ff fa25 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001a92:	20ff      	movs	r0, #255	@ 0xff
 8001a94:	f7ff fa7d 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(9,1);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	2009      	movs	r0, #9
 8001a9c:	f7ff fa1e 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001aa0:	20ff      	movs	r0, #255	@ 0xff
 8001aa2:	f7ff fa76 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZuta();
 8001aa6:	f7ff fccd 	bl	8001444 <ledZuta>
 8001aaa:	e1ff      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<16 && Distance>=14){
 8001aac:	4bac      	ldr	r3, [pc, #688]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	2b0f      	cmp	r3, #15
 8001ab2:	d84e      	bhi.n	8001b52 <signalizacijaBar+0x4da>
 8001ab4:	4baa      	ldr	r3, [pc, #680]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	2b0d      	cmp	r3, #13
 8001aba:	d94a      	bls.n	8001b52 <signalizacijaBar+0x4da>
    	LCD_Clear();
 8001abc:	f7ff f9e2 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	f7ff fa0a 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001ac8:	48a6      	ldr	r0, [pc, #664]	@ (8001d64 <signalizacijaBar+0x6ec>)
 8001aca:	f7ff fa6f 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001ace:	2101      	movs	r1, #1
 8001ad0:	2000      	movs	r0, #0
 8001ad2:	f7ff fa03 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001ad6:	20ff      	movs	r0, #255	@ 0xff
 8001ad8:	f7ff fa5b 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 8001adc:	2101      	movs	r1, #1
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff f9fc 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001ae4:	20ff      	movs	r0, #255	@ 0xff
 8001ae6:	f7ff fa54 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001aea:	2101      	movs	r1, #1
 8001aec:	2002      	movs	r0, #2
 8001aee:	f7ff f9f5 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001af2:	20ff      	movs	r0, #255	@ 0xff
 8001af4:	f7ff fa4d 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 8001af8:	2101      	movs	r1, #1
 8001afa:	2003      	movs	r0, #3
 8001afc:	f7ff f9ee 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001b00:	20ff      	movs	r0, #255	@ 0xff
 8001b02:	f7ff fa46 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 8001b06:	2101      	movs	r1, #1
 8001b08:	2004      	movs	r0, #4
 8001b0a:	f7ff f9e7 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001b0e:	20ff      	movs	r0, #255	@ 0xff
 8001b10:	f7ff fa3f 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(5,1);
 8001b14:	2101      	movs	r1, #1
 8001b16:	2005      	movs	r0, #5
 8001b18:	f7ff f9e0 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001b1c:	20ff      	movs	r0, #255	@ 0xff
 8001b1e:	f7ff fa38 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(6,1);
 8001b22:	2101      	movs	r1, #1
 8001b24:	2006      	movs	r0, #6
 8001b26:	f7ff f9d9 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001b2a:	20ff      	movs	r0, #255	@ 0xff
 8001b2c:	f7ff fa31 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(7,1);
 8001b30:	2101      	movs	r1, #1
 8001b32:	2007      	movs	r0, #7
 8001b34:	f7ff f9d2 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001b38:	20ff      	movs	r0, #255	@ 0xff
 8001b3a:	f7ff fa2a 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(8,1);
 8001b3e:	2101      	movs	r1, #1
 8001b40:	2008      	movs	r0, #8
 8001b42:	f7ff f9cb 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001b46:	20ff      	movs	r0, #255	@ 0xff
 8001b48:	f7ff fa23 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZuta();
 8001b4c:	f7ff fc7a 	bl	8001444 <ledZuta>
 8001b50:	e1ac      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<18 && Distance>=16){
 8001b52:	4b83      	ldr	r3, [pc, #524]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001b54:	881b      	ldrh	r3, [r3, #0]
 8001b56:	2b11      	cmp	r3, #17
 8001b58:	d847      	bhi.n	8001bea <signalizacijaBar+0x572>
 8001b5a:	4b81      	ldr	r3, [pc, #516]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001b5c:	881b      	ldrh	r3, [r3, #0]
 8001b5e:	2b0f      	cmp	r3, #15
 8001b60:	d943      	bls.n	8001bea <signalizacijaBar+0x572>
    	LCD_Clear();
 8001b62:	f7ff f98f 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001b66:	2100      	movs	r1, #0
 8001b68:	2000      	movs	r0, #0
 8001b6a:	f7ff f9b7 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001b6e:	487d      	ldr	r0, [pc, #500]	@ (8001d64 <signalizacijaBar+0x6ec>)
 8001b70:	f7ff fa1c 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001b74:	2101      	movs	r1, #1
 8001b76:	2000      	movs	r0, #0
 8001b78:	f7ff f9b0 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001b7c:	20ff      	movs	r0, #255	@ 0xff
 8001b7e:	f7ff fa08 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 8001b82:	2101      	movs	r1, #1
 8001b84:	2001      	movs	r0, #1
 8001b86:	f7ff f9a9 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001b8a:	20ff      	movs	r0, #255	@ 0xff
 8001b8c:	f7ff fa01 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001b90:	2101      	movs	r1, #1
 8001b92:	2002      	movs	r0, #2
 8001b94:	f7ff f9a2 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001b98:	20ff      	movs	r0, #255	@ 0xff
 8001b9a:	f7ff f9fa 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	2003      	movs	r0, #3
 8001ba2:	f7ff f99b 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001ba6:	20ff      	movs	r0, #255	@ 0xff
 8001ba8:	f7ff f9f3 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 8001bac:	2101      	movs	r1, #1
 8001bae:	2004      	movs	r0, #4
 8001bb0:	f7ff f994 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001bb4:	20ff      	movs	r0, #255	@ 0xff
 8001bb6:	f7ff f9ec 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(5,1);
 8001bba:	2101      	movs	r1, #1
 8001bbc:	2005      	movs	r0, #5
 8001bbe:	f7ff f98d 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001bc2:	20ff      	movs	r0, #255	@ 0xff
 8001bc4:	f7ff f9e5 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(6,1);
 8001bc8:	2101      	movs	r1, #1
 8001bca:	2006      	movs	r0, #6
 8001bcc:	f7ff f986 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001bd0:	20ff      	movs	r0, #255	@ 0xff
 8001bd2:	f7ff f9de 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(7,1);
 8001bd6:	2101      	movs	r1, #1
 8001bd8:	2007      	movs	r0, #7
 8001bda:	f7ff f97f 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001bde:	20ff      	movs	r0, #255	@ 0xff
 8001be0:	f7ff f9d7 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZelena();
 8001be4:	f7ff fc74 	bl	80014d0 <ledZelena>
 8001be8:	e160      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<20 && Distance>=18){
 8001bea:	4b5d      	ldr	r3, [pc, #372]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	2b13      	cmp	r3, #19
 8001bf0:	d840      	bhi.n	8001c74 <signalizacijaBar+0x5fc>
 8001bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	2b11      	cmp	r3, #17
 8001bf8:	d93c      	bls.n	8001c74 <signalizacijaBar+0x5fc>
    	LCD_Clear();
 8001bfa:	f7ff f943 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001bfe:	2100      	movs	r1, #0
 8001c00:	2000      	movs	r0, #0
 8001c02:	f7ff f96b 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001c06:	4857      	ldr	r0, [pc, #348]	@ (8001d64 <signalizacijaBar+0x6ec>)
 8001c08:	f7ff f9d0 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff f964 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001c14:	20ff      	movs	r0, #255	@ 0xff
 8001c16:	f7ff f9bc 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff f95d 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001c22:	20ff      	movs	r0, #255	@ 0xff
 8001c24:	f7ff f9b5 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001c28:	2101      	movs	r1, #1
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	f7ff f956 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001c30:	20ff      	movs	r0, #255	@ 0xff
 8001c32:	f7ff f9ae 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 8001c36:	2101      	movs	r1, #1
 8001c38:	2003      	movs	r0, #3
 8001c3a:	f7ff f94f 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001c3e:	20ff      	movs	r0, #255	@ 0xff
 8001c40:	f7ff f9a7 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 8001c44:	2101      	movs	r1, #1
 8001c46:	2004      	movs	r0, #4
 8001c48:	f7ff f948 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001c4c:	20ff      	movs	r0, #255	@ 0xff
 8001c4e:	f7ff f9a0 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(5,1);
 8001c52:	2101      	movs	r1, #1
 8001c54:	2005      	movs	r0, #5
 8001c56:	f7ff f941 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001c5a:	20ff      	movs	r0, #255	@ 0xff
 8001c5c:	f7ff f999 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(6,1);
 8001c60:	2101      	movs	r1, #1
 8001c62:	2006      	movs	r0, #6
 8001c64:	f7ff f93a 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001c68:	20ff      	movs	r0, #255	@ 0xff
 8001c6a:	f7ff f992 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZelena();
 8001c6e:	f7ff fc2f 	bl	80014d0 <ledZelena>
 8001c72:	e11b      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<22 && Distance>=20){
 8001c74:	4b3a      	ldr	r3, [pc, #232]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	2b15      	cmp	r3, #21
 8001c7a:	d839      	bhi.n	8001cf0 <signalizacijaBar+0x678>
 8001c7c:	4b38      	ldr	r3, [pc, #224]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	2b13      	cmp	r3, #19
 8001c82:	d935      	bls.n	8001cf0 <signalizacijaBar+0x678>
    	LCD_Clear();
 8001c84:	f7ff f8fe 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2000      	movs	r0, #0
 8001c8c:	f7ff f926 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001c90:	4834      	ldr	r0, [pc, #208]	@ (8001d64 <signalizacijaBar+0x6ec>)
 8001c92:	f7ff f98b 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001c96:	2101      	movs	r1, #1
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff f91f 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001c9e:	20ff      	movs	r0, #255	@ 0xff
 8001ca0:	f7ff f977 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	2001      	movs	r0, #1
 8001ca8:	f7ff f918 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001cac:	20ff      	movs	r0, #255	@ 0xff
 8001cae:	f7ff f970 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	2002      	movs	r0, #2
 8001cb6:	f7ff f911 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001cba:	20ff      	movs	r0, #255	@ 0xff
 8001cbc:	f7ff f969 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	2003      	movs	r0, #3
 8001cc4:	f7ff f90a 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001cc8:	20ff      	movs	r0, #255	@ 0xff
 8001cca:	f7ff f962 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 8001cce:	2101      	movs	r1, #1
 8001cd0:	2004      	movs	r0, #4
 8001cd2:	f7ff f903 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001cd6:	20ff      	movs	r0, #255	@ 0xff
 8001cd8:	f7ff f95b 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(5,1);
 8001cdc:	2101      	movs	r1, #1
 8001cde:	2005      	movs	r0, #5
 8001ce0:	f7ff f8fc 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001ce4:	20ff      	movs	r0, #255	@ 0xff
 8001ce6:	f7ff f954 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZelena();
 8001cea:	f7ff fbf1 	bl	80014d0 <ledZelena>
 8001cee:	e0dd      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<24 && Distance>=22){
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001cf2:	881b      	ldrh	r3, [r3, #0]
 8001cf4:	2b17      	cmp	r3, #23
 8001cf6:	d837      	bhi.n	8001d68 <signalizacijaBar+0x6f0>
 8001cf8:	4b19      	ldr	r3, [pc, #100]	@ (8001d60 <signalizacijaBar+0x6e8>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	2b15      	cmp	r3, #21
 8001cfe:	d933      	bls.n	8001d68 <signalizacijaBar+0x6f0>
    	LCD_Clear();
 8001d00:	f7ff f8c0 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f8e8 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001d0c:	4815      	ldr	r0, [pc, #84]	@ (8001d64 <signalizacijaBar+0x6ec>)
 8001d0e:	f7ff f94d 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001d12:	2101      	movs	r1, #1
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f8e1 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001d1a:	20ff      	movs	r0, #255	@ 0xff
 8001d1c:	f7ff f939 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 8001d20:	2101      	movs	r1, #1
 8001d22:	2001      	movs	r0, #1
 8001d24:	f7ff f8da 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001d28:	20ff      	movs	r0, #255	@ 0xff
 8001d2a:	f7ff f932 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001d2e:	2101      	movs	r1, #1
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7ff f8d3 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001d36:	20ff      	movs	r0, #255	@ 0xff
 8001d38:	f7ff f92b 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	2003      	movs	r0, #3
 8001d40:	f7ff f8cc 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001d44:	20ff      	movs	r0, #255	@ 0xff
 8001d46:	f7ff f924 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(4,1);
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	2004      	movs	r0, #4
 8001d4e:	f7ff f8c5 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001d52:	20ff      	movs	r0, #255	@ 0xff
 8001d54:	f7ff f91d 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZelena();
 8001d58:	f7ff fbba 	bl	80014d0 <ledZelena>
 8001d5c:	e0a6      	b.n	8001eac <signalizacijaBar+0x834>
 8001d5e:	bf00      	nop
 8001d60:	200000f8 	.word	0x200000f8
 8001d64:	08005ebc 	.word	0x08005ebc
    else if(Distance<26 && Distance>=24){
 8001d68:	4b51      	ldr	r3, [pc, #324]	@ (8001eb0 <signalizacijaBar+0x838>)
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	2b19      	cmp	r3, #25
 8001d6e:	d82b      	bhi.n	8001dc8 <signalizacijaBar+0x750>
 8001d70:	4b4f      	ldr	r3, [pc, #316]	@ (8001eb0 <signalizacijaBar+0x838>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	2b17      	cmp	r3, #23
 8001d76:	d927      	bls.n	8001dc8 <signalizacijaBar+0x750>
    	LCD_Clear();
 8001d78:	f7ff f884 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2000      	movs	r0, #0
 8001d80:	f7ff f8ac 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001d84:	484b      	ldr	r0, [pc, #300]	@ (8001eb4 <signalizacijaBar+0x83c>)
 8001d86:	f7ff f911 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	2000      	movs	r0, #0
 8001d8e:	f7ff f8a5 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001d92:	20ff      	movs	r0, #255	@ 0xff
 8001d94:	f7ff f8fd 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 8001d98:	2101      	movs	r1, #1
 8001d9a:	2001      	movs	r0, #1
 8001d9c:	f7ff f89e 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001da0:	20ff      	movs	r0, #255	@ 0xff
 8001da2:	f7ff f8f6 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001da6:	2101      	movs	r1, #1
 8001da8:	2002      	movs	r0, #2
 8001daa:	f7ff f897 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001dae:	20ff      	movs	r0, #255	@ 0xff
 8001db0:	f7ff f8ef 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(3,1);
 8001db4:	2101      	movs	r1, #1
 8001db6:	2003      	movs	r0, #3
 8001db8:	f7ff f890 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001dbc:	20ff      	movs	r0, #255	@ 0xff
 8001dbe:	f7ff f8e8 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZelena();
 8001dc2:	f7ff fb85 	bl	80014d0 <ledZelena>
 8001dc6:	e071      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<28 && Distance>=26){
 8001dc8:	4b39      	ldr	r3, [pc, #228]	@ (8001eb0 <signalizacijaBar+0x838>)
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	2b1b      	cmp	r3, #27
 8001dce:	d824      	bhi.n	8001e1a <signalizacijaBar+0x7a2>
 8001dd0:	4b37      	ldr	r3, [pc, #220]	@ (8001eb0 <signalizacijaBar+0x838>)
 8001dd2:	881b      	ldrh	r3, [r3, #0]
 8001dd4:	2b19      	cmp	r3, #25
 8001dd6:	d920      	bls.n	8001e1a <signalizacijaBar+0x7a2>
    	LCD_Clear();
 8001dd8:	f7ff f854 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff f87c 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001de4:	4833      	ldr	r0, [pc, #204]	@ (8001eb4 <signalizacijaBar+0x83c>)
 8001de6:	f7ff f8e1 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001dea:	2101      	movs	r1, #1
 8001dec:	2000      	movs	r0, #0
 8001dee:	f7ff f875 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001df2:	20ff      	movs	r0, #255	@ 0xff
 8001df4:	f7ff f8cd 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 8001df8:	2101      	movs	r1, #1
 8001dfa:	2001      	movs	r0, #1
 8001dfc:	f7ff f86e 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001e00:	20ff      	movs	r0, #255	@ 0xff
 8001e02:	f7ff f8c6 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(2,1);
 8001e06:	2101      	movs	r1, #1
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f7ff f867 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001e0e:	20ff      	movs	r0, #255	@ 0xff
 8001e10:	f7ff f8bf 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZelena();
 8001e14:	f7ff fb5c 	bl	80014d0 <ledZelena>
 8001e18:	e048      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<30 && Distance>=28){
 8001e1a:	4b25      	ldr	r3, [pc, #148]	@ (8001eb0 <signalizacijaBar+0x838>)
 8001e1c:	881b      	ldrh	r3, [r3, #0]
 8001e1e:	2b1d      	cmp	r3, #29
 8001e20:	d81d      	bhi.n	8001e5e <signalizacijaBar+0x7e6>
 8001e22:	4b23      	ldr	r3, [pc, #140]	@ (8001eb0 <signalizacijaBar+0x838>)
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	2b1b      	cmp	r3, #27
 8001e28:	d919      	bls.n	8001e5e <signalizacijaBar+0x7e6>
    	LCD_Clear();
 8001e2a:	f7ff f82b 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff f853 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001e36:	481f      	ldr	r0, [pc, #124]	@ (8001eb4 <signalizacijaBar+0x83c>)
 8001e38:	f7ff f8b8 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f7ff f84c 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001e44:	20ff      	movs	r0, #255	@ 0xff
 8001e46:	f7ff f8a4 	bl	8000f92 <LCD_PrintSpecialChar>
    	LCD_SetCursor(1,1);
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	2001      	movs	r0, #1
 8001e4e:	f7ff f845 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001e52:	20ff      	movs	r0, #255	@ 0xff
 8001e54:	f7ff f89d 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZelena();
 8001e58:	f7ff fb3a 	bl	80014d0 <ledZelena>
 8001e5c:	e026      	b.n	8001eac <signalizacijaBar+0x834>
    else if(Distance<32 && Distance>=30){
 8001e5e:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <signalizacijaBar+0x838>)
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	2b1f      	cmp	r3, #31
 8001e64:	d816      	bhi.n	8001e94 <signalizacijaBar+0x81c>
 8001e66:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <signalizacijaBar+0x838>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	2b1d      	cmp	r3, #29
 8001e6c:	d912      	bls.n	8001e94 <signalizacijaBar+0x81c>
    	LCD_Clear();
 8001e6e:	f7ff f809 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001e72:	2100      	movs	r1, #0
 8001e74:	2000      	movs	r0, #0
 8001e76:	f7ff f831 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001e7a:	480e      	ldr	r0, [pc, #56]	@ (8001eb4 <signalizacijaBar+0x83c>)
 8001e7c:	f7ff f896 	bl	8000fac <LCD_PrintStr>
    	LCD_SetCursor(0,1);
 8001e80:	2101      	movs	r1, #1
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff f82a 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintSpecialChar(0xFF);
 8001e88:	20ff      	movs	r0, #255	@ 0xff
 8001e8a:	f7ff f882 	bl	8000f92 <LCD_PrintSpecialChar>
		ledZelena();
 8001e8e:	f7ff fb1f 	bl	80014d0 <ledZelena>
 8001e92:	e00b      	b.n	8001eac <signalizacijaBar+0x834>
    	LCD_Clear();
 8001e94:	f7fe fff6 	bl	8000e84 <LCD_Clear>
    	LCD_SetCursor(0,0);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7ff f81e 	bl	8000edc <LCD_SetCursor>
    	LCD_PrintStr("Udaljenost stup:");
 8001ea0:	4804      	ldr	r0, [pc, #16]	@ (8001eb4 <signalizacijaBar+0x83c>)
 8001ea2:	f7ff f883 	bl	8000fac <LCD_PrintStr>
    	ledNula();
 8001ea6:	f7ff fb59 	bl	800155c <ledNula>
}
 8001eaa:	e7ff      	b.n	8001eac <signalizacijaBar+0x834>
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200000f8 	.word	0x200000f8
 8001eb4:	08005ebc 	.word	0x08005ebc

08001eb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001eb8:	b598      	push	{r3, r4, r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ebc:	f000 fce4 	bl	8002888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec0:	f000 f902 	bl	80020c8 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8001ec4:	f7ff f962 	bl	800118c <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ec8:	f000 fadc 	bl	8002484 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ecc:	f000 fb2a 	bl	8002524 <MX_TIM2_Init>
  MX_TIM6_Init();
 8001ed0:	f000 fb9c 	bl	800260c <MX_TIM6_Init>
  MX_TIM7_Init();
 8001ed4:	f000 fbd0 	bl	8002678 <MX_TIM7_Init>
  MX_I2C1_Init();
 8001ed8:	f7ff f9f8 	bl	80012cc <MX_I2C1_Init>

  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001edc:	2104      	movs	r1, #4
 8001ede:	486a      	ldr	r0, [pc, #424]	@ (8002088 <main+0x1d0>)
 8001ee0:	f002 fc0e 	bl	8004700 <HAL_TIM_PWM_Start>

  LCD_Init(2);
 8001ee4:	2002      	movs	r0, #2
 8001ee6:	f7fe ff49 	bl	8000d7c <LCD_Init>
  LCD_Clear();
 8001eea:	f7fe ffcb 	bl	8000e84 <LCD_Clear>

  HAL_TIM_Base_Start(&htim1);
 8001eee:	4867      	ldr	r0, [pc, #412]	@ (800208c <main+0x1d4>)
 8001ef0:	f002 faa6 	bl	8004440 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2102      	movs	r1, #2
 8001ef8:	4865      	ldr	r0, [pc, #404]	@ (8002090 <main+0x1d8>)
 8001efa:	f001 f819 	bl	8002f30 <HAL_GPIO_WritePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(TurnOff_On %2 == 1){
 8001efe:	4b65      	ldr	r3, [pc, #404]	@ (8002094 <main+0x1dc>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	f000 80a6 	beq.w	800205a <main+0x1a2>

		  // Senzor pocinje mjeriti - pocetak naredbi za senzor

		  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001f0e:	2201      	movs	r2, #1
 8001f10:	2102      	movs	r1, #2
 8001f12:	485f      	ldr	r0, [pc, #380]	@ (8002090 <main+0x1d8>)
 8001f14:	f001 f80c 	bl	8002f30 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8001f18:	4b5c      	ldr	r3, [pc, #368]	@ (800208c <main+0x1d4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	625a      	str	r2, [r3, #36]	@ 0x24
		  while (__HAL_TIM_GET_COUNTER (&htim1) < 10);  // wait for 10 us
 8001f20:	bf00      	nop
 8001f22:	4b5a      	ldr	r3, [pc, #360]	@ (800208c <main+0x1d4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f28:	2b09      	cmp	r3, #9
 8001f2a:	d9fa      	bls.n	8001f22 <main+0x6a>
		  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2102      	movs	r1, #2
 8001f30:	4857      	ldr	r0, [pc, #348]	@ (8002090 <main+0x1d8>)
 8001f32:	f000 fffd 	bl	8002f30 <HAL_GPIO_WritePin>

		  pMillis = HAL_GetTick(); // used this to avoid infinite while loop  (for timeout)
 8001f36:	f000 fd0d 	bl	8002954 <HAL_GetTick>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4a56      	ldr	r2, [pc, #344]	@ (8002098 <main+0x1e0>)
 8001f3e:	6013      	str	r3, [r2, #0]
		  // wait for the echo pin to go high
		  while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8001f40:	bf00      	nop
 8001f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f46:	4855      	ldr	r0, [pc, #340]	@ (800209c <main+0x1e4>)
 8001f48:	f000 ffda 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d108      	bne.n	8001f64 <main+0xac>
 8001f52:	4b51      	ldr	r3, [pc, #324]	@ (8002098 <main+0x1e0>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f103 040a 	add.w	r4, r3, #10
 8001f5a:	f000 fcfb 	bl	8002954 <HAL_GetTick>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	429c      	cmp	r4, r3
 8001f62:	d8ee      	bhi.n	8001f42 <main+0x8a>
		  Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001f64:	4b49      	ldr	r3, [pc, #292]	@ (800208c <main+0x1d4>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f6a:	4a4d      	ldr	r2, [pc, #308]	@ (80020a0 <main+0x1e8>)
 8001f6c:	6013      	str	r3, [r2, #0]

		  pMillis = HAL_GetTick(); // used this to avoid infinite while loop (for timeout)
 8001f6e:	f000 fcf1 	bl	8002954 <HAL_GetTick>
 8001f72:	4603      	mov	r3, r0
 8001f74:	4a48      	ldr	r2, [pc, #288]	@ (8002098 <main+0x1e0>)
 8001f76:	6013      	str	r3, [r2, #0]
		  // wait for the echo pin to go low
		  while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001f78:	bf00      	nop
 8001f7a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f7e:	4847      	ldr	r0, [pc, #284]	@ (800209c <main+0x1e4>)
 8001f80:	f000 ffbe 	bl	8002f00 <HAL_GPIO_ReadPin>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d008      	beq.n	8001f9c <main+0xe4>
 8001f8a:	4b43      	ldr	r3, [pc, #268]	@ (8002098 <main+0x1e0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f103 0432 	add.w	r4, r3, #50	@ 0x32
 8001f92:	f000 fcdf 	bl	8002954 <HAL_GetTick>
 8001f96:	4603      	mov	r3, r0
 8001f98:	429c      	cmp	r4, r3
 8001f9a:	d8ee      	bhi.n	8001f7a <main+0xc2>
		  Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8001f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800208c <main+0x1d4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa2:	4a40      	ldr	r2, [pc, #256]	@ (80020a4 <main+0x1ec>)
 8001fa4:	6013      	str	r3, [r2, #0]

		  Distance = (Value2-Value1)* 0.034/2;
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80020a4 <main+0x1ec>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	4b3d      	ldr	r3, [pc, #244]	@ (80020a0 <main+0x1e8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7fe fabf 	bl	8000534 <__aeabi_ui2d>
 8001fb6:	a332      	add	r3, pc, #200	@ (adr r3, 8002080 <main+0x1c8>)
 8001fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbc:	f7fe fb34 	bl	8000628 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001fd0:	f7fe fc54 	bl	800087c <__aeabi_ddiv>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4610      	mov	r0, r2
 8001fda:	4619      	mov	r1, r3
 8001fdc:	f7fe fd36 	bl	8000a4c <__aeabi_d2uiz>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	4b30      	ldr	r3, [pc, #192]	@ (80020a8 <main+0x1f0>)
 8001fe6:	801a      	strh	r2, [r3, #0]
		  HAL_Delay(50);
 8001fe8:	2032      	movs	r0, #50	@ 0x32
 8001fea:	f000 fcbf 	bl	800296c <HAL_Delay>

		  // Kraj naredbi za senzor

		  LCD_Clear();
 8001fee:	f7fe ff49 	bl	8000e84 <LCD_Clear>
		  if(NumUdaljenost == 0 && StupUdaljenost == 0){
 8001ff2:	4b2e      	ldr	r3, [pc, #184]	@ (80020ac <main+0x1f4>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d115      	bne.n	8002026 <main+0x16e>
 8001ffa:	4b2d      	ldr	r3, [pc, #180]	@ (80020b0 <main+0x1f8>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d111      	bne.n	8002026 <main+0x16e>
			  LCD_SetCursor(0,0);
 8002002:	2100      	movs	r1, #0
 8002004:	2000      	movs	r0, #0
 8002006:	f7fe ff69 	bl	8000edc <LCD_SetCursor>
			  LCD_PrintStr("Senzor upaljen");
 800200a:	482a      	ldr	r0, [pc, #168]	@ (80020b4 <main+0x1fc>)
 800200c:	f7fe ffce 	bl	8000fac <LCD_PrintStr>
			  LCD_SetCursor(0,1);
 8002010:	2101      	movs	r1, #1
 8002012:	2000      	movs	r0, #0
 8002014:	f7fe ff62 	bl	8000edc <LCD_SetCursor>
			  LCD_PrintStr("Izaberite mod");
 8002018:	4827      	ldr	r0, [pc, #156]	@ (80020b8 <main+0x200>)
 800201a:	f7fe ffc7 	bl	8000fac <LCD_PrintStr>
			  HAL_Delay(200);
 800201e:	20c8      	movs	r0, #200	@ 0xc8
 8002020:	f000 fca4 	bl	800296c <HAL_Delay>
 8002024:	e02b      	b.n	800207e <main+0x1c6>
		  }
		  else if(NumUdaljenost < StupUdaljenost){
 8002026:	4b21      	ldr	r3, [pc, #132]	@ (80020ac <main+0x1f4>)
 8002028:	781a      	ldrb	r2, [r3, #0]
 800202a:	4b21      	ldr	r3, [pc, #132]	@ (80020b0 <main+0x1f8>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	429a      	cmp	r2, r3
 8002030:	d202      	bcs.n	8002038 <main+0x180>
			  signalizacijaBar();
 8002032:	f7ff fb21 	bl	8001678 <signalizacijaBar>
 8002036:	e762      	b.n	8001efe <main+0x46>

		  }
		  else if(NumUdaljenost > StupUdaljenost){
 8002038:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <main+0x1f4>)
 800203a:	781a      	ldrb	r2, [r3, #0]
 800203c:	4b1c      	ldr	r3, [pc, #112]	@ (80020b0 <main+0x1f8>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	429a      	cmp	r2, r3
 8002042:	f67f af5c 	bls.w	8001efe <main+0x46>
			  sprintf(strUdaljenost,"%d cm",Distance);
 8002046:	4b18      	ldr	r3, [pc, #96]	@ (80020a8 <main+0x1f0>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	461a      	mov	r2, r3
 800204c:	491b      	ldr	r1, [pc, #108]	@ (80020bc <main+0x204>)
 800204e:	481c      	ldr	r0, [pc, #112]	@ (80020c0 <main+0x208>)
 8002050:	f003 fa6c 	bl	800552c <siprintf>
			  signalizacijaNum();
 8002054:	f7ff faaa 	bl	80015ac <signalizacijaNum>
 8002058:	e751      	b.n	8001efe <main+0x46>
		  }
	  }
	  else{
		  LCD_Clear();
 800205a:	f7fe ff13 	bl	8000e84 <LCD_Clear>
		  LCD_SetCursor(0,0);
 800205e:	2100      	movs	r1, #0
 8002060:	2000      	movs	r0, #0
 8002062:	f7fe ff3b 	bl	8000edc <LCD_SetCursor>
		  LCD_PrintStr("Upalite senzor!");
 8002066:	4817      	ldr	r0, [pc, #92]	@ (80020c4 <main+0x20c>)
 8002068:	f7fe ffa0 	bl	8000fac <LCD_PrintStr>
		  NumUdaljenost = 0;
 800206c:	4b0f      	ldr	r3, [pc, #60]	@ (80020ac <main+0x1f4>)
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]
		  StupUdaljenost = 0;
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <main+0x1f8>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(200);
 8002078:	20c8      	movs	r0, #200	@ 0xc8
 800207a:	f000 fc77 	bl	800296c <HAL_Delay>
	  if(TurnOff_On %2 == 1){
 800207e:	e73e      	b.n	8001efe <main+0x46>
 8002080:	b020c49c 	.word	0xb020c49c
 8002084:	3fa16872 	.word	0x3fa16872
 8002088:	2000015c 	.word	0x2000015c
 800208c:	20000114 	.word	0x20000114
 8002090:	40020400 	.word	0x40020400
 8002094:	200000e4 	.word	0x200000e4
 8002098:	200000ec 	.word	0x200000ec
 800209c:	40020000 	.word	0x40020000
 80020a0:	200000f0 	.word	0x200000f0
 80020a4:	200000f4 	.word	0x200000f4
 80020a8:	200000f8 	.word	0x200000f8
 80020ac:	200000e5 	.word	0x200000e5
 80020b0:	200000e6 	.word	0x200000e6
 80020b4:	08005ed0 	.word	0x08005ed0
 80020b8:	08005ee0 	.word	0x08005ee0
 80020bc:	08005ef0 	.word	0x08005ef0
 80020c0:	200000fc 	.word	0x200000fc
 80020c4:	08005ef8 	.word	0x08005ef8

080020c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b094      	sub	sp, #80	@ 0x50
 80020cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ce:	f107 031c 	add.w	r3, r7, #28
 80020d2:	2234      	movs	r2, #52	@ 0x34
 80020d4:	2100      	movs	r1, #0
 80020d6:	4618      	mov	r0, r3
 80020d8:	f003 fa48 	bl	800556c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020dc:	f107 0308 	add.w	r3, r7, #8
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]
 80020e8:	60da      	str	r2, [r3, #12]
 80020ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
 80020f0:	4b29      	ldr	r3, [pc, #164]	@ (8002198 <SystemClock_Config+0xd0>)
 80020f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f4:	4a28      	ldr	r2, [pc, #160]	@ (8002198 <SystemClock_Config+0xd0>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fc:	4b26      	ldr	r3, [pc, #152]	@ (8002198 <SystemClock_Config+0xd0>)
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8002108:	2300      	movs	r3, #0
 800210a:	603b      	str	r3, [r7, #0]
 800210c:	4b23      	ldr	r3, [pc, #140]	@ (800219c <SystemClock_Config+0xd4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002114:	4a21      	ldr	r2, [pc, #132]	@ (800219c <SystemClock_Config+0xd4>)
 8002116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <SystemClock_Config+0xd4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002128:	2302      	movs	r3, #2
 800212a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800212c:	2301      	movs	r3, #1
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002130:	2310      	movs	r3, #16
 8002132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002134:	2302      	movs	r3, #2
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002138:	2300      	movs	r3, #0
 800213a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800213c:	2308      	movs	r3, #8
 800213e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8002140:	2348      	movs	r3, #72	@ 0x48
 8002142:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002144:	2302      	movs	r3, #2
 8002146:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002148:	2302      	movs	r3, #2
 800214a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800214c:	2302      	movs	r3, #2
 800214e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4618      	mov	r0, r3
 8002156:	f001 fe85 	bl	8003e64 <HAL_RCC_OscConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8002160:	f000 f8c6 	bl	80022f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002164:	230f      	movs	r3, #15
 8002166:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002168:	2302      	movs	r3, #2
 800216a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800216c:	2300      	movs	r3, #0
 800216e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002174:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800217a:	f107 0308 	add.w	r3, r7, #8
 800217e:	2102      	movs	r1, #2
 8002180:	4618      	mov	r0, r3
 8002182:	f001 fbbf 	bl	8003904 <HAL_RCC_ClockConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800218c:	f000 f8b0 	bl	80022f0 <Error_Handler>
  }
}
 8002190:	bf00      	nop
 8002192:	3750      	adds	r7, #80	@ 0x50
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	40007000 	.word	0x40007000

080021a0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	80fb      	strh	r3, [r7, #6]
	global_gpio_pin = GPIO_Pin;
 80021aa:	4a0f      	ldr	r2, [pc, #60]	@ (80021e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	8013      	strh	r3, [r2, #0]
	if(global_gpio_pin == GPIO_PIN_13 || global_gpio_pin == GPIO_PIN_14 || global_gpio_pin == GPIO_PIN_15){
 80021b0:	4b0d      	ldr	r3, [pc, #52]	@ (80021e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80021b2:	881b      	ldrh	r3, [r3, #0]
 80021b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021b8:	d009      	beq.n	80021ce <HAL_GPIO_EXTI_Callback+0x2e>
 80021ba:	4b0b      	ldr	r3, [pc, #44]	@ (80021e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80021c2:	d004      	beq.n	80021ce <HAL_GPIO_EXTI_Callback+0x2e>
 80021c4:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <HAL_GPIO_EXTI_Callback+0x48>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80021cc:	d107      	bne.n	80021de <HAL_GPIO_EXTI_Callback+0x3e>
		__HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 80021ce:	4b07      	ldr	r3, [pc, #28]	@ (80021ec <HAL_GPIO_EXTI_Callback+0x4c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f06f 0201 	mvn.w	r2, #1
 80021d6:	611a      	str	r2, [r3, #16]
		HAL_TIM_Base_Start_IT(&htim7);
 80021d8:	4804      	ldr	r0, [pc, #16]	@ (80021ec <HAL_GPIO_EXTI_Callback+0x4c>)
 80021da:	f002 f999 	bl	8004510 <HAL_TIM_Base_Start_IT>
	}
}
 80021de:	bf00      	nop
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	200000e8 	.word	0x200000e8
 80021ec:	200001ec 	.word	0x200001ec

080021f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a30      	ldr	r2, [pc, #192]	@ (80022c0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d11e      	bne.n	8002240 <HAL_TIM_PeriodElapsedCallback+0x50>
		if(Distance<=7){
 8002202:	4b30      	ldr	r3, [pc, #192]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002204:	881b      	ldrh	r3, [r3, #0]
 8002206:	2b07      	cmp	r3, #7
 8002208:	d804      	bhi.n	8002214 <HAL_TIM_PeriodElapsedCallback+0x24>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800220a:	2140      	movs	r1, #64	@ 0x40
 800220c:	482e      	ldr	r0, [pc, #184]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800220e:	f000 fea8 	bl	8002f62 <HAL_GPIO_TogglePin>
 8002212:	e015      	b.n	8002240 <HAL_TIM_PeriodElapsedCallback+0x50>
		}
		else if(Distance<15){
 8002214:	4b2b      	ldr	r3, [pc, #172]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002216:	881b      	ldrh	r3, [r3, #0]
 8002218:	2b0e      	cmp	r3, #14
 800221a:	d804      	bhi.n	8002226 <HAL_TIM_PeriodElapsedCallback+0x36>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 800221c:	2180      	movs	r1, #128	@ 0x80
 800221e:	482b      	ldr	r0, [pc, #172]	@ (80022cc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002220:	f000 fe9f 	bl	8002f62 <HAL_GPIO_TogglePin>
 8002224:	e00c      	b.n	8002240 <HAL_TIM_PeriodElapsedCallback+0x50>
		}
		else if(Distance<30){
 8002226:	4b27      	ldr	r3, [pc, #156]	@ (80022c4 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	2b1d      	cmp	r3, #29
 800222c:	d805      	bhi.n	800223a <HAL_TIM_PeriodElapsedCallback+0x4a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 800222e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002232:	4827      	ldr	r0, [pc, #156]	@ (80022d0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002234:	f000 fe95 	bl	8002f62 <HAL_GPIO_TogglePin>
 8002238:	e002      	b.n	8002240 <HAL_TIM_PeriodElapsedCallback+0x50>
		}
		else{
			HAL_TIM_Base_Stop_IT(&htim6);
 800223a:	4826      	ldr	r0, [pc, #152]	@ (80022d4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800223c:	f002 f9d8 	bl	80045f0 <HAL_TIM_Base_Stop_IT>
		}
	}

	if(htim->Instance == TIM7){
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a24      	ldr	r2, [pc, #144]	@ (80022d8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d135      	bne.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0xc6>
		if(HAL_GPIO_ReadPin(GPIOB, global_gpio_pin)==0){
 800224a:	4b24      	ldr	r3, [pc, #144]	@ (80022dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	4619      	mov	r1, r3
 8002250:	481d      	ldr	r0, [pc, #116]	@ (80022c8 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002252:	f000 fe55 	bl	8002f00 <HAL_GPIO_ReadPin>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d12c      	bne.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0xc6>
			if(global_gpio_pin == GPIO_PIN_13){
 800225c:	4b1f      	ldr	r3, [pc, #124]	@ (80022dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 800225e:	881b      	ldrh	r3, [r3, #0]
 8002260:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002264:	d106      	bne.n	8002274 <HAL_TIM_PeriodElapsedCallback+0x84>
				TurnOff_On++;
 8002266:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	3301      	adds	r3, #1
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4b1c      	ldr	r3, [pc, #112]	@ (80022e0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002270:	701a      	strb	r2, [r3, #0]
			else{
				HAL_TIM_Base_Stop_IT(&htim7);
			}
		}
	}
}
 8002272:	e020      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0xc6>
			else if(global_gpio_pin == GPIO_PIN_14){
 8002274:	4b19      	ldr	r3, [pc, #100]	@ (80022dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800227c:	d109      	bne.n	8002292 <HAL_TIM_PeriodElapsedCallback+0xa2>
				NumUdaljenost++;
 800227e:	4b19      	ldr	r3, [pc, #100]	@ (80022e4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	3301      	adds	r3, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002288:	701a      	strb	r2, [r3, #0]
				StupUdaljenost = 0;
 800228a:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800228c:	2200      	movs	r2, #0
 800228e:	701a      	strb	r2, [r3, #0]
}
 8002290:	e011      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0xc6>
			else if(global_gpio_pin == GPIO_PIN_15){
 8002292:	4b12      	ldr	r3, [pc, #72]	@ (80022dc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002294:	881b      	ldrh	r3, [r3, #0]
 8002296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800229a:	d109      	bne.n	80022b0 <HAL_TIM_PeriodElapsedCallback+0xc0>
				StupUdaljenost++;
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800229e:	781b      	ldrb	r3, [r3, #0]
 80022a0:	3301      	adds	r3, #1
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b10      	ldr	r3, [pc, #64]	@ (80022e8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80022a6:	701a      	strb	r2, [r3, #0]
				NumUdaljenost = 0;
 80022a8:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
}
 80022ae:	e002      	b.n	80022b6 <HAL_TIM_PeriodElapsedCallback+0xc6>
				HAL_TIM_Base_Stop_IT(&htim7);
 80022b0:	480e      	ldr	r0, [pc, #56]	@ (80022ec <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80022b2:	f002 f99d 	bl	80045f0 <HAL_TIM_Base_Stop_IT>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40001000 	.word	0x40001000
 80022c4:	200000f8 	.word	0x200000f8
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	200001a4 	.word	0x200001a4
 80022d8:	40001400 	.word	0x40001400
 80022dc:	200000e8 	.word	0x200000e8
 80022e0:	200000e4 	.word	0x200000e4
 80022e4:	200000e5 	.word	0x200000e5
 80022e8:	200000e6 	.word	0x200000e6
 80022ec:	200001ec 	.word	0x200001ec

080022f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022f4:	b672      	cpsid	i
}
 80022f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <Error_Handler+0x8>

080022fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	607b      	str	r3, [r7, #4]
 8002306:	4b10      	ldr	r3, [pc, #64]	@ (8002348 <HAL_MspInit+0x4c>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	4a0f      	ldr	r2, [pc, #60]	@ (8002348 <HAL_MspInit+0x4c>)
 800230c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002310:	6453      	str	r3, [r2, #68]	@ 0x44
 8002312:	4b0d      	ldr	r3, [pc, #52]	@ (8002348 <HAL_MspInit+0x4c>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	603b      	str	r3, [r7, #0]
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_MspInit+0x4c>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002326:	4a08      	ldr	r2, [pc, #32]	@ (8002348 <HAL_MspInit+0x4c>)
 8002328:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800232c:	6413      	str	r3, [r2, #64]	@ 0x40
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <HAL_MspInit+0x4c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002336:	603b      	str	r3, [r7, #0]
 8002338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023800 	.word	0x40023800

0800234c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <NMI_Handler+0x4>

08002354 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <HardFault_Handler+0x4>

0800235c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <MemManage_Handler+0x4>

08002364 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002368:	bf00      	nop
 800236a:	e7fd      	b.n	8002368 <BusFault_Handler+0x4>

0800236c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <UsageFault_Handler+0x4>

08002374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002378:	bf00      	nop
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002386:	bf00      	nop
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a2:	f000 fac3 	bl	800292c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}

080023aa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80023ae:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80023b2:	f000 fdf1 	bl	8002f98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80023b6:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80023ba:	f000 fded 	bl	8002f98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80023be:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80023c2:	f000 fde9 	bl	8002f98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80023d0:	4802      	ldr	r0, [pc, #8]	@ (80023dc <TIM6_DAC_IRQHandler+0x10>)
 80023d2:	f002 fa5d 	bl	8004890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	200001a4 	.word	0x200001a4

080023e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80023e4:	4802      	ldr	r0, [pc, #8]	@ (80023f0 <TIM7_IRQHandler+0x10>)
 80023e6:	f002 fa53 	bl	8004890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80023ea:	bf00      	nop
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	200001ec 	.word	0x200001ec

080023f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b086      	sub	sp, #24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023fc:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <_sbrk+0x5c>)
 80023fe:	4b15      	ldr	r3, [pc, #84]	@ (8002454 <_sbrk+0x60>)
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <_sbrk+0x64>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d102      	bne.n	8002416 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002410:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <_sbrk+0x64>)
 8002412:	4a12      	ldr	r2, [pc, #72]	@ (800245c <_sbrk+0x68>)
 8002414:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <_sbrk+0x64>)
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4413      	add	r3, r2
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	429a      	cmp	r2, r3
 8002422:	d207      	bcs.n	8002434 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002424:	f003 f8aa 	bl	800557c <__errno>
 8002428:	4603      	mov	r3, r0
 800242a:	220c      	movs	r2, #12
 800242c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800242e:	f04f 33ff 	mov.w	r3, #4294967295
 8002432:	e009      	b.n	8002448 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002434:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800243a:	4b07      	ldr	r3, [pc, #28]	@ (8002458 <_sbrk+0x64>)
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	4a05      	ldr	r2, [pc, #20]	@ (8002458 <_sbrk+0x64>)
 8002444:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002446:	68fb      	ldr	r3, [r7, #12]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3718      	adds	r7, #24
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20020000 	.word	0x20020000
 8002454:	00000400 	.word	0x00000400
 8002458:	20000110 	.word	0x20000110
 800245c:	20000380 	.word	0x20000380

08002460 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <SystemInit+0x20>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246a:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <SystemInit+0x20>)
 800246c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002470:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002474:	bf00      	nop
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800248a:	f107 0308 	add.w	r3, r7, #8
 800248e:	2200      	movs	r2, #0
 8002490:	601a      	str	r2, [r3, #0]
 8002492:	605a      	str	r2, [r3, #4]
 8002494:	609a      	str	r2, [r3, #8]
 8002496:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002498:	463b      	mov	r3, r7
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80024a0:	4b1e      	ldr	r3, [pc, #120]	@ (800251c <MX_TIM1_Init+0x98>)
 80024a2:	4a1f      	ldr	r2, [pc, #124]	@ (8002520 <MX_TIM1_Init+0x9c>)
 80024a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80024a6:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <MX_TIM1_Init+0x98>)
 80024a8:	2247      	movs	r2, #71	@ 0x47
 80024aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <MX_TIM1_Init+0x98>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024b2:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <MX_TIM1_Init+0x98>)
 80024b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024ba:	4b18      	ldr	r3, [pc, #96]	@ (800251c <MX_TIM1_Init+0x98>)
 80024bc:	2200      	movs	r2, #0
 80024be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024c0:	4b16      	ldr	r3, [pc, #88]	@ (800251c <MX_TIM1_Init+0x98>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024c6:	4b15      	ldr	r3, [pc, #84]	@ (800251c <MX_TIM1_Init+0x98>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024cc:	4813      	ldr	r0, [pc, #76]	@ (800251c <MX_TIM1_Init+0x98>)
 80024ce:	f001 ff67 	bl	80043a0 <HAL_TIM_Base_Init>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80024d8:	f7ff ff0a 	bl	80022f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80024e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	4619      	mov	r1, r3
 80024e8:	480c      	ldr	r0, [pc, #48]	@ (800251c <MX_TIM1_Init+0x98>)
 80024ea:	f002 fb83 	bl	8004bf4 <HAL_TIM_ConfigClockSource>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024f4:	f7ff fefc 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f8:	2300      	movs	r3, #0
 80024fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002500:	463b      	mov	r3, r7
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	@ (800251c <MX_TIM1_Init+0x98>)
 8002506:	f002 ff81 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002510:	f7ff feee 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002514:	bf00      	nop
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000114 	.word	0x20000114
 8002520:	40010000 	.word	0x40010000

08002524 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b08e      	sub	sp, #56	@ 0x38
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800252a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800252e:	2200      	movs	r2, #0
 8002530:	601a      	str	r2, [r3, #0]
 8002532:	605a      	str	r2, [r3, #4]
 8002534:	609a      	str	r2, [r3, #8]
 8002536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002538:	f107 0320 	add.w	r3, r7, #32
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002542:	1d3b      	adds	r3, r7, #4
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
 8002548:	605a      	str	r2, [r3, #4]
 800254a:	609a      	str	r2, [r3, #8]
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	611a      	str	r2, [r3, #16]
 8002550:	615a      	str	r2, [r3, #20]
 8002552:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002554:	4b2c      	ldr	r3, [pc, #176]	@ (8002608 <MX_TIM2_Init+0xe4>)
 8002556:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800255a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 800255c:	4b2a      	ldr	r3, [pc, #168]	@ (8002608 <MX_TIM2_Init+0xe4>)
 800255e:	227f      	movs	r2, #127	@ 0x7f
 8002560:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002562:	4b29      	ldr	r3, [pc, #164]	@ (8002608 <MX_TIM2_Init+0xe4>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20;
 8002568:	4b27      	ldr	r3, [pc, #156]	@ (8002608 <MX_TIM2_Init+0xe4>)
 800256a:	2214      	movs	r2, #20
 800256c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800256e:	4b26      	ldr	r3, [pc, #152]	@ (8002608 <MX_TIM2_Init+0xe4>)
 8002570:	2200      	movs	r2, #0
 8002572:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002574:	4b24      	ldr	r3, [pc, #144]	@ (8002608 <MX_TIM2_Init+0xe4>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800257a:	4823      	ldr	r0, [pc, #140]	@ (8002608 <MX_TIM2_Init+0xe4>)
 800257c:	f001 ff10 	bl	80043a0 <HAL_TIM_Base_Init>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002586:	f7ff feb3 	bl	80022f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800258a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800258e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002590:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002594:	4619      	mov	r1, r3
 8002596:	481c      	ldr	r0, [pc, #112]	@ (8002608 <MX_TIM2_Init+0xe4>)
 8002598:	f002 fb2c 	bl	8004bf4 <HAL_TIM_ConfigClockSource>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80025a2:	f7ff fea5 	bl	80022f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80025a6:	4818      	ldr	r0, [pc, #96]	@ (8002608 <MX_TIM2_Init+0xe4>)
 80025a8:	f002 f851 	bl	800464e <HAL_TIM_PWM_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80025b2:	f7ff fe9d 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80025be:	f107 0320 	add.w	r3, r7, #32
 80025c2:	4619      	mov	r1, r3
 80025c4:	4810      	ldr	r0, [pc, #64]	@ (8002608 <MX_TIM2_Init+0xe4>)
 80025c6:	f002 ff21 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80025d0:	f7ff fe8e 	bl	80022f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d4:	2360      	movs	r3, #96	@ 0x60
 80025d6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025d8:	2300      	movs	r3, #0
 80025da:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025dc:	2300      	movs	r3, #0
 80025de:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025e4:	1d3b      	adds	r3, r7, #4
 80025e6:	2204      	movs	r2, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4807      	ldr	r0, [pc, #28]	@ (8002608 <MX_TIM2_Init+0xe4>)
 80025ec:	f002 fa40 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80025f6:	f7ff fe7b 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80025fa:	4803      	ldr	r0, [pc, #12]	@ (8002608 <MX_TIM2_Init+0xe4>)
 80025fc:	f000 f8e2 	bl	80027c4 <HAL_TIM_MspPostInit>

}
 8002600:	bf00      	nop
 8002602:	3738      	adds	r7, #56	@ 0x38
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	2000015c 	.word	0x2000015c

0800260c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002612:	463b      	mov	r3, r7
 8002614:	2200      	movs	r2, #0
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800261a:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <MX_TIM6_Init+0x64>)
 800261c:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <MX_TIM6_Init+0x68>)
 800261e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 15999;
 8002620:	4b13      	ldr	r3, [pc, #76]	@ (8002670 <MX_TIM6_Init+0x64>)
 8002622:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002626:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002628:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <MX_TIM6_Init+0x64>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 499;
 800262e:	4b10      	ldr	r3, [pc, #64]	@ (8002670 <MX_TIM6_Init+0x64>)
 8002630:	f240 12f3 	movw	r2, #499	@ 0x1f3
 8002634:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002636:	4b0e      	ldr	r3, [pc, #56]	@ (8002670 <MX_TIM6_Init+0x64>)
 8002638:	2200      	movs	r2, #0
 800263a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800263c:	480c      	ldr	r0, [pc, #48]	@ (8002670 <MX_TIM6_Init+0x64>)
 800263e:	f001 feaf 	bl	80043a0 <HAL_TIM_Base_Init>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002648:	f7ff fe52 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800264c:	2300      	movs	r3, #0
 800264e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002654:	463b      	mov	r3, r7
 8002656:	4619      	mov	r1, r3
 8002658:	4805      	ldr	r0, [pc, #20]	@ (8002670 <MX_TIM6_Init+0x64>)
 800265a:	f002 fed7 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002664:	f7ff fe44 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002668:	bf00      	nop
 800266a:	3708      	adds	r7, #8
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	200001a4 	.word	0x200001a4
 8002674:	40001000 	.word	0x40001000

08002678 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800267e:	463b      	mov	r3, r7
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
 8002684:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <MX_TIM7_Init+0x64>)
 8002688:	4a15      	ldr	r2, [pc, #84]	@ (80026e0 <MX_TIM7_Init+0x68>)
 800268a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 15999;
 800268c:	4b13      	ldr	r3, [pc, #76]	@ (80026dc <MX_TIM7_Init+0x64>)
 800268e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8002692:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002694:	4b11      	ldr	r3, [pc, #68]	@ (80026dc <MX_TIM7_Init+0x64>)
 8002696:	2200      	movs	r2, #0
 8002698:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9;
 800269a:	4b10      	ldr	r3, [pc, #64]	@ (80026dc <MX_TIM7_Init+0x64>)
 800269c:	2209      	movs	r2, #9
 800269e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <MX_TIM7_Init+0x64>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80026a6:	480d      	ldr	r0, [pc, #52]	@ (80026dc <MX_TIM7_Init+0x64>)
 80026a8:	f001 fe7a 	bl	80043a0 <HAL_TIM_Base_Init>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80026b2:	f7ff fe1d 	bl	80022f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026b6:	2300      	movs	r3, #0
 80026b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026ba:	2300      	movs	r3, #0
 80026bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80026be:	463b      	mov	r3, r7
 80026c0:	4619      	mov	r1, r3
 80026c2:	4806      	ldr	r0, [pc, #24]	@ (80026dc <MX_TIM7_Init+0x64>)
 80026c4:	f002 fea2 	bl	800540c <HAL_TIMEx_MasterConfigSynchronization>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80026ce:	f7ff fe0f 	bl	80022f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200001ec 	.word	0x200001ec
 80026e0:	40001400 	.word	0x40001400

080026e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b086      	sub	sp, #24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a30      	ldr	r2, [pc, #192]	@ (80027b4 <HAL_TIM_Base_MspInit+0xd0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10e      	bne.n	8002714 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	4b2f      	ldr	r3, [pc, #188]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 80026fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fe:	4a2e      	ldr	r2, [pc, #184]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6453      	str	r3, [r2, #68]	@ 0x44
 8002706:	4b2c      	ldr	r3, [pc, #176]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002712:	e04a      	b.n	80027aa <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM2)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271c:	d10e      	bne.n	800273c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]
 8002722:	4b25      	ldr	r3, [pc, #148]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	4a24      	ldr	r2, [pc, #144]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002728:	f043 0301 	orr.w	r3, r3, #1
 800272c:	6413      	str	r3, [r2, #64]	@ 0x40
 800272e:	4b22      	ldr	r3, [pc, #136]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	693b      	ldr	r3, [r7, #16]
}
 800273a:	e036      	b.n	80027aa <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM6)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a1e      	ldr	r2, [pc, #120]	@ (80027bc <HAL_TIM_Base_MspInit+0xd8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d116      	bne.n	8002774 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	4b1b      	ldr	r3, [pc, #108]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 800274c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274e:	4a1a      	ldr	r2, [pc, #104]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002750:	f043 0310 	orr.w	r3, r3, #16
 8002754:	6413      	str	r3, [r2, #64]	@ 0x40
 8002756:	4b18      	ldr	r3, [pc, #96]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	60fb      	str	r3, [r7, #12]
 8002760:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 3, 0);
 8002762:	2200      	movs	r2, #0
 8002764:	2103      	movs	r1, #3
 8002766:	2036      	movs	r0, #54	@ 0x36
 8002768:	f000 f9ff 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800276c:	2036      	movs	r0, #54	@ 0x36
 800276e:	f000 fa18 	bl	8002ba2 <HAL_NVIC_EnableIRQ>
}
 8002772:	e01a      	b.n	80027aa <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a11      	ldr	r2, [pc, #68]	@ (80027c0 <HAL_TIM_Base_MspInit+0xdc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d115      	bne.n	80027aa <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	4b0d      	ldr	r3, [pc, #52]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	4a0c      	ldr	r2, [pc, #48]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002788:	f043 0320 	orr.w	r3, r3, #32
 800278c:	6413      	str	r3, [r2, #64]	@ 0x40
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_TIM_Base_MspInit+0xd4>)
 8002790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002792:	f003 0320 	and.w	r3, r3, #32
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 800279a:	2200      	movs	r2, #0
 800279c:	2103      	movs	r1, #3
 800279e:	2037      	movs	r0, #55	@ 0x37
 80027a0:	f000 f9e3 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80027a4:	2037      	movs	r0, #55	@ 0x37
 80027a6:	f000 f9fc 	bl	8002ba2 <HAL_NVIC_EnableIRQ>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40010000 	.word	0x40010000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40001000 	.word	0x40001000
 80027c0:	40001400 	.word	0x40001400

080027c4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 030c 	add.w	r3, r7, #12
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027e4:	d11d      	bne.n	8002822 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	4b10      	ldr	r3, [pc, #64]	@ (800282c <HAL_TIM_MspPostInit+0x68>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	4a0f      	ldr	r2, [pc, #60]	@ (800282c <HAL_TIM_MspPostInit+0x68>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <HAL_TIM_MspPostInit+0x68>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027fa:	f003 0301 	and.w	r3, r3, #1
 80027fe:	60bb      	str	r3, [r7, #8]
 8002800:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002802:	2302      	movs	r3, #2
 8002804:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002806:	2302      	movs	r3, #2
 8002808:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002812:	2301      	movs	r3, #1
 8002814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	f107 030c 	add.w	r3, r7, #12
 800281a:	4619      	mov	r1, r3
 800281c:	4804      	ldr	r0, [pc, #16]	@ (8002830 <HAL_TIM_MspPostInit+0x6c>)
 800281e:	f000 f9db 	bl	8002bd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002822:	bf00      	nop
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000

08002834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800286c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002838:	f7ff fe12 	bl	8002460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800283c:	480c      	ldr	r0, [pc, #48]	@ (8002870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800283e:	490d      	ldr	r1, [pc, #52]	@ (8002874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002840:	4a0d      	ldr	r2, [pc, #52]	@ (8002878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002844:	e002      	b.n	800284c <LoopCopyDataInit>

08002846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284a:	3304      	adds	r3, #4

0800284c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800284c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800284e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002850:	d3f9      	bcc.n	8002846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002852:	4a0a      	ldr	r2, [pc, #40]	@ (800287c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002854:	4c0a      	ldr	r4, [pc, #40]	@ (8002880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002858:	e001      	b.n	800285e <LoopFillZerobss>

0800285a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800285c:	3204      	adds	r2, #4

0800285e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800285e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002860:	d3fb      	bcc.n	800285a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002862:	f002 fe91 	bl	8005588 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002866:	f7ff fb27 	bl	8001eb8 <main>
  bx  lr    
 800286a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800286c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002874:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002878:	08005f64 	.word	0x08005f64
  ldr r2, =_sbss
 800287c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002880:	20000380 	.word	0x20000380

08002884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002884:	e7fe      	b.n	8002884 <ADC_IRQHandler>
	...

08002888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800288c:	4b0e      	ldr	r3, [pc, #56]	@ (80028c8 <HAL_Init+0x40>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a0d      	ldr	r2, [pc, #52]	@ (80028c8 <HAL_Init+0x40>)
 8002892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_Init+0x40>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <HAL_Init+0x40>)
 800289e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028a4:	4b08      	ldr	r3, [pc, #32]	@ (80028c8 <HAL_Init+0x40>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a07      	ldr	r2, [pc, #28]	@ (80028c8 <HAL_Init+0x40>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028b0:	2003      	movs	r0, #3
 80028b2:	f000 f94f 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028b6:	200f      	movs	r0, #15
 80028b8:	f000 f808 	bl	80028cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028bc:	f7ff fd1e 	bl	80022fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00

080028cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028d4:	4b12      	ldr	r3, [pc, #72]	@ (8002920 <HAL_InitTick+0x54>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b12      	ldr	r3, [pc, #72]	@ (8002924 <HAL_InitTick+0x58>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	4619      	mov	r1, r3
 80028de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f967 	bl	8002bbe <HAL_SYSTICK_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e00e      	b.n	8002918 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2b0f      	cmp	r3, #15
 80028fe:	d80a      	bhi.n	8002916 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002900:	2200      	movs	r2, #0
 8002902:	6879      	ldr	r1, [r7, #4]
 8002904:	f04f 30ff 	mov.w	r0, #4294967295
 8002908:	f000 f92f 	bl	8002b6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800290c:	4a06      	ldr	r2, [pc, #24]	@ (8002928 <HAL_InitTick+0x5c>)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
}
 8002918:	4618      	mov	r0, r3
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	20000010 	.word	0x20000010
 8002924:	20000018 	.word	0x20000018
 8002928:	20000014 	.word	0x20000014

0800292c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002930:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_IncTick+0x20>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	461a      	mov	r2, r3
 8002936:	4b06      	ldr	r3, [pc, #24]	@ (8002950 <HAL_IncTick+0x24>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4413      	add	r3, r2
 800293c:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <HAL_IncTick+0x24>)
 800293e:	6013      	str	r3, [r2, #0]
}
 8002940:	bf00      	nop
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	20000018 	.word	0x20000018
 8002950:	20000234 	.word	0x20000234

08002954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  return uwTick;
 8002958:	4b03      	ldr	r3, [pc, #12]	@ (8002968 <HAL_GetTick+0x14>)
 800295a:	681b      	ldr	r3, [r3, #0]
}
 800295c:	4618      	mov	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	20000234 	.word	0x20000234

0800296c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff ffee 	bl	8002954 <HAL_GetTick>
 8002978:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002984:	d005      	beq.n	8002992 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002986:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <HAL_Delay+0x44>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	4413      	add	r3, r2
 8002990:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002992:	bf00      	nop
 8002994:	f7ff ffde 	bl	8002954 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d8f7      	bhi.n	8002994 <HAL_Delay+0x28>
  {
  }
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	20000018 	.word	0x20000018

080029b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	@ (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	@ (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4907      	ldr	r1, [pc, #28]	@ (8002a50 <__NVIC_EnableIRQ+0x38>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	@ (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	@ (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	@ 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	@ 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff8e 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	@ (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	@ (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff29 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b7c:	f7ff ff3e 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6978      	ldr	r0, [r7, #20]
 8002b88:	f7ff ff8e 	bl	8002aa8 <NVIC_EncodePriority>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b92:	4611      	mov	r1, r2
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff ff5d 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b9a:	bf00      	nop
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	4603      	mov	r3, r0
 8002baa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff ff31 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b082      	sub	sp, #8
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff ffa2 	bl	8002b10 <SysTick_Config>
 8002bcc:	4603      	mov	r3, r0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	@ 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e165      	b.n	8002ec0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c08:	693a      	ldr	r2, [r7, #16]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	f040 8154 	bne.w	8002eba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d005      	beq.n	8002c2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d130      	bne.n	8002c8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c30:	69fb      	ldr	r3, [r7, #28]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	2203      	movs	r2, #3
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	43db      	mvns	r3, r3
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	4013      	ands	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c60:	2201      	movs	r2, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 0201 	and.w	r2, r3, #1
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 0303 	and.w	r3, r3, #3
 8002c94:	2b03      	cmp	r3, #3
 8002c96:	d017      	beq.n	8002cc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	2203      	movs	r2, #3
 8002ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 0303 	and.w	r3, r3, #3
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d123      	bne.n	8002d1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	08da      	lsrs	r2, r3, #3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3208      	adds	r2, #8
 8002cdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	69ba      	ldr	r2, [r7, #24]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0307 	and.w	r3, r3, #7
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	08da      	lsrs	r2, r3, #3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3208      	adds	r2, #8
 8002d16:	69b9      	ldr	r1, [r7, #24]
 8002d18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	2203      	movs	r2, #3
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	69ba      	ldr	r2, [r7, #24]
 8002d30:	4013      	ands	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 0203 	and.w	r2, r3, #3
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fa02 f303 	lsl.w	r3, r2, r3
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 80ae 	beq.w	8002eba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b5d      	ldr	r3, [pc, #372]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	4a5c      	ldr	r2, [pc, #368]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002d68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d6e:	4b5a      	ldr	r3, [pc, #360]	@ (8002ed8 <HAL_GPIO_Init+0x300>)
 8002d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d7a:	4a58      	ldr	r2, [pc, #352]	@ (8002edc <HAL_GPIO_Init+0x304>)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	089b      	lsrs	r3, r3, #2
 8002d80:	3302      	adds	r3, #2
 8002d82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0303 	and.w	r3, r3, #3
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	220f      	movs	r2, #15
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	@ (8002ee0 <HAL_GPIO_Init+0x308>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d025      	beq.n	8002df2 <HAL_GPIO_Init+0x21a>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee4 <HAL_GPIO_Init+0x30c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d01f      	beq.n	8002dee <HAL_GPIO_Init+0x216>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4d      	ldr	r2, [pc, #308]	@ (8002ee8 <HAL_GPIO_Init+0x310>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d019      	beq.n	8002dea <HAL_GPIO_Init+0x212>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4c      	ldr	r2, [pc, #304]	@ (8002eec <HAL_GPIO_Init+0x314>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d013      	beq.n	8002de6 <HAL_GPIO_Init+0x20e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ef0 <HAL_GPIO_Init+0x318>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d00d      	beq.n	8002de2 <HAL_GPIO_Init+0x20a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4a      	ldr	r2, [pc, #296]	@ (8002ef4 <HAL_GPIO_Init+0x31c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d007      	beq.n	8002dde <HAL_GPIO_Init+0x206>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a49      	ldr	r2, [pc, #292]	@ (8002ef8 <HAL_GPIO_Init+0x320>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_GPIO_Init+0x202>
 8002dd6:	2306      	movs	r3, #6
 8002dd8:	e00c      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002dda:	2307      	movs	r3, #7
 8002ddc:	e00a      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002dde:	2305      	movs	r3, #5
 8002de0:	e008      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002de2:	2304      	movs	r3, #4
 8002de4:	e006      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002de6:	2303      	movs	r3, #3
 8002de8:	e004      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e002      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <HAL_GPIO_Init+0x21c>
 8002df2:	2300      	movs	r3, #0
 8002df4:	69fa      	ldr	r2, [r7, #28]
 8002df6:	f002 0203 	and.w	r2, r2, #3
 8002dfa:	0092      	lsls	r2, r2, #2
 8002dfc:	4093      	lsls	r3, r2
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e04:	4935      	ldr	r1, [pc, #212]	@ (8002edc <HAL_GPIO_Init+0x304>)
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	089b      	lsrs	r3, r3, #2
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e12:	4b3a      	ldr	r3, [pc, #232]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d003      	beq.n	8002e36 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e36:	4a31      	ldr	r2, [pc, #196]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e3c:	4b2f      	ldr	r3, [pc, #188]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e60:	4a26      	ldr	r2, [pc, #152]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e66:	4b25      	ldr	r3, [pc, #148]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	43db      	mvns	r3, r3
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	4013      	ands	r3, r2
 8002e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e8a:	4a1c      	ldr	r2, [pc, #112]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e90:	4b1a      	ldr	r3, [pc, #104]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	69ba      	ldr	r2, [r7, #24]
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eb4:	4a11      	ldr	r2, [pc, #68]	@ (8002efc <HAL_GPIO_Init+0x324>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2b0f      	cmp	r3, #15
 8002ec4:	f67f ae96 	bls.w	8002bf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	3724      	adds	r7, #36	@ 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40020000 	.word	0x40020000
 8002ee4:	40020400 	.word	0x40020400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	40020c00 	.word	0x40020c00
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40021400 	.word	0x40021400
 8002ef8:	40021800 	.word	0x40021800
 8002efc:	40013c00 	.word	0x40013c00

08002f00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	460b      	mov	r3, r1
 8002f0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	4013      	ands	r3, r2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d002      	beq.n	8002f1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	73fb      	strb	r3, [r7, #15]
 8002f1c:	e001      	b.n	8002f22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	807b      	strh	r3, [r7, #2]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f40:	787b      	ldrb	r3, [r7, #1]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f46:	887a      	ldrh	r2, [r7, #2]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f4c:	e003      	b.n	8002f56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f4e:	887b      	ldrh	r3, [r7, #2]
 8002f50:	041a      	lsls	r2, r3, #16
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	619a      	str	r2, [r3, #24]
}
 8002f56:	bf00      	nop
 8002f58:	370c      	adds	r7, #12
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f62:	b480      	push	{r7}
 8002f64:	b085      	sub	sp, #20
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f74:	887a      	ldrh	r2, [r7, #2]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	041a      	lsls	r2, r3, #16
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	887b      	ldrh	r3, [r7, #2]
 8002f82:	400b      	ands	r3, r1
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	619a      	str	r2, [r3, #24]
}
 8002f8a:	bf00      	nop
 8002f8c:	3714      	adds	r7, #20
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
	...

08002f98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fa2:	4b08      	ldr	r3, [pc, #32]	@ (8002fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa4:	695a      	ldr	r2, [r3, #20]
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d006      	beq.n	8002fbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fae:	4a05      	ldr	r2, [pc, #20]	@ (8002fc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff f8f2 	bl	80021a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fbc:	bf00      	nop
 8002fbe:	3708      	adds	r7, #8
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}
 8002fc4:	40013c00 	.word	0x40013c00

08002fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e12b      	b.n	8003232 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fe f99a 	bl	8001328 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	@ 0x24
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800301a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800302a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800302c:	f000 fd5c 	bl	8003ae8 <HAL_RCC_GetPCLK1Freq>
 8003030:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4a81      	ldr	r2, [pc, #516]	@ (800323c <HAL_I2C_Init+0x274>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d807      	bhi.n	800304c <HAL_I2C_Init+0x84>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a80      	ldr	r2, [pc, #512]	@ (8003240 <HAL_I2C_Init+0x278>)
 8003040:	4293      	cmp	r3, r2
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e006      	b.n	800305a <HAL_I2C_Init+0x92>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a7d      	ldr	r2, [pc, #500]	@ (8003244 <HAL_I2C_Init+0x27c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	bf94      	ite	ls
 8003054:	2301      	movls	r3, #1
 8003056:	2300      	movhi	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0e7      	b.n	8003232 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a78      	ldr	r2, [pc, #480]	@ (8003248 <HAL_I2C_Init+0x280>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0c9b      	lsrs	r3, r3, #18
 800306c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a6a      	ldr	r2, [pc, #424]	@ (800323c <HAL_I2C_Init+0x274>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d802      	bhi.n	800309c <HAL_I2C_Init+0xd4>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3301      	adds	r3, #1
 800309a:	e009      	b.n	80030b0 <HAL_I2C_Init+0xe8>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	4a69      	ldr	r2, [pc, #420]	@ (800324c <HAL_I2C_Init+0x284>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	099b      	lsrs	r3, r3, #6
 80030ae:	3301      	adds	r3, #1
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	495c      	ldr	r1, [pc, #368]	@ (800323c <HAL_I2C_Init+0x274>)
 80030cc:	428b      	cmp	r3, r1
 80030ce:	d819      	bhi.n	8003104 <HAL_I2C_Init+0x13c>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e59      	subs	r1, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fbb1 f3f3 	udiv	r3, r1, r3
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030e4:	400b      	ands	r3, r1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_I2C_Init+0x138>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1e59      	subs	r1, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fe:	e051      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003100:	2304      	movs	r3, #4
 8003102:	e04f      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d111      	bne.n	8003130 <HAL_I2C_Init+0x168>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1e58      	subs	r0, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	440b      	add	r3, r1
 800311a:	fbb0 f3f3 	udiv	r3, r0, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e012      	b.n	8003156 <HAL_I2C_Init+0x18e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	0099      	lsls	r1, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x196>
 800315a:	2301      	movs	r3, #1
 800315c:	e022      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10e      	bne.n	8003184 <HAL_I2C_Init+0x1bc>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1e58      	subs	r0, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	440b      	add	r3, r1
 8003174:	fbb0 f3f3 	udiv	r3, r0, r3
 8003178:	3301      	adds	r3, #1
 800317a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003182:	e00f      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	0099      	lsls	r1, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	6809      	ldr	r1, [r1, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6911      	ldr	r1, [r2, #16]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68d2      	ldr	r2, [r2, #12]
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	000186a0 	.word	0x000186a0
 8003240:	001e847f 	.word	0x001e847f
 8003244:	003d08ff 	.word	0x003d08ff
 8003248:	431bde83 	.word	0x431bde83
 800324c:	10624dd3 	.word	0x10624dd3

08003250 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	607a      	str	r2, [r7, #4]
 800325a:	461a      	mov	r2, r3
 800325c:	460b      	mov	r3, r1
 800325e:	817b      	strh	r3, [r7, #10]
 8003260:	4613      	mov	r3, r2
 8003262:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff fb76 	bl	8002954 <HAL_GetTick>
 8003268:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b20      	cmp	r3, #32
 8003274:	f040 80e0 	bne.w	8003438 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	2319      	movs	r3, #25
 800327e:	2201      	movs	r2, #1
 8003280:	4970      	ldr	r1, [pc, #448]	@ (8003444 <HAL_I2C_Master_Transmit+0x1f4>)
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f964 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
 8003290:	e0d3      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_I2C_Master_Transmit+0x50>
 800329c:	2302      	movs	r3, #2
 800329e:	e0cc      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d007      	beq.n	80032c6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f042 0201 	orr.w	r2, r2, #1
 80032c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2221      	movs	r2, #33	@ 0x21
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2210      	movs	r2, #16
 80032e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	893a      	ldrh	r2, [r7, #8]
 80032f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4a50      	ldr	r2, [pc, #320]	@ (8003448 <HAL_I2C_Master_Transmit+0x1f8>)
 8003306:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003308:	8979      	ldrh	r1, [r7, #10]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	6a3a      	ldr	r2, [r7, #32]
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f89c 	bl	800344c <I2C_MasterRequestWrite>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e08d      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800331e:	2300      	movs	r3, #0
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	695b      	ldr	r3, [r3, #20]
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003334:	e066      	b.n	8003404 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	6a39      	ldr	r1, [r7, #32]
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fa22 	bl	8003784 <I2C_WaitOnTXEFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00d      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334a:	2b04      	cmp	r3, #4
 800334c:	d107      	bne.n	800335e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800335c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e06b      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003366:	781a      	ldrb	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003372:	1c5a      	adds	r2, r3, #1
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800337c:	b29b      	uxth	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	b29a      	uxth	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b04      	cmp	r3, #4
 800339e:	d11b      	bne.n	80033d8 <HAL_I2C_Master_Transmit+0x188>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d017      	beq.n	80033d8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ac:	781a      	ldrb	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033b8:	1c5a      	adds	r2, r3, #1
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	3b01      	subs	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b29a      	uxth	r2, r3
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	6a39      	ldr	r1, [r7, #32]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 fa19 	bl	8003814 <I2C_WaitOnBTFFlagUntilTimeout>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00d      	beq.n	8003404 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d107      	bne.n	8003400 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fe:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e01a      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003408:	2b00      	cmp	r3, #0
 800340a:	d194      	bne.n	8003336 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800341a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	e000      	b.n	800343a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003438:	2302      	movs	r3, #2
  }
}
 800343a:	4618      	mov	r0, r3
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	00100002 	.word	0x00100002
 8003448:	ffff0000 	.word	0xffff0000

0800344c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b088      	sub	sp, #32
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	607a      	str	r2, [r7, #4]
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	460b      	mov	r3, r1
 800345a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003460:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b08      	cmp	r3, #8
 8003466:	d006      	beq.n	8003476 <I2C_MasterRequestWrite+0x2a>
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d003      	beq.n	8003476 <I2C_MasterRequestWrite+0x2a>
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003474:	d108      	bne.n	8003488 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003484:	601a      	str	r2, [r3, #0]
 8003486:	e00b      	b.n	80034a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348c:	2b12      	cmp	r3, #18
 800348e:	d107      	bne.n	80034a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800349e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f84f 	bl	8003550 <I2C_WaitOnFlagUntilTimeout>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d00d      	beq.n	80034d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034c6:	d103      	bne.n	80034d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e035      	b.n	8003540 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034dc:	d108      	bne.n	80034f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80034de:	897b      	ldrh	r3, [r7, #10]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	461a      	mov	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80034ec:	611a      	str	r2, [r3, #16]
 80034ee:	e01b      	b.n	8003528 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	11db      	asrs	r3, r3, #7
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f003 0306 	and.w	r3, r3, #6
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f063 030f 	orn	r3, r3, #15
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	490e      	ldr	r1, [pc, #56]	@ (8003548 <I2C_MasterRequestWrite+0xfc>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f898 	bl	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e010      	b.n	8003540 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800351e:	897b      	ldrh	r3, [r7, #10]
 8003520:	b2da      	uxtb	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	687a      	ldr	r2, [r7, #4]
 800352c:	4907      	ldr	r1, [pc, #28]	@ (800354c <I2C_MasterRequestWrite+0x100>)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f888 	bl	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3718      	adds	r7, #24
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	00010008 	.word	0x00010008
 800354c:	00010002 	.word	0x00010002

08003550 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	603b      	str	r3, [r7, #0]
 800355c:	4613      	mov	r3, r2
 800355e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003560:	e048      	b.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d044      	beq.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7ff f9f3 	bl	8002954 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <I2C_WaitOnFlagUntilTimeout+0x30>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d139      	bne.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d10d      	bne.n	80035a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	43da      	mvns	r2, r3
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	b29b      	uxth	r3, r3
 8003598:	2b00      	cmp	r3, #0
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	e00c      	b.n	80035c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	43da      	mvns	r2, r3
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4013      	ands	r3, r2
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	bf0c      	ite	eq
 80035b8:	2301      	moveq	r3, #1
 80035ba:	2300      	movne	r3, #0
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	461a      	mov	r2, r3
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d116      	bne.n	80035f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e023      	b.n	800363c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	0c1b      	lsrs	r3, r3, #16
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d10d      	bne.n	800361a <I2C_WaitOnFlagUntilTimeout+0xca>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	43da      	mvns	r2, r3
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	e00c      	b.n	8003634 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	699b      	ldr	r3, [r3, #24]
 8003620:	43da      	mvns	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	4013      	ands	r3, r2
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	bf0c      	ite	eq
 800362c:	2301      	moveq	r3, #1
 800362e:	2300      	movne	r3, #0
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	79fb      	ldrb	r3, [r7, #7]
 8003636:	429a      	cmp	r2, r3
 8003638:	d093      	beq.n	8003562 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	4618      	mov	r0, r3
 800363e:	3710      	adds	r7, #16
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003652:	e071      	b.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003662:	d123      	bne.n	80036ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003672:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800367c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003698:	f043 0204 	orr.w	r2, r3, #4
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e067      	b.n	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b2:	d041      	beq.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7ff f94e 	bl	8002954 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d302      	bcc.n	80036ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d136      	bne.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	0c1b      	lsrs	r3, r3, #16
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d10c      	bne.n	80036ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	43da      	mvns	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4013      	ands	r3, r2
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	bf14      	ite	ne
 80036e6:	2301      	movne	r3, #1
 80036e8:	2300      	moveq	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	e00b      	b.n	8003706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	43da      	mvns	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	4013      	ands	r3, r2
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	bf14      	ite	ne
 8003700:	2301      	movne	r3, #1
 8003702:	2300      	moveq	r3, #0
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b00      	cmp	r3, #0
 8003708:	d016      	beq.n	8003738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e021      	b.n	800377c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	0c1b      	lsrs	r3, r3, #16
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d10c      	bne.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	43da      	mvns	r2, r3
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	4013      	ands	r3, r2
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	e00b      	b.n	8003774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	699b      	ldr	r3, [r3, #24]
 8003762:	43da      	mvns	r2, r3
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	b29b      	uxth	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	bf14      	ite	ne
 800376e:	2301      	movne	r3, #1
 8003770:	2300      	moveq	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	f47f af6d 	bne.w	8003654 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003790:	e034      	b.n	80037fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f000 f886 	bl	80038a4 <I2C_IsAcknowledgeFailed>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e034      	b.n	800380c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a8:	d028      	beq.n	80037fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037aa:	f7ff f8d3 	bl	8002954 <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d11d      	bne.n	80037fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ca:	2b80      	cmp	r3, #128	@ 0x80
 80037cc:	d016      	beq.n	80037fc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2220      	movs	r2, #32
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e8:	f043 0220 	orr.w	r2, r3, #32
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e007      	b.n	800380c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003806:	2b80      	cmp	r3, #128	@ 0x80
 8003808:	d1c3      	bne.n	8003792 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3710      	adds	r7, #16
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b084      	sub	sp, #16
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003820:	e034      	b.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003822:	68f8      	ldr	r0, [r7, #12]
 8003824:	f000 f83e 	bl	80038a4 <I2C_IsAcknowledgeFailed>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e034      	b.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d028      	beq.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383a:	f7ff f88b 	bl	8002954 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	429a      	cmp	r2, r3
 8003848:	d302      	bcc.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d11d      	bne.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d016      	beq.n	800388c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2200      	movs	r2, #0
 8003862:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e007      	b.n	800389c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b04      	cmp	r3, #4
 8003898:	d1c3      	bne.n	8003822 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ba:	d11b      	bne.n	80038f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80038c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	f043 0204 	orr.w	r2, r3, #4
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e000      	b.n	80038f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0cc      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003918:	4b68      	ldr	r3, [pc, #416]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 030f 	and.w	r3, r3, #15
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d90c      	bls.n	8003940 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b65      	ldr	r3, [pc, #404]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b63      	ldr	r3, [pc, #396]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 030f 	and.w	r3, r3, #15
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e0b8      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d020      	beq.n	800398e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0304 	and.w	r3, r3, #4
 8003954:	2b00      	cmp	r3, #0
 8003956:	d005      	beq.n	8003964 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003958:	4b59      	ldr	r3, [pc, #356]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	4a58      	ldr	r2, [pc, #352]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003962:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d005      	beq.n	800397c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003970:	4b53      	ldr	r3, [pc, #332]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	4a52      	ldr	r2, [pc, #328]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800397a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800397c:	4b50      	ldr	r3, [pc, #320]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	494d      	ldr	r1, [pc, #308]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 800398a:	4313      	orrs	r3, r2
 800398c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d044      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039a2:	4b47      	ldr	r3, [pc, #284]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d119      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e07f      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d003      	beq.n	80039c2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d107      	bne.n	80039d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d109      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e06f      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039d2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e067      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039e2:	4b37      	ldr	r3, [pc, #220]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f023 0203 	bic.w	r2, r3, #3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	4934      	ldr	r1, [pc, #208]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039f4:	f7fe ffae 	bl	8002954 <HAL_GetTick>
 80039f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039fc:	f7fe ffaa 	bl	8002954 <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e04f      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 020c 	and.w	r2, r3, #12
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d1eb      	bne.n	80039fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a24:	4b25      	ldr	r3, [pc, #148]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d20c      	bcs.n	8003a4c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a32:	4b22      	ldr	r3, [pc, #136]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a3a:	4b20      	ldr	r3, [pc, #128]	@ (8003abc <HAL_RCC_ClockConfig+0x1b8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 030f 	and.w	r3, r3, #15
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d001      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e032      	b.n	8003ab2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0304 	and.w	r3, r3, #4
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d008      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a58:	4b19      	ldr	r3, [pc, #100]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	4916      	ldr	r1, [pc, #88]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d009      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a76:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	490e      	ldr	r1, [pc, #56]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a8a:	f000 f841 	bl	8003b10 <HAL_RCC_GetSysClockFreq>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac0 <HAL_RCC_ClockConfig+0x1bc>)
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 030f 	and.w	r3, r3, #15
 8003a9a:	490a      	ldr	r1, [pc, #40]	@ (8003ac4 <HAL_RCC_ClockConfig+0x1c0>)
 8003a9c:	5ccb      	ldrb	r3, [r1, r3]
 8003a9e:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa2:	4a09      	ldr	r2, [pc, #36]	@ (8003ac8 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003aa6:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <HAL_RCC_ClockConfig+0x1c8>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe ff0e 	bl	80028cc <HAL_InitTick>

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023c00 	.word	0x40023c00
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	08005f08 	.word	0x08005f08
 8003ac8:	20000010 	.word	0x20000010
 8003acc:	20000014 	.word	0x20000014

08003ad0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ad4:	4b03      	ldr	r3, [pc, #12]	@ (8003ae4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000010 	.word	0x20000010

08003ae8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003aec:	f7ff fff0 	bl	8003ad0 <HAL_RCC_GetHCLKFreq>
 8003af0:	4602      	mov	r2, r0
 8003af2:	4b05      	ldr	r3, [pc, #20]	@ (8003b08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	0a9b      	lsrs	r3, r3, #10
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	4903      	ldr	r1, [pc, #12]	@ (8003b0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003afe:	5ccb      	ldrb	r3, [r1, r3]
 8003b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	08005f18 	.word	0x08005f18

08003b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b14:	b0a6      	sub	sp, #152	@ 0x98
 8003b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b36:	4bc8      	ldr	r3, [pc, #800]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f003 030c 	and.w	r3, r3, #12
 8003b3e:	2b0c      	cmp	r3, #12
 8003b40:	f200 817e 	bhi.w	8003e40 <HAL_RCC_GetSysClockFreq+0x330>
 8003b44:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b81 	.word	0x08003b81
 8003b50:	08003e41 	.word	0x08003e41
 8003b54:	08003e41 	.word	0x08003e41
 8003b58:	08003e41 	.word	0x08003e41
 8003b5c:	08003b89 	.word	0x08003b89
 8003b60:	08003e41 	.word	0x08003e41
 8003b64:	08003e41 	.word	0x08003e41
 8003b68:	08003e41 	.word	0x08003e41
 8003b6c:	08003b91 	.word	0x08003b91
 8003b70:	08003e41 	.word	0x08003e41
 8003b74:	08003e41 	.word	0x08003e41
 8003b78:	08003e41 	.word	0x08003e41
 8003b7c:	08003cfb 	.word	0x08003cfb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b80:	4bb6      	ldr	r3, [pc, #728]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b86:	e15f      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b88:	4bb5      	ldr	r3, [pc, #724]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b8e:	e15b      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b90:	4bb1      	ldr	r3, [pc, #708]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b98:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9c:	4bae      	ldr	r3, [pc, #696]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d031      	beq.n	8003c0c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba8:	4bab      	ldr	r3, [pc, #684]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	2200      	movs	r2, #0
 8003bb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003bb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bc0:	4ba7      	ldr	r3, [pc, #668]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bc2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003bc6:	462a      	mov	r2, r5
 8003bc8:	fb03 f202 	mul.w	r2, r3, r2
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4621      	mov	r1, r4
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	4aa2      	ldr	r2, [pc, #648]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x350>)
 8003bd8:	4621      	mov	r1, r4
 8003bda:	fba1 1202 	umull	r1, r2, r1, r2
 8003bde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003be0:	460a      	mov	r2, r1
 8003be2:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003be4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003be6:	4413      	add	r3, r2
 8003be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003bea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003bee:	2200      	movs	r2, #0
 8003bf0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003bf2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003bf4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003bf8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003bfc:	f7fc ff46 	bl	8000a8c <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003c0a:	e064      	b.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0c:	4b92      	ldr	r3, [pc, #584]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	2200      	movs	r2, #0
 8003c14:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c16:	657a      	str	r2, [r7, #84]	@ 0x54
 8003c18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c20:	2300      	movs	r3, #0
 8003c22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c24:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003c28:	4622      	mov	r2, r4
 8003c2a:	462b      	mov	r3, r5
 8003c2c:	f04f 0000 	mov.w	r0, #0
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	0159      	lsls	r1, r3, #5
 8003c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3a:	0150      	lsls	r0, r2, #5
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4621      	mov	r1, r4
 8003c42:	1a51      	subs	r1, r2, r1
 8003c44:	6139      	str	r1, [r7, #16]
 8003c46:	4629      	mov	r1, r5
 8003c48:	eb63 0301 	sbc.w	r3, r3, r1
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	f04f 0200 	mov.w	r2, #0
 8003c52:	f04f 0300 	mov.w	r3, #0
 8003c56:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c5a:	4659      	mov	r1, fp
 8003c5c:	018b      	lsls	r3, r1, #6
 8003c5e:	4651      	mov	r1, sl
 8003c60:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c64:	4651      	mov	r1, sl
 8003c66:	018a      	lsls	r2, r1, #6
 8003c68:	4651      	mov	r1, sl
 8003c6a:	ebb2 0801 	subs.w	r8, r2, r1
 8003c6e:	4659      	mov	r1, fp
 8003c70:	eb63 0901 	sbc.w	r9, r3, r1
 8003c74:	f04f 0200 	mov.w	r2, #0
 8003c78:	f04f 0300 	mov.w	r3, #0
 8003c7c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c80:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c84:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c88:	4690      	mov	r8, r2
 8003c8a:	4699      	mov	r9, r3
 8003c8c:	4623      	mov	r3, r4
 8003c8e:	eb18 0303 	adds.w	r3, r8, r3
 8003c92:	60bb      	str	r3, [r7, #8]
 8003c94:	462b      	mov	r3, r5
 8003c96:	eb49 0303 	adc.w	r3, r9, r3
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	f04f 0300 	mov.w	r3, #0
 8003ca4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ca8:	4629      	mov	r1, r5
 8003caa:	028b      	lsls	r3, r1, #10
 8003cac:	4621      	mov	r1, r4
 8003cae:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	028a      	lsls	r2, r1, #10
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cc2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003cc4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003cc8:	f7fc fee0 	bl	8000a8c <__aeabi_uldivmod>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cd6:	4b60      	ldr	r3, [pc, #384]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	0c1b      	lsrs	r3, r3, #16
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003ce8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003cf8:	e0a6      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cfa:	4b57      	ldr	r3, [pc, #348]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d06:	4b54      	ldr	r3, [pc, #336]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d02a      	beq.n	8003d68 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d12:	4b51      	ldr	r3, [pc, #324]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	099b      	lsrs	r3, r3, #6
 8003d18:	2200      	movs	r2, #0
 8003d1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003d24:	2100      	movs	r1, #0
 8003d26:	4b4e      	ldr	r3, [pc, #312]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d28:	fb03 f201 	mul.w	r2, r3, r1
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	fb00 f303 	mul.w	r3, r0, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	4a4a      	ldr	r2, [pc, #296]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x350>)
 8003d36:	fba0 1202 	umull	r1, r2, r0, r2
 8003d3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d3c:	460a      	mov	r2, r1
 8003d3e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003d40:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003d42:	4413      	add	r3, r2
 8003d44:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d4e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d50:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003d54:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003d58:	f7fc fe98 	bl	8000a8c <__aeabi_uldivmod>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4613      	mov	r3, r2
 8003d62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d66:	e05b      	b.n	8003e20 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d68:	4b3b      	ldr	r3, [pc, #236]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	2200      	movs	r2, #0
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7a:	623b      	str	r3, [r7, #32]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d84:	4642      	mov	r2, r8
 8003d86:	464b      	mov	r3, r9
 8003d88:	f04f 0000 	mov.w	r0, #0
 8003d8c:	f04f 0100 	mov.w	r1, #0
 8003d90:	0159      	lsls	r1, r3, #5
 8003d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d96:	0150      	lsls	r0, r2, #5
 8003d98:	4602      	mov	r2, r0
 8003d9a:	460b      	mov	r3, r1
 8003d9c:	4641      	mov	r1, r8
 8003d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003da2:	4649      	mov	r1, r9
 8003da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003da8:	f04f 0200 	mov.w	r2, #0
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8003dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8003dc4:	f04f 0200 	mov.w	r2, #0
 8003dc8:	f04f 0300 	mov.w	r3, #0
 8003dcc:	00eb      	lsls	r3, r5, #3
 8003dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dd2:	00e2      	lsls	r2, r4, #3
 8003dd4:	4614      	mov	r4, r2
 8003dd6:	461d      	mov	r5, r3
 8003dd8:	4643      	mov	r3, r8
 8003dda:	18e3      	adds	r3, r4, r3
 8003ddc:	603b      	str	r3, [r7, #0]
 8003dde:	464b      	mov	r3, r9
 8003de0:	eb45 0303 	adc.w	r3, r5, r3
 8003de4:	607b      	str	r3, [r7, #4]
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003df2:	4629      	mov	r1, r5
 8003df4:	028b      	lsls	r3, r1, #10
 8003df6:	4621      	mov	r1, r4
 8003df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	028a      	lsls	r2, r1, #10
 8003e00:	4610      	mov	r0, r2
 8003e02:	4619      	mov	r1, r3
 8003e04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e08:	2200      	movs	r2, #0
 8003e0a:	61bb      	str	r3, [r7, #24]
 8003e0c:	61fa      	str	r2, [r7, #28]
 8003e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e12:	f7fc fe3b 	bl	8000a8c <__aeabi_uldivmod>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003e20:	4b0d      	ldr	r3, [pc, #52]	@ (8003e58 <HAL_RCC_GetSysClockFreq+0x348>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	0f1b      	lsrs	r3, r3, #28
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003e2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e3e:	e003      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e40:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e46:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e48:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3798      	adds	r7, #152	@ 0x98
 8003e50:	46bd      	mov	sp, r7
 8003e52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	017d7840 	.word	0x017d7840

08003e64 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b086      	sub	sp, #24
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e28d      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 8083 	beq.w	8003f8a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e84:	4b94      	ldr	r3, [pc, #592]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b04      	cmp	r3, #4
 8003e8e:	d019      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e90:	4b91      	ldr	r3, [pc, #580]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d106      	bne.n	8003eaa <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e9c:	4b8e      	ldr	r3, [pc, #568]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eaa:	4b8b      	ldr	r3, [pc, #556]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003eb2:	2b0c      	cmp	r3, #12
 8003eb4:	d112      	bne.n	8003edc <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb6:	4b88      	ldr	r3, [pc, #544]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ebe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec2:	d10b      	bne.n	8003edc <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec4:	4b84      	ldr	r3, [pc, #528]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d05b      	beq.n	8003f88 <HAL_RCC_OscConfig+0x124>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d157      	bne.n	8003f88 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e25a      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ee4:	d106      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x90>
 8003ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a7b      	ldr	r2, [pc, #492]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003eec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ef0:	6013      	str	r3, [r2, #0]
 8003ef2:	e01d      	b.n	8003f30 <HAL_RCC_OscConfig+0xcc>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0xb4>
 8003efe:	4b76      	ldr	r3, [pc, #472]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a75      	ldr	r2, [pc, #468]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f08:	6013      	str	r3, [r2, #0]
 8003f0a:	4b73      	ldr	r3, [pc, #460]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a72      	ldr	r2, [pc, #456]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f14:	6013      	str	r3, [r2, #0]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0xcc>
 8003f18:	4b6f      	ldr	r3, [pc, #444]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a6e      	ldr	r2, [pc, #440]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f22:	6013      	str	r3, [r2, #0]
 8003f24:	4b6c      	ldr	r3, [pc, #432]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a6b      	ldr	r2, [pc, #428]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d013      	beq.n	8003f60 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f38:	f7fe fd0c 	bl	8002954 <HAL_GetTick>
 8003f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f3e:	e008      	b.n	8003f52 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f40:	f7fe fd08 	bl	8002954 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	2b64      	cmp	r3, #100	@ 0x64
 8003f4c:	d901      	bls.n	8003f52 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f4e:	2303      	movs	r3, #3
 8003f50:	e21f      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f52:	4b61      	ldr	r3, [pc, #388]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d0f0      	beq.n	8003f40 <HAL_RCC_OscConfig+0xdc>
 8003f5e:	e014      	b.n	8003f8a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f60:	f7fe fcf8 	bl	8002954 <HAL_GetTick>
 8003f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f66:	e008      	b.n	8003f7a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f68:	f7fe fcf4 	bl	8002954 <HAL_GetTick>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	2b64      	cmp	r3, #100	@ 0x64
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e20b      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f7a:	4b57      	ldr	r3, [pc, #348]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1f0      	bne.n	8003f68 <HAL_RCC_OscConfig+0x104>
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d06f      	beq.n	8004076 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f96:	4b50      	ldr	r3, [pc, #320]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d017      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fa2:	4b4d      	ldr	r3, [pc, #308]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d105      	bne.n	8003fba <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fae:	4b4a      	ldr	r3, [pc, #296]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00b      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fba:	4b47      	ldr	r3, [pc, #284]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003fc2:	2b0c      	cmp	r3, #12
 8003fc4:	d11c      	bne.n	8004000 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fc6:	4b44      	ldr	r3, [pc, #272]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d116      	bne.n	8004000 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fd2:	4b41      	ldr	r3, [pc, #260]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d005      	beq.n	8003fea <HAL_RCC_OscConfig+0x186>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d001      	beq.n	8003fea <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1d3      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fea:	4b3b      	ldr	r3, [pc, #236]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	4937      	ldr	r1, [pc, #220]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ffe:	e03a      	b.n	8004076 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004008:	4b34      	ldr	r3, [pc, #208]	@ (80040dc <HAL_RCC_OscConfig+0x278>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800400e:	f7fe fca1 	bl	8002954 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004016:	f7fe fc9d 	bl	8002954 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b02      	cmp	r3, #2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e1b4      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004028:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004034:	4b28      	ldr	r3, [pc, #160]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	4925      	ldr	r1, [pc, #148]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 8004044:	4313      	orrs	r3, r2
 8004046:	600b      	str	r3, [r1, #0]
 8004048:	e015      	b.n	8004076 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800404a:	4b24      	ldr	r3, [pc, #144]	@ (80040dc <HAL_RCC_OscConfig+0x278>)
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004050:	f7fe fc80 	bl	8002954 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004058:	f7fe fc7c 	bl	8002954 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e193      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800406a:	4b1b      	ldr	r3, [pc, #108]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1f0      	bne.n	8004058 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0308 	and.w	r3, r3, #8
 800407e:	2b00      	cmp	r3, #0
 8004080:	d036      	beq.n	80040f0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d016      	beq.n	80040b8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800408a:	4b15      	ldr	r3, [pc, #84]	@ (80040e0 <HAL_RCC_OscConfig+0x27c>)
 800408c:	2201      	movs	r2, #1
 800408e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004090:	f7fe fc60 	bl	8002954 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004098:	f7fe fc5c 	bl	8002954 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e173      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040aa:	4b0b      	ldr	r3, [pc, #44]	@ (80040d8 <HAL_RCC_OscConfig+0x274>)
 80040ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d0f0      	beq.n	8004098 <HAL_RCC_OscConfig+0x234>
 80040b6:	e01b      	b.n	80040f0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040b8:	4b09      	ldr	r3, [pc, #36]	@ (80040e0 <HAL_RCC_OscConfig+0x27c>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040be:	f7fe fc49 	bl	8002954 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c4:	e00e      	b.n	80040e4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040c6:	f7fe fc45 	bl	8002954 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d907      	bls.n	80040e4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e15c      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
 80040d8:	40023800 	.word	0x40023800
 80040dc:	42470000 	.word	0x42470000
 80040e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	4b8a      	ldr	r3, [pc, #552]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80040e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d1ea      	bne.n	80040c6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	f000 8097 	beq.w	800422c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040fe:	2300      	movs	r3, #0
 8004100:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004102:	4b83      	ldr	r3, [pc, #524]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	2300      	movs	r3, #0
 8004110:	60bb      	str	r3, [r7, #8]
 8004112:	4b7f      	ldr	r3, [pc, #508]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004116:	4a7e      	ldr	r2, [pc, #504]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004118:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800411c:	6413      	str	r3, [r2, #64]	@ 0x40
 800411e:	4b7c      	ldr	r3, [pc, #496]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004126:	60bb      	str	r3, [r7, #8]
 8004128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800412a:	2301      	movs	r3, #1
 800412c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800412e:	4b79      	ldr	r3, [pc, #484]	@ (8004314 <HAL_RCC_OscConfig+0x4b0>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004136:	2b00      	cmp	r3, #0
 8004138:	d118      	bne.n	800416c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800413a:	4b76      	ldr	r3, [pc, #472]	@ (8004314 <HAL_RCC_OscConfig+0x4b0>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a75      	ldr	r2, [pc, #468]	@ (8004314 <HAL_RCC_OscConfig+0x4b0>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004146:	f7fe fc05 	bl	8002954 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800414e:	f7fe fc01 	bl	8002954 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e118      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	4b6c      	ldr	r3, [pc, #432]	@ (8004314 <HAL_RCC_OscConfig+0x4b0>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b01      	cmp	r3, #1
 8004172:	d106      	bne.n	8004182 <HAL_RCC_OscConfig+0x31e>
 8004174:	4b66      	ldr	r3, [pc, #408]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004178:	4a65      	ldr	r2, [pc, #404]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004180:	e01c      	b.n	80041bc <HAL_RCC_OscConfig+0x358>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	2b05      	cmp	r3, #5
 8004188:	d10c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x340>
 800418a:	4b61      	ldr	r3, [pc, #388]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418e:	4a60      	ldr	r2, [pc, #384]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004190:	f043 0304 	orr.w	r3, r3, #4
 8004194:	6713      	str	r3, [r2, #112]	@ 0x70
 8004196:	4b5e      	ldr	r3, [pc, #376]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	4a5d      	ldr	r2, [pc, #372]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80041a2:	e00b      	b.n	80041bc <HAL_RCC_OscConfig+0x358>
 80041a4:	4b5a      	ldr	r3, [pc, #360]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a8:	4a59      	ldr	r2, [pc, #356]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041aa:	f023 0301 	bic.w	r3, r3, #1
 80041ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80041b0:	4b57      	ldr	r3, [pc, #348]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041b4:	4a56      	ldr	r2, [pc, #344]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041b6:	f023 0304 	bic.w	r3, r3, #4
 80041ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c4:	f7fe fbc6 	bl	8002954 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ca:	e00a      	b.n	80041e2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041cc:	f7fe fbc2 	bl	8002954 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e0d7      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e2:	4b4b      	ldr	r3, [pc, #300]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0ee      	beq.n	80041cc <HAL_RCC_OscConfig+0x368>
 80041ee:	e014      	b.n	800421a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f0:	f7fe fbb0 	bl	8002954 <HAL_GetTick>
 80041f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041f6:	e00a      	b.n	800420e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f8:	f7fe fbac 	bl	8002954 <HAL_GetTick>
 80041fc:	4602      	mov	r2, r0
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004206:	4293      	cmp	r3, r2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e0c1      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800420e:	4b40      	ldr	r3, [pc, #256]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1ee      	bne.n	80041f8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d105      	bne.n	800422c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004220:	4b3b      	ldr	r3, [pc, #236]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004224:	4a3a      	ldr	r2, [pc, #232]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004226:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800422a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 80ad 	beq.w	8004390 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004236:	4b36      	ldr	r3, [pc, #216]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	2b08      	cmp	r3, #8
 8004240:	d060      	beq.n	8004304 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d145      	bne.n	80042d6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800424a:	4b33      	ldr	r3, [pc, #204]	@ (8004318 <HAL_RCC_OscConfig+0x4b4>)
 800424c:	2200      	movs	r2, #0
 800424e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004250:	f7fe fb80 	bl	8002954 <HAL_GetTick>
 8004254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004258:	f7fe fb7c 	bl	8002954 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b02      	cmp	r3, #2
 8004264:	d901      	bls.n	800426a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e093      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800426a:	4b29      	ldr	r3, [pc, #164]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	69da      	ldr	r2, [r3, #28]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a1b      	ldr	r3, [r3, #32]
 800427e:	431a      	orrs	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	019b      	lsls	r3, r3, #6
 8004286:	431a      	orrs	r2, r3
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800428c:	085b      	lsrs	r3, r3, #1
 800428e:	3b01      	subs	r3, #1
 8004290:	041b      	lsls	r3, r3, #16
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	061b      	lsls	r3, r3, #24
 800429a:	431a      	orrs	r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a0:	071b      	lsls	r3, r3, #28
 80042a2:	491b      	ldr	r1, [pc, #108]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004318 <HAL_RCC_OscConfig+0x4b4>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ae:	f7fe fb51 	bl	8002954 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b6:	f7fe fb4d 	bl	8002954 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e064      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042c8:	4b11      	ldr	r3, [pc, #68]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x452>
 80042d4:	e05c      	b.n	8004390 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d6:	4b10      	ldr	r3, [pc, #64]	@ (8004318 <HAL_RCC_OscConfig+0x4b4>)
 80042d8:	2200      	movs	r2, #0
 80042da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fe fb3a 	bl	8002954 <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fe fb36 	bl	8002954 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e04d      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f6:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <HAL_RCC_OscConfig+0x4ac>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x480>
 8004302:	e045      	b.n	8004390 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d107      	bne.n	800431c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e040      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
 8004310:	40023800 	.word	0x40023800
 8004314:	40007000 	.word	0x40007000
 8004318:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800431c:	4b1f      	ldr	r3, [pc, #124]	@ (800439c <HAL_RCC_OscConfig+0x538>)
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d030      	beq.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004334:	429a      	cmp	r2, r3
 8004336:	d129      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004342:	429a      	cmp	r2, r3
 8004344:	d122      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800434c:	4013      	ands	r3, r2
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004352:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004354:	4293      	cmp	r3, r2
 8004356:	d119      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004362:	085b      	lsrs	r3, r3, #1
 8004364:	3b01      	subs	r3, #1
 8004366:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004368:	429a      	cmp	r2, r3
 800436a:	d10f      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004376:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d107      	bne.n	800438c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004388:	429a      	cmp	r2, r3
 800438a:	d001      	beq.n	8004390 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e000      	b.n	8004392 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3718      	adds	r7, #24
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	bf00      	nop
 800439c:	40023800 	.word	0x40023800

080043a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b082      	sub	sp, #8
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e041      	b.n	8004436 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d106      	bne.n	80043cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f7fe f98c 	bl	80026e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2202      	movs	r2, #2
 80043d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3304      	adds	r3, #4
 80043dc:	4619      	mov	r1, r3
 80043de:	4610      	mov	r0, r2
 80043e0:	f000 fcf8 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2201      	movs	r2, #1
 80043e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3708      	adds	r7, #8
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444e:	b2db      	uxtb	r3, r3
 8004450:	2b01      	cmp	r3, #1
 8004452:	d001      	beq.n	8004458 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e046      	b.n	80044e6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a23      	ldr	r2, [pc, #140]	@ (80044f4 <HAL_TIM_Base_Start+0xb4>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d022      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004472:	d01d      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_TIM_Base_Start+0xb8>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d018      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a1e      	ldr	r2, [pc, #120]	@ (80044fc <HAL_TIM_Base_Start+0xbc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d013      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <HAL_TIM_Base_Start+0xc0>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00e      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a1b      	ldr	r2, [pc, #108]	@ (8004504 <HAL_TIM_Base_Start+0xc4>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a19      	ldr	r2, [pc, #100]	@ (8004508 <HAL_TIM_Base_Start+0xc8>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d004      	beq.n	80044b0 <HAL_TIM_Base_Start+0x70>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a18      	ldr	r2, [pc, #96]	@ (800450c <HAL_TIM_Base_Start+0xcc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d111      	bne.n	80044d4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2b06      	cmp	r3, #6
 80044c0:	d010      	beq.n	80044e4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0201 	orr.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044d2:	e007      	b.n	80044e4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f042 0201 	orr.w	r2, r2, #1
 80044e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3714      	adds	r7, #20
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40010000 	.word	0x40010000
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40000c00 	.word	0x40000c00
 8004504:	40010400 	.word	0x40010400
 8004508:	40014000 	.word	0x40014000
 800450c:	40001800 	.word	0x40001800

08004510 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800451e:	b2db      	uxtb	r3, r3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d001      	beq.n	8004528 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e04e      	b.n	80045c6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2202      	movs	r2, #2
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f042 0201 	orr.w	r2, r2, #1
 800453e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a23      	ldr	r2, [pc, #140]	@ (80045d4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d022      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004552:	d01d      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1f      	ldr	r2, [pc, #124]	@ (80045d8 <HAL_TIM_Base_Start_IT+0xc8>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d018      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1e      	ldr	r2, [pc, #120]	@ (80045dc <HAL_TIM_Base_Start_IT+0xcc>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d013      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a1c      	ldr	r2, [pc, #112]	@ (80045e0 <HAL_TIM_Base_Start_IT+0xd0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00e      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1b      	ldr	r2, [pc, #108]	@ (80045e4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d009      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a19      	ldr	r2, [pc, #100]	@ (80045e8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d004      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x80>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a18      	ldr	r2, [pc, #96]	@ (80045ec <HAL_TIM_Base_Start_IT+0xdc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d111      	bne.n	80045b4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0307 	and.w	r3, r3, #7
 800459a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d010      	beq.n	80045c4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 0201 	orr.w	r2, r2, #1
 80045b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045b2:	e007      	b.n	80045c4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40010000 	.word	0x40010000
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40000c00 	.word	0x40000c00
 80045e4:	40010400 	.word	0x40010400
 80045e8:	40014000 	.word	0x40014000
 80045ec:	40001800 	.word	0x40001800

080045f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68da      	ldr	r2, [r3, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0201 	bic.w	r2, r2, #1
 8004606:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	6a1a      	ldr	r2, [r3, #32]
 800460e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004612:	4013      	ands	r3, r2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d10f      	bne.n	8004638 <HAL_TIM_Base_Stop_IT+0x48>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6a1a      	ldr	r2, [r3, #32]
 800461e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d107      	bne.n	8004638 <HAL_TIM_Base_Stop_IT+0x48>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 0201 	bic.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr

0800464e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b082      	sub	sp, #8
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d101      	bne.n	8004660 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e041      	b.n	80046e4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d106      	bne.n	800467a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 f839 	bl	80046ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2202      	movs	r2, #2
 800467e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	4619      	mov	r1, r3
 800468c:	4610      	mov	r0, r2
 800468e:	f000 fba1 	bl	8004dd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d109      	bne.n	8004724 <HAL_TIM_PWM_Start+0x24>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b01      	cmp	r3, #1
 800471a:	bf14      	ite	ne
 800471c:	2301      	movne	r3, #1
 800471e:	2300      	moveq	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	e022      	b.n	800476a <HAL_TIM_PWM_Start+0x6a>
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b04      	cmp	r3, #4
 8004728:	d109      	bne.n	800473e <HAL_TIM_PWM_Start+0x3e>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	bf14      	ite	ne
 8004736:	2301      	movne	r3, #1
 8004738:	2300      	moveq	r3, #0
 800473a:	b2db      	uxtb	r3, r3
 800473c:	e015      	b.n	800476a <HAL_TIM_PWM_Start+0x6a>
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	2b08      	cmp	r3, #8
 8004742:	d109      	bne.n	8004758 <HAL_TIM_PWM_Start+0x58>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	e008      	b.n	800476a <HAL_TIM_PWM_Start+0x6a>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	bf14      	ite	ne
 8004764:	2301      	movne	r3, #1
 8004766:	2300      	moveq	r3, #0
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b00      	cmp	r3, #0
 800476c:	d001      	beq.n	8004772 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07c      	b.n	800486c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0x82>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004780:	e013      	b.n	80047aa <HAL_TIM_PWM_Start+0xaa>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b04      	cmp	r3, #4
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0x92>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004790:	e00b      	b.n	80047aa <HAL_TIM_PWM_Start+0xaa>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xa2>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047a0:	e003      	b.n	80047aa <HAL_TIM_PWM_Start+0xaa>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fe04 	bl	80053c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a2d      	ldr	r2, [pc, #180]	@ (8004874 <HAL_TIM_PWM_Start+0x174>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d004      	beq.n	80047cc <HAL_TIM_PWM_Start+0xcc>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a2c      	ldr	r2, [pc, #176]	@ (8004878 <HAL_TIM_PWM_Start+0x178>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d101      	bne.n	80047d0 <HAL_TIM_PWM_Start+0xd0>
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <HAL_TIM_PWM_Start+0xd2>
 80047d0:	2300      	movs	r3, #0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a22      	ldr	r2, [pc, #136]	@ (8004874 <HAL_TIM_PWM_Start+0x174>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d022      	beq.n	8004836 <HAL_TIM_PWM_Start+0x136>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047f8:	d01d      	beq.n	8004836 <HAL_TIM_PWM_Start+0x136>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a1f      	ldr	r2, [pc, #124]	@ (800487c <HAL_TIM_PWM_Start+0x17c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d018      	beq.n	8004836 <HAL_TIM_PWM_Start+0x136>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a1d      	ldr	r2, [pc, #116]	@ (8004880 <HAL_TIM_PWM_Start+0x180>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_TIM_PWM_Start+0x136>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a1c      	ldr	r2, [pc, #112]	@ (8004884 <HAL_TIM_PWM_Start+0x184>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d00e      	beq.n	8004836 <HAL_TIM_PWM_Start+0x136>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a16      	ldr	r2, [pc, #88]	@ (8004878 <HAL_TIM_PWM_Start+0x178>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d009      	beq.n	8004836 <HAL_TIM_PWM_Start+0x136>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a18      	ldr	r2, [pc, #96]	@ (8004888 <HAL_TIM_PWM_Start+0x188>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d004      	beq.n	8004836 <HAL_TIM_PWM_Start+0x136>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a16      	ldr	r2, [pc, #88]	@ (800488c <HAL_TIM_PWM_Start+0x18c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d111      	bne.n	800485a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b06      	cmp	r3, #6
 8004846:	d010      	beq.n	800486a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f042 0201 	orr.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004858:	e007      	b.n	800486a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800486a:	2300      	movs	r3, #0
}
 800486c:	4618      	mov	r0, r3
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40010000 	.word	0x40010000
 8004878:	40010400 	.word	0x40010400
 800487c:	40000400 	.word	0x40000400
 8004880:	40000800 	.word	0x40000800
 8004884:	40000c00 	.word	0x40000c00
 8004888:	40014000 	.word	0x40014000
 800488c:	40001800 	.word	0x40001800

08004890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d020      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f003 0302 	and.w	r3, r3, #2
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01b      	beq.n	80048f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f06f 0202 	mvn.w	r2, #2
 80048c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	f003 0303 	and.w	r3, r3, #3
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fa5b 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 80048e0:	e005      	b.n	80048ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 fa4d 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fa5e 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d020      	beq.n	8004940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d01b      	beq.n	8004940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0204 	mvn.w	r2, #4
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2202      	movs	r2, #2
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 fa35 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fa27 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 fa38 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d020      	beq.n	800498c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f003 0308 	and.w	r3, r3, #8
 8004950:	2b00      	cmp	r3, #0
 8004952:	d01b      	beq.n	800498c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f06f 0208 	mvn.w	r2, #8
 800495c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2204      	movs	r2, #4
 8004962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d003      	beq.n	800497a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 fa0f 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 8004978:	e005      	b.n	8004986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fa01 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 fa12 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	f003 0310 	and.w	r3, r3, #16
 8004992:	2b00      	cmp	r3, #0
 8004994:	d020      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f003 0310 	and.w	r3, r3, #16
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01b      	beq.n	80049d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0210 	mvn.w	r2, #16
 80049a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2208      	movs	r2, #8
 80049ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69db      	ldr	r3, [r3, #28]
 80049b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f9e9 	bl	8004d96 <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f9db 	bl	8004d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 f9ec 	bl	8004daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00c      	beq.n	80049fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d007      	beq.n	80049fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f06f 0201 	mvn.w	r2, #1
 80049f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fd fbfa 	bl	80021f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00c      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fd7c 	bl	8005518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9bd 	bl	8004dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f003 0320 	and.w	r3, r3, #32
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00c      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	f003 0320 	and.w	r3, r3, #32
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f06f 0220 	mvn.w	r2, #32
 8004a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fd4e 	bl	8005504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a68:	bf00      	nop
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e0ae      	b.n	8004bec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b0c      	cmp	r3, #12
 8004a9a:	f200 809f 	bhi.w	8004bdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ad9 	.word	0x08004ad9
 8004aa8:	08004bdd 	.word	0x08004bdd
 8004aac:	08004bdd 	.word	0x08004bdd
 8004ab0:	08004bdd 	.word	0x08004bdd
 8004ab4:	08004b19 	.word	0x08004b19
 8004ab8:	08004bdd 	.word	0x08004bdd
 8004abc:	08004bdd 	.word	0x08004bdd
 8004ac0:	08004bdd 	.word	0x08004bdd
 8004ac4:	08004b5b 	.word	0x08004b5b
 8004ac8:	08004bdd 	.word	0x08004bdd
 8004acc:	08004bdd 	.word	0x08004bdd
 8004ad0:	08004bdd 	.word	0x08004bdd
 8004ad4:	08004b9b 	.word	0x08004b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f000 fa24 	bl	8004f2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699a      	ldr	r2, [r3, #24]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0208 	orr.w	r2, r2, #8
 8004af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0204 	bic.w	r2, r2, #4
 8004b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6999      	ldr	r1, [r3, #24]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	430a      	orrs	r2, r1
 8004b14:	619a      	str	r2, [r3, #24]
      break;
 8004b16:	e064      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f000 fa74 	bl	800500c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	699a      	ldr	r2, [r3, #24]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6999      	ldr	r1, [r3, #24]
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	021a      	lsls	r2, r3, #8
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	430a      	orrs	r2, r1
 8004b56:	619a      	str	r2, [r3, #24]
      break;
 8004b58:	e043      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68b9      	ldr	r1, [r7, #8]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f000 fac9 	bl	80050f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	69da      	ldr	r2, [r3, #28]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0208 	orr.w	r2, r2, #8
 8004b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	69da      	ldr	r2, [r3, #28]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f022 0204 	bic.w	r2, r2, #4
 8004b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69d9      	ldr	r1, [r3, #28]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	61da      	str	r2, [r3, #28]
      break;
 8004b98:	e023      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	68b9      	ldr	r1, [r7, #8]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 fb1d 	bl	80051e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69da      	ldr	r2, [r3, #28]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	69da      	ldr	r2, [r3, #28]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69d9      	ldr	r1, [r3, #28]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	021a      	lsls	r2, r3, #8
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	61da      	str	r2, [r3, #28]
      break;
 8004bda:	e002      	b.n	8004be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	75fb      	strb	r3, [r7, #23]
      break;
 8004be0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d101      	bne.n	8004c10 <HAL_TIM_ConfigClockSource+0x1c>
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	e0b4      	b.n	8004d7a <HAL_TIM_ConfigClockSource+0x186>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c48:	d03e      	beq.n	8004cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8004c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4e:	f200 8087 	bhi.w	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c56:	f000 8086 	beq.w	8004d66 <HAL_TIM_ConfigClockSource+0x172>
 8004c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c5e:	d87f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c60:	2b70      	cmp	r3, #112	@ 0x70
 8004c62:	d01a      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0xa6>
 8004c64:	2b70      	cmp	r3, #112	@ 0x70
 8004c66:	d87b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c68:	2b60      	cmp	r3, #96	@ 0x60
 8004c6a:	d050      	beq.n	8004d0e <HAL_TIM_ConfigClockSource+0x11a>
 8004c6c:	2b60      	cmp	r3, #96	@ 0x60
 8004c6e:	d877      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c70:	2b50      	cmp	r3, #80	@ 0x50
 8004c72:	d03c      	beq.n	8004cee <HAL_TIM_ConfigClockSource+0xfa>
 8004c74:	2b50      	cmp	r3, #80	@ 0x50
 8004c76:	d873      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c78:	2b40      	cmp	r3, #64	@ 0x40
 8004c7a:	d058      	beq.n	8004d2e <HAL_TIM_ConfigClockSource+0x13a>
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	d86f      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c80:	2b30      	cmp	r3, #48	@ 0x30
 8004c82:	d064      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c84:	2b30      	cmp	r3, #48	@ 0x30
 8004c86:	d86b      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c88:	2b20      	cmp	r3, #32
 8004c8a:	d060      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c8c:	2b20      	cmp	r3, #32
 8004c8e:	d867      	bhi.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d05c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c94:	2b10      	cmp	r3, #16
 8004c96:	d05a      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0x15a>
 8004c98:	e062      	b.n	8004d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004caa:	f000 fb69 	bl	8005380 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	609a      	str	r2, [r3, #8]
      break;
 8004cc6:	e04f      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd8:	f000 fb52 	bl	8005380 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004cea:	609a      	str	r2, [r3, #8]
      break;
 8004cec:	e03c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cfa:	461a      	mov	r2, r3
 8004cfc:	f000 fac6 	bl	800528c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2150      	movs	r1, #80	@ 0x50
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 fb1f 	bl	800534a <TIM_ITRx_SetConfig>
      break;
 8004d0c:	e02c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f000 fae5 	bl	80052ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2160      	movs	r1, #96	@ 0x60
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 fb0f 	bl	800534a <TIM_ITRx_SetConfig>
      break;
 8004d2c:	e01c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	f000 faa6 	bl	800528c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	2140      	movs	r1, #64	@ 0x40
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 faff 	bl	800534a <TIM_ITRx_SetConfig>
      break;
 8004d4c:	e00c      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4619      	mov	r1, r3
 8004d58:	4610      	mov	r0, r2
 8004d5a:	f000 faf6 	bl	800534a <TIM_ITRx_SetConfig>
      break;
 8004d5e:	e003      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	73fb      	strb	r3, [r7, #15]
      break;
 8004d64:	e000      	b.n	8004d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3710      	adds	r7, #16
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b083      	sub	sp, #12
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b083      	sub	sp, #12
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d9e:	bf00      	nop
 8004da0:	370c      	adds	r7, #12
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004db2:	bf00      	nop
 8004db4:	370c      	adds	r7, #12
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr
	...

08004dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b085      	sub	sp, #20
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
 8004ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	4a46      	ldr	r2, [pc, #280]	@ (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d013      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004df2:	d00f      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a43      	ldr	r2, [pc, #268]	@ (8004f04 <TIM_Base_SetConfig+0x130>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00b      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a42      	ldr	r2, [pc, #264]	@ (8004f08 <TIM_Base_SetConfig+0x134>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d007      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a41      	ldr	r2, [pc, #260]	@ (8004f0c <TIM_Base_SetConfig+0x138>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d003      	beq.n	8004e14 <TIM_Base_SetConfig+0x40>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a40      	ldr	r2, [pc, #256]	@ (8004f10 <TIM_Base_SetConfig+0x13c>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d108      	bne.n	8004e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a35      	ldr	r2, [pc, #212]	@ (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02b      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e34:	d027      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a32      	ldr	r2, [pc, #200]	@ (8004f04 <TIM_Base_SetConfig+0x130>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d023      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a31      	ldr	r2, [pc, #196]	@ (8004f08 <TIM_Base_SetConfig+0x134>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01f      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a30      	ldr	r2, [pc, #192]	@ (8004f0c <TIM_Base_SetConfig+0x138>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d01b      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a2f      	ldr	r2, [pc, #188]	@ (8004f10 <TIM_Base_SetConfig+0x13c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d017      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a2e      	ldr	r2, [pc, #184]	@ (8004f14 <TIM_Base_SetConfig+0x140>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a2d      	ldr	r2, [pc, #180]	@ (8004f18 <TIM_Base_SetConfig+0x144>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00f      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a2c      	ldr	r2, [pc, #176]	@ (8004f1c <TIM_Base_SetConfig+0x148>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d00b      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	4a2b      	ldr	r2, [pc, #172]	@ (8004f20 <TIM_Base_SetConfig+0x14c>)
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d007      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a2a      	ldr	r2, [pc, #168]	@ (8004f24 <TIM_Base_SetConfig+0x150>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d003      	beq.n	8004e86 <TIM_Base_SetConfig+0xb2>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	4a29      	ldr	r2, [pc, #164]	@ (8004f28 <TIM_Base_SetConfig+0x154>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d108      	bne.n	8004e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	68fa      	ldr	r2, [r7, #12]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	689a      	ldr	r2, [r3, #8]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a10      	ldr	r2, [pc, #64]	@ (8004f00 <TIM_Base_SetConfig+0x12c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_Base_SetConfig+0xf8>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a12      	ldr	r2, [pc, #72]	@ (8004f10 <TIM_Base_SetConfig+0x13c>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d103      	bne.n	8004ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d105      	bne.n	8004ef2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f023 0201 	bic.w	r2, r3, #1
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	611a      	str	r2, [r3, #16]
  }
}
 8004ef2:	bf00      	nop
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	40010000 	.word	0x40010000
 8004f04:	40000400 	.word	0x40000400
 8004f08:	40000800 	.word	0x40000800
 8004f0c:	40000c00 	.word	0x40000c00
 8004f10:	40010400 	.word	0x40010400
 8004f14:	40014000 	.word	0x40014000
 8004f18:	40014400 	.word	0x40014400
 8004f1c:	40014800 	.word	0x40014800
 8004f20:	40001800 	.word	0x40001800
 8004f24:	40001c00 	.word	0x40001c00
 8004f28:	40002000 	.word	0x40002000

08004f2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b087      	sub	sp, #28
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a1b      	ldr	r3, [r3, #32]
 8004f3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a1b      	ldr	r3, [r3, #32]
 8004f40:	f023 0201 	bic.w	r2, r3, #1
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f023 0303 	bic.w	r3, r3, #3
 8004f62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f023 0302 	bic.w	r3, r3, #2
 8004f74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a20      	ldr	r2, [pc, #128]	@ (8005004 <TIM_OC1_SetConfig+0xd8>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_OC1_SetConfig+0x64>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005008 <TIM_OC1_SetConfig+0xdc>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10c      	bne.n	8004faa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f023 0308 	bic.w	r3, r3, #8
 8004f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f023 0304 	bic.w	r3, r3, #4
 8004fa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a15      	ldr	r2, [pc, #84]	@ (8005004 <TIM_OC1_SetConfig+0xd8>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d003      	beq.n	8004fba <TIM_OC1_SetConfig+0x8e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a14      	ldr	r2, [pc, #80]	@ (8005008 <TIM_OC1_SetConfig+0xdc>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d111      	bne.n	8004fde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	693a      	ldr	r2, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	621a      	str	r2, [r3, #32]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40010000 	.word	0x40010000
 8005008:	40010400 	.word	0x40010400

0800500c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	f023 0210 	bic.w	r2, r3, #16
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	699b      	ldr	r3, [r3, #24]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f023 0320 	bic.w	r3, r3, #32
 8005056:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	4313      	orrs	r3, r2
 8005062:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a22      	ldr	r2, [pc, #136]	@ (80050f0 <TIM_OC2_SetConfig+0xe4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC2_SetConfig+0x68>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a21      	ldr	r2, [pc, #132]	@ (80050f4 <TIM_OC2_SetConfig+0xe8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10d      	bne.n	8005090 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800507a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	011b      	lsls	r3, r3, #4
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800508e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a17      	ldr	r2, [pc, #92]	@ (80050f0 <TIM_OC2_SetConfig+0xe4>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d003      	beq.n	80050a0 <TIM_OC2_SetConfig+0x94>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a16      	ldr	r2, [pc, #88]	@ (80050f4 <TIM_OC2_SetConfig+0xe8>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d113      	bne.n	80050c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	695b      	ldr	r3, [r3, #20]
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	699b      	ldr	r3, [r3, #24]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	693a      	ldr	r2, [r7, #16]
 80050cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	40010000 	.word	0x40010000
 80050f4:	40010400 	.word	0x40010400

080050f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a1b      	ldr	r3, [r3, #32]
 800510c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0303 	bic.w	r3, r3, #3
 800512e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800513a:	697b      	ldr	r3, [r7, #20]
 800513c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005140:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	021b      	lsls	r3, r3, #8
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a21      	ldr	r2, [pc, #132]	@ (80051d8 <TIM_OC3_SetConfig+0xe0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_OC3_SetConfig+0x66>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a20      	ldr	r2, [pc, #128]	@ (80051dc <TIM_OC3_SetConfig+0xe4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d10d      	bne.n	800517a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a16      	ldr	r2, [pc, #88]	@ (80051d8 <TIM_OC3_SetConfig+0xe0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_OC3_SetConfig+0x92>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a15      	ldr	r2, [pc, #84]	@ (80051dc <TIM_OC3_SetConfig+0xe4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d113      	bne.n	80051b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	011b      	lsls	r3, r3, #4
 80051a0:	693a      	ldr	r2, [r7, #16]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	699b      	ldr	r3, [r3, #24]
 80051aa:	011b      	lsls	r3, r3, #4
 80051ac:	693a      	ldr	r2, [r7, #16]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	621a      	str	r2, [r3, #32]
}
 80051cc:	bf00      	nop
 80051ce:	371c      	adds	r7, #28
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40010000 	.word	0x40010000
 80051dc:	40010400 	.word	0x40010400

080051e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b087      	sub	sp, #28
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a1b      	ldr	r3, [r3, #32]
 80051ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a1b      	ldr	r3, [r3, #32]
 80051f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	69db      	ldr	r3, [r3, #28]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800520e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	021b      	lsls	r3, r3, #8
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800522a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	031b      	lsls	r3, r3, #12
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a12      	ldr	r2, [pc, #72]	@ (8005284 <TIM_OC4_SetConfig+0xa4>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC4_SetConfig+0x68>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a11      	ldr	r2, [pc, #68]	@ (8005288 <TIM_OC4_SetConfig+0xa8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d109      	bne.n	800525c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800524e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	019b      	lsls	r3, r3, #6
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	621a      	str	r2, [r3, #32]
}
 8005276:	bf00      	nop
 8005278:	371c      	adds	r7, #28
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400

0800528c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800528c:	b480      	push	{r7}
 800528e:	b087      	sub	sp, #28
 8005290:	af00      	add	r7, sp, #0
 8005292:	60f8      	str	r0, [r7, #12]
 8005294:	60b9      	str	r1, [r7, #8]
 8005296:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	f023 0201 	bic.w	r2, r3, #1
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80052b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	693a      	ldr	r2, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f023 030a 	bic.w	r3, r3, #10
 80052c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	693a      	ldr	r2, [r7, #16]
 80052d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	621a      	str	r2, [r3, #32]
}
 80052de:	bf00      	nop
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ea:	b480      	push	{r7}
 80052ec:	b087      	sub	sp, #28
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	f023 0210 	bic.w	r2, r3, #16
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	031b      	lsls	r3, r3, #12
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	4313      	orrs	r3, r2
 800531e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005326:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	011b      	lsls	r3, r3, #4
 800532c:	697a      	ldr	r2, [r7, #20]
 800532e:	4313      	orrs	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	621a      	str	r2, [r3, #32]
}
 800533e:	bf00      	nop
 8005340:	371c      	adds	r7, #28
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr

0800534a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800534a:	b480      	push	{r7}
 800534c:	b085      	sub	sp, #20
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
 8005352:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005360:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4313      	orrs	r3, r2
 8005368:	f043 0307 	orr.w	r3, r3, #7
 800536c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	609a      	str	r2, [r3, #8]
}
 8005374:	bf00      	nop
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800539a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	021a      	lsls	r2, r3, #8
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	609a      	str	r2, [r3, #8]
}
 80053b4:	bf00      	nop
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b087      	sub	sp, #28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	f003 031f 	and.w	r3, r3, #31
 80053d2:	2201      	movs	r2, #1
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	6a1a      	ldr	r2, [r3, #32]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	401a      	ands	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	f003 031f 	and.w	r3, r3, #31
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	fa01 f303 	lsl.w	r3, r1, r3
 80053f8:	431a      	orrs	r2, r3
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	621a      	str	r2, [r3, #32]
}
 80053fe:	bf00      	nop
 8005400:	371c      	adds	r7, #28
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr
	...

0800540c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005420:	2302      	movs	r3, #2
 8005422:	e05a      	b.n	80054da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2202      	movs	r2, #2
 8005430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800544a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	4313      	orrs	r3, r2
 8005454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a21      	ldr	r2, [pc, #132]	@ (80054e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d022      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005470:	d01d      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a1d      	ldr	r2, [pc, #116]	@ (80054ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d018      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	4a1b      	ldr	r2, [pc, #108]	@ (80054f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d013      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a1a      	ldr	r2, [pc, #104]	@ (80054f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00e      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a18      	ldr	r2, [pc, #96]	@ (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d009      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4a17      	ldr	r2, [pc, #92]	@ (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d004      	beq.n	80054ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4a15      	ldr	r2, [pc, #84]	@ (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d10c      	bne.n	80054c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	68ba      	ldr	r2, [r7, #8]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80054d8:	2300      	movs	r3, #0
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3714      	adds	r7, #20
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40010000 	.word	0x40010000
 80054ec:	40000400 	.word	0x40000400
 80054f0:	40000800 	.word	0x40000800
 80054f4:	40000c00 	.word	0x40000c00
 80054f8:	40010400 	.word	0x40010400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40001800 	.word	0x40001800

08005504 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005518:	b480      	push	{r7}
 800551a:	b083      	sub	sp, #12
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005520:	bf00      	nop
 8005522:	370c      	adds	r7, #12
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <siprintf>:
 800552c:	b40e      	push	{r1, r2, r3}
 800552e:	b500      	push	{lr}
 8005530:	b09c      	sub	sp, #112	@ 0x70
 8005532:	ab1d      	add	r3, sp, #116	@ 0x74
 8005534:	9002      	str	r0, [sp, #8]
 8005536:	9006      	str	r0, [sp, #24]
 8005538:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800553c:	4809      	ldr	r0, [pc, #36]	@ (8005564 <siprintf+0x38>)
 800553e:	9107      	str	r1, [sp, #28]
 8005540:	9104      	str	r1, [sp, #16]
 8005542:	4909      	ldr	r1, [pc, #36]	@ (8005568 <siprintf+0x3c>)
 8005544:	f853 2b04 	ldr.w	r2, [r3], #4
 8005548:	9105      	str	r1, [sp, #20]
 800554a:	6800      	ldr	r0, [r0, #0]
 800554c:	9301      	str	r3, [sp, #4]
 800554e:	a902      	add	r1, sp, #8
 8005550:	f000 f994 	bl	800587c <_svfiprintf_r>
 8005554:	9b02      	ldr	r3, [sp, #8]
 8005556:	2200      	movs	r2, #0
 8005558:	701a      	strb	r2, [r3, #0]
 800555a:	b01c      	add	sp, #112	@ 0x70
 800555c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005560:	b003      	add	sp, #12
 8005562:	4770      	bx	lr
 8005564:	2000001c 	.word	0x2000001c
 8005568:	ffff0208 	.word	0xffff0208

0800556c <memset>:
 800556c:	4402      	add	r2, r0
 800556e:	4603      	mov	r3, r0
 8005570:	4293      	cmp	r3, r2
 8005572:	d100      	bne.n	8005576 <memset+0xa>
 8005574:	4770      	bx	lr
 8005576:	f803 1b01 	strb.w	r1, [r3], #1
 800557a:	e7f9      	b.n	8005570 <memset+0x4>

0800557c <__errno>:
 800557c:	4b01      	ldr	r3, [pc, #4]	@ (8005584 <__errno+0x8>)
 800557e:	6818      	ldr	r0, [r3, #0]
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	2000001c 	.word	0x2000001c

08005588 <__libc_init_array>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4d0d      	ldr	r5, [pc, #52]	@ (80055c0 <__libc_init_array+0x38>)
 800558c:	4c0d      	ldr	r4, [pc, #52]	@ (80055c4 <__libc_init_array+0x3c>)
 800558e:	1b64      	subs	r4, r4, r5
 8005590:	10a4      	asrs	r4, r4, #2
 8005592:	2600      	movs	r6, #0
 8005594:	42a6      	cmp	r6, r4
 8005596:	d109      	bne.n	80055ac <__libc_init_array+0x24>
 8005598:	4d0b      	ldr	r5, [pc, #44]	@ (80055c8 <__libc_init_array+0x40>)
 800559a:	4c0c      	ldr	r4, [pc, #48]	@ (80055cc <__libc_init_array+0x44>)
 800559c:	f000 fc66 	bl	8005e6c <_init>
 80055a0:	1b64      	subs	r4, r4, r5
 80055a2:	10a4      	asrs	r4, r4, #2
 80055a4:	2600      	movs	r6, #0
 80055a6:	42a6      	cmp	r6, r4
 80055a8:	d105      	bne.n	80055b6 <__libc_init_array+0x2e>
 80055aa:	bd70      	pop	{r4, r5, r6, pc}
 80055ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b0:	4798      	blx	r3
 80055b2:	3601      	adds	r6, #1
 80055b4:	e7ee      	b.n	8005594 <__libc_init_array+0xc>
 80055b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ba:	4798      	blx	r3
 80055bc:	3601      	adds	r6, #1
 80055be:	e7f2      	b.n	80055a6 <__libc_init_array+0x1e>
 80055c0:	08005f5c 	.word	0x08005f5c
 80055c4:	08005f5c 	.word	0x08005f5c
 80055c8:	08005f5c 	.word	0x08005f5c
 80055cc:	08005f60 	.word	0x08005f60

080055d0 <__retarget_lock_acquire_recursive>:
 80055d0:	4770      	bx	lr

080055d2 <__retarget_lock_release_recursive>:
 80055d2:	4770      	bx	lr

080055d4 <_free_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4605      	mov	r5, r0
 80055d8:	2900      	cmp	r1, #0
 80055da:	d041      	beq.n	8005660 <_free_r+0x8c>
 80055dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055e0:	1f0c      	subs	r4, r1, #4
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	bfb8      	it	lt
 80055e6:	18e4      	addlt	r4, r4, r3
 80055e8:	f000 f8e0 	bl	80057ac <__malloc_lock>
 80055ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005664 <_free_r+0x90>)
 80055ee:	6813      	ldr	r3, [r2, #0]
 80055f0:	b933      	cbnz	r3, 8005600 <_free_r+0x2c>
 80055f2:	6063      	str	r3, [r4, #4]
 80055f4:	6014      	str	r4, [r2, #0]
 80055f6:	4628      	mov	r0, r5
 80055f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80055fc:	f000 b8dc 	b.w	80057b8 <__malloc_unlock>
 8005600:	42a3      	cmp	r3, r4
 8005602:	d908      	bls.n	8005616 <_free_r+0x42>
 8005604:	6820      	ldr	r0, [r4, #0]
 8005606:	1821      	adds	r1, r4, r0
 8005608:	428b      	cmp	r3, r1
 800560a:	bf01      	itttt	eq
 800560c:	6819      	ldreq	r1, [r3, #0]
 800560e:	685b      	ldreq	r3, [r3, #4]
 8005610:	1809      	addeq	r1, r1, r0
 8005612:	6021      	streq	r1, [r4, #0]
 8005614:	e7ed      	b.n	80055f2 <_free_r+0x1e>
 8005616:	461a      	mov	r2, r3
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	b10b      	cbz	r3, 8005620 <_free_r+0x4c>
 800561c:	42a3      	cmp	r3, r4
 800561e:	d9fa      	bls.n	8005616 <_free_r+0x42>
 8005620:	6811      	ldr	r1, [r2, #0]
 8005622:	1850      	adds	r0, r2, r1
 8005624:	42a0      	cmp	r0, r4
 8005626:	d10b      	bne.n	8005640 <_free_r+0x6c>
 8005628:	6820      	ldr	r0, [r4, #0]
 800562a:	4401      	add	r1, r0
 800562c:	1850      	adds	r0, r2, r1
 800562e:	4283      	cmp	r3, r0
 8005630:	6011      	str	r1, [r2, #0]
 8005632:	d1e0      	bne.n	80055f6 <_free_r+0x22>
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	6053      	str	r3, [r2, #4]
 800563a:	4408      	add	r0, r1
 800563c:	6010      	str	r0, [r2, #0]
 800563e:	e7da      	b.n	80055f6 <_free_r+0x22>
 8005640:	d902      	bls.n	8005648 <_free_r+0x74>
 8005642:	230c      	movs	r3, #12
 8005644:	602b      	str	r3, [r5, #0]
 8005646:	e7d6      	b.n	80055f6 <_free_r+0x22>
 8005648:	6820      	ldr	r0, [r4, #0]
 800564a:	1821      	adds	r1, r4, r0
 800564c:	428b      	cmp	r3, r1
 800564e:	bf04      	itt	eq
 8005650:	6819      	ldreq	r1, [r3, #0]
 8005652:	685b      	ldreq	r3, [r3, #4]
 8005654:	6063      	str	r3, [r4, #4]
 8005656:	bf04      	itt	eq
 8005658:	1809      	addeq	r1, r1, r0
 800565a:	6021      	streq	r1, [r4, #0]
 800565c:	6054      	str	r4, [r2, #4]
 800565e:	e7ca      	b.n	80055f6 <_free_r+0x22>
 8005660:	bd38      	pop	{r3, r4, r5, pc}
 8005662:	bf00      	nop
 8005664:	2000037c 	.word	0x2000037c

08005668 <sbrk_aligned>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	4e0f      	ldr	r6, [pc, #60]	@ (80056a8 <sbrk_aligned+0x40>)
 800566c:	460c      	mov	r4, r1
 800566e:	6831      	ldr	r1, [r6, #0]
 8005670:	4605      	mov	r5, r0
 8005672:	b911      	cbnz	r1, 800567a <sbrk_aligned+0x12>
 8005674:	f000 fba6 	bl	8005dc4 <_sbrk_r>
 8005678:	6030      	str	r0, [r6, #0]
 800567a:	4621      	mov	r1, r4
 800567c:	4628      	mov	r0, r5
 800567e:	f000 fba1 	bl	8005dc4 <_sbrk_r>
 8005682:	1c43      	adds	r3, r0, #1
 8005684:	d103      	bne.n	800568e <sbrk_aligned+0x26>
 8005686:	f04f 34ff 	mov.w	r4, #4294967295
 800568a:	4620      	mov	r0, r4
 800568c:	bd70      	pop	{r4, r5, r6, pc}
 800568e:	1cc4      	adds	r4, r0, #3
 8005690:	f024 0403 	bic.w	r4, r4, #3
 8005694:	42a0      	cmp	r0, r4
 8005696:	d0f8      	beq.n	800568a <sbrk_aligned+0x22>
 8005698:	1a21      	subs	r1, r4, r0
 800569a:	4628      	mov	r0, r5
 800569c:	f000 fb92 	bl	8005dc4 <_sbrk_r>
 80056a0:	3001      	adds	r0, #1
 80056a2:	d1f2      	bne.n	800568a <sbrk_aligned+0x22>
 80056a4:	e7ef      	b.n	8005686 <sbrk_aligned+0x1e>
 80056a6:	bf00      	nop
 80056a8:	20000378 	.word	0x20000378

080056ac <_malloc_r>:
 80056ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b0:	1ccd      	adds	r5, r1, #3
 80056b2:	f025 0503 	bic.w	r5, r5, #3
 80056b6:	3508      	adds	r5, #8
 80056b8:	2d0c      	cmp	r5, #12
 80056ba:	bf38      	it	cc
 80056bc:	250c      	movcc	r5, #12
 80056be:	2d00      	cmp	r5, #0
 80056c0:	4606      	mov	r6, r0
 80056c2:	db01      	blt.n	80056c8 <_malloc_r+0x1c>
 80056c4:	42a9      	cmp	r1, r5
 80056c6:	d904      	bls.n	80056d2 <_malloc_r+0x26>
 80056c8:	230c      	movs	r3, #12
 80056ca:	6033      	str	r3, [r6, #0]
 80056cc:	2000      	movs	r0, #0
 80056ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80057a8 <_malloc_r+0xfc>
 80056d6:	f000 f869 	bl	80057ac <__malloc_lock>
 80056da:	f8d8 3000 	ldr.w	r3, [r8]
 80056de:	461c      	mov	r4, r3
 80056e0:	bb44      	cbnz	r4, 8005734 <_malloc_r+0x88>
 80056e2:	4629      	mov	r1, r5
 80056e4:	4630      	mov	r0, r6
 80056e6:	f7ff ffbf 	bl	8005668 <sbrk_aligned>
 80056ea:	1c43      	adds	r3, r0, #1
 80056ec:	4604      	mov	r4, r0
 80056ee:	d158      	bne.n	80057a2 <_malloc_r+0xf6>
 80056f0:	f8d8 4000 	ldr.w	r4, [r8]
 80056f4:	4627      	mov	r7, r4
 80056f6:	2f00      	cmp	r7, #0
 80056f8:	d143      	bne.n	8005782 <_malloc_r+0xd6>
 80056fa:	2c00      	cmp	r4, #0
 80056fc:	d04b      	beq.n	8005796 <_malloc_r+0xea>
 80056fe:	6823      	ldr	r3, [r4, #0]
 8005700:	4639      	mov	r1, r7
 8005702:	4630      	mov	r0, r6
 8005704:	eb04 0903 	add.w	r9, r4, r3
 8005708:	f000 fb5c 	bl	8005dc4 <_sbrk_r>
 800570c:	4581      	cmp	r9, r0
 800570e:	d142      	bne.n	8005796 <_malloc_r+0xea>
 8005710:	6821      	ldr	r1, [r4, #0]
 8005712:	1a6d      	subs	r5, r5, r1
 8005714:	4629      	mov	r1, r5
 8005716:	4630      	mov	r0, r6
 8005718:	f7ff ffa6 	bl	8005668 <sbrk_aligned>
 800571c:	3001      	adds	r0, #1
 800571e:	d03a      	beq.n	8005796 <_malloc_r+0xea>
 8005720:	6823      	ldr	r3, [r4, #0]
 8005722:	442b      	add	r3, r5
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	f8d8 3000 	ldr.w	r3, [r8]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	bb62      	cbnz	r2, 8005788 <_malloc_r+0xdc>
 800572e:	f8c8 7000 	str.w	r7, [r8]
 8005732:	e00f      	b.n	8005754 <_malloc_r+0xa8>
 8005734:	6822      	ldr	r2, [r4, #0]
 8005736:	1b52      	subs	r2, r2, r5
 8005738:	d420      	bmi.n	800577c <_malloc_r+0xd0>
 800573a:	2a0b      	cmp	r2, #11
 800573c:	d917      	bls.n	800576e <_malloc_r+0xc2>
 800573e:	1961      	adds	r1, r4, r5
 8005740:	42a3      	cmp	r3, r4
 8005742:	6025      	str	r5, [r4, #0]
 8005744:	bf18      	it	ne
 8005746:	6059      	strne	r1, [r3, #4]
 8005748:	6863      	ldr	r3, [r4, #4]
 800574a:	bf08      	it	eq
 800574c:	f8c8 1000 	streq.w	r1, [r8]
 8005750:	5162      	str	r2, [r4, r5]
 8005752:	604b      	str	r3, [r1, #4]
 8005754:	4630      	mov	r0, r6
 8005756:	f000 f82f 	bl	80057b8 <__malloc_unlock>
 800575a:	f104 000b 	add.w	r0, r4, #11
 800575e:	1d23      	adds	r3, r4, #4
 8005760:	f020 0007 	bic.w	r0, r0, #7
 8005764:	1ac2      	subs	r2, r0, r3
 8005766:	bf1c      	itt	ne
 8005768:	1a1b      	subne	r3, r3, r0
 800576a:	50a3      	strne	r3, [r4, r2]
 800576c:	e7af      	b.n	80056ce <_malloc_r+0x22>
 800576e:	6862      	ldr	r2, [r4, #4]
 8005770:	42a3      	cmp	r3, r4
 8005772:	bf0c      	ite	eq
 8005774:	f8c8 2000 	streq.w	r2, [r8]
 8005778:	605a      	strne	r2, [r3, #4]
 800577a:	e7eb      	b.n	8005754 <_malloc_r+0xa8>
 800577c:	4623      	mov	r3, r4
 800577e:	6864      	ldr	r4, [r4, #4]
 8005780:	e7ae      	b.n	80056e0 <_malloc_r+0x34>
 8005782:	463c      	mov	r4, r7
 8005784:	687f      	ldr	r7, [r7, #4]
 8005786:	e7b6      	b.n	80056f6 <_malloc_r+0x4a>
 8005788:	461a      	mov	r2, r3
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	42a3      	cmp	r3, r4
 800578e:	d1fb      	bne.n	8005788 <_malloc_r+0xdc>
 8005790:	2300      	movs	r3, #0
 8005792:	6053      	str	r3, [r2, #4]
 8005794:	e7de      	b.n	8005754 <_malloc_r+0xa8>
 8005796:	230c      	movs	r3, #12
 8005798:	6033      	str	r3, [r6, #0]
 800579a:	4630      	mov	r0, r6
 800579c:	f000 f80c 	bl	80057b8 <__malloc_unlock>
 80057a0:	e794      	b.n	80056cc <_malloc_r+0x20>
 80057a2:	6005      	str	r5, [r0, #0]
 80057a4:	e7d6      	b.n	8005754 <_malloc_r+0xa8>
 80057a6:	bf00      	nop
 80057a8:	2000037c 	.word	0x2000037c

080057ac <__malloc_lock>:
 80057ac:	4801      	ldr	r0, [pc, #4]	@ (80057b4 <__malloc_lock+0x8>)
 80057ae:	f7ff bf0f 	b.w	80055d0 <__retarget_lock_acquire_recursive>
 80057b2:	bf00      	nop
 80057b4:	20000374 	.word	0x20000374

080057b8 <__malloc_unlock>:
 80057b8:	4801      	ldr	r0, [pc, #4]	@ (80057c0 <__malloc_unlock+0x8>)
 80057ba:	f7ff bf0a 	b.w	80055d2 <__retarget_lock_release_recursive>
 80057be:	bf00      	nop
 80057c0:	20000374 	.word	0x20000374

080057c4 <__ssputs_r>:
 80057c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c8:	688e      	ldr	r6, [r1, #8]
 80057ca:	461f      	mov	r7, r3
 80057cc:	42be      	cmp	r6, r7
 80057ce:	680b      	ldr	r3, [r1, #0]
 80057d0:	4682      	mov	sl, r0
 80057d2:	460c      	mov	r4, r1
 80057d4:	4690      	mov	r8, r2
 80057d6:	d82d      	bhi.n	8005834 <__ssputs_r+0x70>
 80057d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80057dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80057e0:	d026      	beq.n	8005830 <__ssputs_r+0x6c>
 80057e2:	6965      	ldr	r5, [r4, #20]
 80057e4:	6909      	ldr	r1, [r1, #16]
 80057e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057ea:	eba3 0901 	sub.w	r9, r3, r1
 80057ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057f2:	1c7b      	adds	r3, r7, #1
 80057f4:	444b      	add	r3, r9
 80057f6:	106d      	asrs	r5, r5, #1
 80057f8:	429d      	cmp	r5, r3
 80057fa:	bf38      	it	cc
 80057fc:	461d      	movcc	r5, r3
 80057fe:	0553      	lsls	r3, r2, #21
 8005800:	d527      	bpl.n	8005852 <__ssputs_r+0x8e>
 8005802:	4629      	mov	r1, r5
 8005804:	f7ff ff52 	bl	80056ac <_malloc_r>
 8005808:	4606      	mov	r6, r0
 800580a:	b360      	cbz	r0, 8005866 <__ssputs_r+0xa2>
 800580c:	6921      	ldr	r1, [r4, #16]
 800580e:	464a      	mov	r2, r9
 8005810:	f000 fae8 	bl	8005de4 <memcpy>
 8005814:	89a3      	ldrh	r3, [r4, #12]
 8005816:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800581a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800581e:	81a3      	strh	r3, [r4, #12]
 8005820:	6126      	str	r6, [r4, #16]
 8005822:	6165      	str	r5, [r4, #20]
 8005824:	444e      	add	r6, r9
 8005826:	eba5 0509 	sub.w	r5, r5, r9
 800582a:	6026      	str	r6, [r4, #0]
 800582c:	60a5      	str	r5, [r4, #8]
 800582e:	463e      	mov	r6, r7
 8005830:	42be      	cmp	r6, r7
 8005832:	d900      	bls.n	8005836 <__ssputs_r+0x72>
 8005834:	463e      	mov	r6, r7
 8005836:	6820      	ldr	r0, [r4, #0]
 8005838:	4632      	mov	r2, r6
 800583a:	4641      	mov	r1, r8
 800583c:	f000 faa8 	bl	8005d90 <memmove>
 8005840:	68a3      	ldr	r3, [r4, #8]
 8005842:	1b9b      	subs	r3, r3, r6
 8005844:	60a3      	str	r3, [r4, #8]
 8005846:	6823      	ldr	r3, [r4, #0]
 8005848:	4433      	add	r3, r6
 800584a:	6023      	str	r3, [r4, #0]
 800584c:	2000      	movs	r0, #0
 800584e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005852:	462a      	mov	r2, r5
 8005854:	f000 fad4 	bl	8005e00 <_realloc_r>
 8005858:	4606      	mov	r6, r0
 800585a:	2800      	cmp	r0, #0
 800585c:	d1e0      	bne.n	8005820 <__ssputs_r+0x5c>
 800585e:	6921      	ldr	r1, [r4, #16]
 8005860:	4650      	mov	r0, sl
 8005862:	f7ff feb7 	bl	80055d4 <_free_r>
 8005866:	230c      	movs	r3, #12
 8005868:	f8ca 3000 	str.w	r3, [sl]
 800586c:	89a3      	ldrh	r3, [r4, #12]
 800586e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005872:	81a3      	strh	r3, [r4, #12]
 8005874:	f04f 30ff 	mov.w	r0, #4294967295
 8005878:	e7e9      	b.n	800584e <__ssputs_r+0x8a>
	...

0800587c <_svfiprintf_r>:
 800587c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005880:	4698      	mov	r8, r3
 8005882:	898b      	ldrh	r3, [r1, #12]
 8005884:	061b      	lsls	r3, r3, #24
 8005886:	b09d      	sub	sp, #116	@ 0x74
 8005888:	4607      	mov	r7, r0
 800588a:	460d      	mov	r5, r1
 800588c:	4614      	mov	r4, r2
 800588e:	d510      	bpl.n	80058b2 <_svfiprintf_r+0x36>
 8005890:	690b      	ldr	r3, [r1, #16]
 8005892:	b973      	cbnz	r3, 80058b2 <_svfiprintf_r+0x36>
 8005894:	2140      	movs	r1, #64	@ 0x40
 8005896:	f7ff ff09 	bl	80056ac <_malloc_r>
 800589a:	6028      	str	r0, [r5, #0]
 800589c:	6128      	str	r0, [r5, #16]
 800589e:	b930      	cbnz	r0, 80058ae <_svfiprintf_r+0x32>
 80058a0:	230c      	movs	r3, #12
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	f04f 30ff 	mov.w	r0, #4294967295
 80058a8:	b01d      	add	sp, #116	@ 0x74
 80058aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ae:	2340      	movs	r3, #64	@ 0x40
 80058b0:	616b      	str	r3, [r5, #20]
 80058b2:	2300      	movs	r3, #0
 80058b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80058b6:	2320      	movs	r3, #32
 80058b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80058bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80058c0:	2330      	movs	r3, #48	@ 0x30
 80058c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005a60 <_svfiprintf_r+0x1e4>
 80058c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80058ca:	f04f 0901 	mov.w	r9, #1
 80058ce:	4623      	mov	r3, r4
 80058d0:	469a      	mov	sl, r3
 80058d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058d6:	b10a      	cbz	r2, 80058dc <_svfiprintf_r+0x60>
 80058d8:	2a25      	cmp	r2, #37	@ 0x25
 80058da:	d1f9      	bne.n	80058d0 <_svfiprintf_r+0x54>
 80058dc:	ebba 0b04 	subs.w	fp, sl, r4
 80058e0:	d00b      	beq.n	80058fa <_svfiprintf_r+0x7e>
 80058e2:	465b      	mov	r3, fp
 80058e4:	4622      	mov	r2, r4
 80058e6:	4629      	mov	r1, r5
 80058e8:	4638      	mov	r0, r7
 80058ea:	f7ff ff6b 	bl	80057c4 <__ssputs_r>
 80058ee:	3001      	adds	r0, #1
 80058f0:	f000 80a7 	beq.w	8005a42 <_svfiprintf_r+0x1c6>
 80058f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058f6:	445a      	add	r2, fp
 80058f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80058fa:	f89a 3000 	ldrb.w	r3, [sl]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 809f 	beq.w	8005a42 <_svfiprintf_r+0x1c6>
 8005904:	2300      	movs	r3, #0
 8005906:	f04f 32ff 	mov.w	r2, #4294967295
 800590a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800590e:	f10a 0a01 	add.w	sl, sl, #1
 8005912:	9304      	str	r3, [sp, #16]
 8005914:	9307      	str	r3, [sp, #28]
 8005916:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800591a:	931a      	str	r3, [sp, #104]	@ 0x68
 800591c:	4654      	mov	r4, sl
 800591e:	2205      	movs	r2, #5
 8005920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005924:	484e      	ldr	r0, [pc, #312]	@ (8005a60 <_svfiprintf_r+0x1e4>)
 8005926:	f7fa fc73 	bl	8000210 <memchr>
 800592a:	9a04      	ldr	r2, [sp, #16]
 800592c:	b9d8      	cbnz	r0, 8005966 <_svfiprintf_r+0xea>
 800592e:	06d0      	lsls	r0, r2, #27
 8005930:	bf44      	itt	mi
 8005932:	2320      	movmi	r3, #32
 8005934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005938:	0711      	lsls	r1, r2, #28
 800593a:	bf44      	itt	mi
 800593c:	232b      	movmi	r3, #43	@ 0x2b
 800593e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005942:	f89a 3000 	ldrb.w	r3, [sl]
 8005946:	2b2a      	cmp	r3, #42	@ 0x2a
 8005948:	d015      	beq.n	8005976 <_svfiprintf_r+0xfa>
 800594a:	9a07      	ldr	r2, [sp, #28]
 800594c:	4654      	mov	r4, sl
 800594e:	2000      	movs	r0, #0
 8005950:	f04f 0c0a 	mov.w	ip, #10
 8005954:	4621      	mov	r1, r4
 8005956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800595a:	3b30      	subs	r3, #48	@ 0x30
 800595c:	2b09      	cmp	r3, #9
 800595e:	d94b      	bls.n	80059f8 <_svfiprintf_r+0x17c>
 8005960:	b1b0      	cbz	r0, 8005990 <_svfiprintf_r+0x114>
 8005962:	9207      	str	r2, [sp, #28]
 8005964:	e014      	b.n	8005990 <_svfiprintf_r+0x114>
 8005966:	eba0 0308 	sub.w	r3, r0, r8
 800596a:	fa09 f303 	lsl.w	r3, r9, r3
 800596e:	4313      	orrs	r3, r2
 8005970:	9304      	str	r3, [sp, #16]
 8005972:	46a2      	mov	sl, r4
 8005974:	e7d2      	b.n	800591c <_svfiprintf_r+0xa0>
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	1d19      	adds	r1, r3, #4
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	9103      	str	r1, [sp, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfbb      	ittet	lt
 8005982:	425b      	neglt	r3, r3
 8005984:	f042 0202 	orrlt.w	r2, r2, #2
 8005988:	9307      	strge	r3, [sp, #28]
 800598a:	9307      	strlt	r3, [sp, #28]
 800598c:	bfb8      	it	lt
 800598e:	9204      	strlt	r2, [sp, #16]
 8005990:	7823      	ldrb	r3, [r4, #0]
 8005992:	2b2e      	cmp	r3, #46	@ 0x2e
 8005994:	d10a      	bne.n	80059ac <_svfiprintf_r+0x130>
 8005996:	7863      	ldrb	r3, [r4, #1]
 8005998:	2b2a      	cmp	r3, #42	@ 0x2a
 800599a:	d132      	bne.n	8005a02 <_svfiprintf_r+0x186>
 800599c:	9b03      	ldr	r3, [sp, #12]
 800599e:	1d1a      	adds	r2, r3, #4
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	9203      	str	r2, [sp, #12]
 80059a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80059a8:	3402      	adds	r4, #2
 80059aa:	9305      	str	r3, [sp, #20]
 80059ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005a70 <_svfiprintf_r+0x1f4>
 80059b0:	7821      	ldrb	r1, [r4, #0]
 80059b2:	2203      	movs	r2, #3
 80059b4:	4650      	mov	r0, sl
 80059b6:	f7fa fc2b 	bl	8000210 <memchr>
 80059ba:	b138      	cbz	r0, 80059cc <_svfiprintf_r+0x150>
 80059bc:	9b04      	ldr	r3, [sp, #16]
 80059be:	eba0 000a 	sub.w	r0, r0, sl
 80059c2:	2240      	movs	r2, #64	@ 0x40
 80059c4:	4082      	lsls	r2, r0
 80059c6:	4313      	orrs	r3, r2
 80059c8:	3401      	adds	r4, #1
 80059ca:	9304      	str	r3, [sp, #16]
 80059cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059d0:	4824      	ldr	r0, [pc, #144]	@ (8005a64 <_svfiprintf_r+0x1e8>)
 80059d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80059d6:	2206      	movs	r2, #6
 80059d8:	f7fa fc1a 	bl	8000210 <memchr>
 80059dc:	2800      	cmp	r0, #0
 80059de:	d036      	beq.n	8005a4e <_svfiprintf_r+0x1d2>
 80059e0:	4b21      	ldr	r3, [pc, #132]	@ (8005a68 <_svfiprintf_r+0x1ec>)
 80059e2:	bb1b      	cbnz	r3, 8005a2c <_svfiprintf_r+0x1b0>
 80059e4:	9b03      	ldr	r3, [sp, #12]
 80059e6:	3307      	adds	r3, #7
 80059e8:	f023 0307 	bic.w	r3, r3, #7
 80059ec:	3308      	adds	r3, #8
 80059ee:	9303      	str	r3, [sp, #12]
 80059f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059f2:	4433      	add	r3, r6
 80059f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80059f6:	e76a      	b.n	80058ce <_svfiprintf_r+0x52>
 80059f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80059fc:	460c      	mov	r4, r1
 80059fe:	2001      	movs	r0, #1
 8005a00:	e7a8      	b.n	8005954 <_svfiprintf_r+0xd8>
 8005a02:	2300      	movs	r3, #0
 8005a04:	3401      	adds	r4, #1
 8005a06:	9305      	str	r3, [sp, #20]
 8005a08:	4619      	mov	r1, r3
 8005a0a:	f04f 0c0a 	mov.w	ip, #10
 8005a0e:	4620      	mov	r0, r4
 8005a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a14:	3a30      	subs	r2, #48	@ 0x30
 8005a16:	2a09      	cmp	r2, #9
 8005a18:	d903      	bls.n	8005a22 <_svfiprintf_r+0x1a6>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d0c6      	beq.n	80059ac <_svfiprintf_r+0x130>
 8005a1e:	9105      	str	r1, [sp, #20]
 8005a20:	e7c4      	b.n	80059ac <_svfiprintf_r+0x130>
 8005a22:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a26:	4604      	mov	r4, r0
 8005a28:	2301      	movs	r3, #1
 8005a2a:	e7f0      	b.n	8005a0e <_svfiprintf_r+0x192>
 8005a2c:	ab03      	add	r3, sp, #12
 8005a2e:	9300      	str	r3, [sp, #0]
 8005a30:	462a      	mov	r2, r5
 8005a32:	4b0e      	ldr	r3, [pc, #56]	@ (8005a6c <_svfiprintf_r+0x1f0>)
 8005a34:	a904      	add	r1, sp, #16
 8005a36:	4638      	mov	r0, r7
 8005a38:	f3af 8000 	nop.w
 8005a3c:	1c42      	adds	r2, r0, #1
 8005a3e:	4606      	mov	r6, r0
 8005a40:	d1d6      	bne.n	80059f0 <_svfiprintf_r+0x174>
 8005a42:	89ab      	ldrh	r3, [r5, #12]
 8005a44:	065b      	lsls	r3, r3, #25
 8005a46:	f53f af2d 	bmi.w	80058a4 <_svfiprintf_r+0x28>
 8005a4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005a4c:	e72c      	b.n	80058a8 <_svfiprintf_r+0x2c>
 8005a4e:	ab03      	add	r3, sp, #12
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	462a      	mov	r2, r5
 8005a54:	4b05      	ldr	r3, [pc, #20]	@ (8005a6c <_svfiprintf_r+0x1f0>)
 8005a56:	a904      	add	r1, sp, #16
 8005a58:	4638      	mov	r0, r7
 8005a5a:	f000 f879 	bl	8005b50 <_printf_i>
 8005a5e:	e7ed      	b.n	8005a3c <_svfiprintf_r+0x1c0>
 8005a60:	08005f20 	.word	0x08005f20
 8005a64:	08005f2a 	.word	0x08005f2a
 8005a68:	00000000 	.word	0x00000000
 8005a6c:	080057c5 	.word	0x080057c5
 8005a70:	08005f26 	.word	0x08005f26

08005a74 <_printf_common>:
 8005a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	4616      	mov	r6, r2
 8005a7a:	4698      	mov	r8, r3
 8005a7c:	688a      	ldr	r2, [r1, #8]
 8005a7e:	690b      	ldr	r3, [r1, #16]
 8005a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a84:	4293      	cmp	r3, r2
 8005a86:	bfb8      	it	lt
 8005a88:	4613      	movlt	r3, r2
 8005a8a:	6033      	str	r3, [r6, #0]
 8005a8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a90:	4607      	mov	r7, r0
 8005a92:	460c      	mov	r4, r1
 8005a94:	b10a      	cbz	r2, 8005a9a <_printf_common+0x26>
 8005a96:	3301      	adds	r3, #1
 8005a98:	6033      	str	r3, [r6, #0]
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	0699      	lsls	r1, r3, #26
 8005a9e:	bf42      	ittt	mi
 8005aa0:	6833      	ldrmi	r3, [r6, #0]
 8005aa2:	3302      	addmi	r3, #2
 8005aa4:	6033      	strmi	r3, [r6, #0]
 8005aa6:	6825      	ldr	r5, [r4, #0]
 8005aa8:	f015 0506 	ands.w	r5, r5, #6
 8005aac:	d106      	bne.n	8005abc <_printf_common+0x48>
 8005aae:	f104 0a19 	add.w	sl, r4, #25
 8005ab2:	68e3      	ldr	r3, [r4, #12]
 8005ab4:	6832      	ldr	r2, [r6, #0]
 8005ab6:	1a9b      	subs	r3, r3, r2
 8005ab8:	42ab      	cmp	r3, r5
 8005aba:	dc26      	bgt.n	8005b0a <_printf_common+0x96>
 8005abc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ac0:	6822      	ldr	r2, [r4, #0]
 8005ac2:	3b00      	subs	r3, #0
 8005ac4:	bf18      	it	ne
 8005ac6:	2301      	movne	r3, #1
 8005ac8:	0692      	lsls	r2, r2, #26
 8005aca:	d42b      	bmi.n	8005b24 <_printf_common+0xb0>
 8005acc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005ad0:	4641      	mov	r1, r8
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	47c8      	blx	r9
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	d01e      	beq.n	8005b18 <_printf_common+0xa4>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	6922      	ldr	r2, [r4, #16]
 8005ade:	f003 0306 	and.w	r3, r3, #6
 8005ae2:	2b04      	cmp	r3, #4
 8005ae4:	bf02      	ittt	eq
 8005ae6:	68e5      	ldreq	r5, [r4, #12]
 8005ae8:	6833      	ldreq	r3, [r6, #0]
 8005aea:	1aed      	subeq	r5, r5, r3
 8005aec:	68a3      	ldr	r3, [r4, #8]
 8005aee:	bf0c      	ite	eq
 8005af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005af4:	2500      	movne	r5, #0
 8005af6:	4293      	cmp	r3, r2
 8005af8:	bfc4      	itt	gt
 8005afa:	1a9b      	subgt	r3, r3, r2
 8005afc:	18ed      	addgt	r5, r5, r3
 8005afe:	2600      	movs	r6, #0
 8005b00:	341a      	adds	r4, #26
 8005b02:	42b5      	cmp	r5, r6
 8005b04:	d11a      	bne.n	8005b3c <_printf_common+0xc8>
 8005b06:	2000      	movs	r0, #0
 8005b08:	e008      	b.n	8005b1c <_printf_common+0xa8>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4652      	mov	r2, sl
 8005b0e:	4641      	mov	r1, r8
 8005b10:	4638      	mov	r0, r7
 8005b12:	47c8      	blx	r9
 8005b14:	3001      	adds	r0, #1
 8005b16:	d103      	bne.n	8005b20 <_printf_common+0xac>
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b20:	3501      	adds	r5, #1
 8005b22:	e7c6      	b.n	8005ab2 <_printf_common+0x3e>
 8005b24:	18e1      	adds	r1, r4, r3
 8005b26:	1c5a      	adds	r2, r3, #1
 8005b28:	2030      	movs	r0, #48	@ 0x30
 8005b2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005b2e:	4422      	add	r2, r4
 8005b30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005b34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005b38:	3302      	adds	r3, #2
 8005b3a:	e7c7      	b.n	8005acc <_printf_common+0x58>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	4622      	mov	r2, r4
 8005b40:	4641      	mov	r1, r8
 8005b42:	4638      	mov	r0, r7
 8005b44:	47c8      	blx	r9
 8005b46:	3001      	adds	r0, #1
 8005b48:	d0e6      	beq.n	8005b18 <_printf_common+0xa4>
 8005b4a:	3601      	adds	r6, #1
 8005b4c:	e7d9      	b.n	8005b02 <_printf_common+0x8e>
	...

08005b50 <_printf_i>:
 8005b50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b54:	7e0f      	ldrb	r7, [r1, #24]
 8005b56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005b58:	2f78      	cmp	r7, #120	@ 0x78
 8005b5a:	4691      	mov	r9, r2
 8005b5c:	4680      	mov	r8, r0
 8005b5e:	460c      	mov	r4, r1
 8005b60:	469a      	mov	sl, r3
 8005b62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005b66:	d807      	bhi.n	8005b78 <_printf_i+0x28>
 8005b68:	2f62      	cmp	r7, #98	@ 0x62
 8005b6a:	d80a      	bhi.n	8005b82 <_printf_i+0x32>
 8005b6c:	2f00      	cmp	r7, #0
 8005b6e:	f000 80d2 	beq.w	8005d16 <_printf_i+0x1c6>
 8005b72:	2f58      	cmp	r7, #88	@ 0x58
 8005b74:	f000 80b9 	beq.w	8005cea <_printf_i+0x19a>
 8005b78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b80:	e03a      	b.n	8005bf8 <_printf_i+0xa8>
 8005b82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b86:	2b15      	cmp	r3, #21
 8005b88:	d8f6      	bhi.n	8005b78 <_printf_i+0x28>
 8005b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8005b90 <_printf_i+0x40>)
 8005b8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bfd 	.word	0x08005bfd
 8005b98:	08005b79 	.word	0x08005b79
 8005b9c:	08005b79 	.word	0x08005b79
 8005ba0:	08005b79 	.word	0x08005b79
 8005ba4:	08005b79 	.word	0x08005b79
 8005ba8:	08005bfd 	.word	0x08005bfd
 8005bac:	08005b79 	.word	0x08005b79
 8005bb0:	08005b79 	.word	0x08005b79
 8005bb4:	08005b79 	.word	0x08005b79
 8005bb8:	08005b79 	.word	0x08005b79
 8005bbc:	08005cfd 	.word	0x08005cfd
 8005bc0:	08005c27 	.word	0x08005c27
 8005bc4:	08005cb7 	.word	0x08005cb7
 8005bc8:	08005b79 	.word	0x08005b79
 8005bcc:	08005b79 	.word	0x08005b79
 8005bd0:	08005d1f 	.word	0x08005d1f
 8005bd4:	08005b79 	.word	0x08005b79
 8005bd8:	08005c27 	.word	0x08005c27
 8005bdc:	08005b79 	.word	0x08005b79
 8005be0:	08005b79 	.word	0x08005b79
 8005be4:	08005cbf 	.word	0x08005cbf
 8005be8:	6833      	ldr	r3, [r6, #0]
 8005bea:	1d1a      	adds	r2, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	6032      	str	r2, [r6, #0]
 8005bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bf4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e09d      	b.n	8005d38 <_printf_i+0x1e8>
 8005bfc:	6833      	ldr	r3, [r6, #0]
 8005bfe:	6820      	ldr	r0, [r4, #0]
 8005c00:	1d19      	adds	r1, r3, #4
 8005c02:	6031      	str	r1, [r6, #0]
 8005c04:	0606      	lsls	r6, r0, #24
 8005c06:	d501      	bpl.n	8005c0c <_printf_i+0xbc>
 8005c08:	681d      	ldr	r5, [r3, #0]
 8005c0a:	e003      	b.n	8005c14 <_printf_i+0xc4>
 8005c0c:	0645      	lsls	r5, r0, #25
 8005c0e:	d5fb      	bpl.n	8005c08 <_printf_i+0xb8>
 8005c10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c14:	2d00      	cmp	r5, #0
 8005c16:	da03      	bge.n	8005c20 <_printf_i+0xd0>
 8005c18:	232d      	movs	r3, #45	@ 0x2d
 8005c1a:	426d      	negs	r5, r5
 8005c1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c20:	4859      	ldr	r0, [pc, #356]	@ (8005d88 <_printf_i+0x238>)
 8005c22:	230a      	movs	r3, #10
 8005c24:	e011      	b.n	8005c4a <_printf_i+0xfa>
 8005c26:	6821      	ldr	r1, [r4, #0]
 8005c28:	6833      	ldr	r3, [r6, #0]
 8005c2a:	0608      	lsls	r0, r1, #24
 8005c2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005c30:	d402      	bmi.n	8005c38 <_printf_i+0xe8>
 8005c32:	0649      	lsls	r1, r1, #25
 8005c34:	bf48      	it	mi
 8005c36:	b2ad      	uxthmi	r5, r5
 8005c38:	2f6f      	cmp	r7, #111	@ 0x6f
 8005c3a:	4853      	ldr	r0, [pc, #332]	@ (8005d88 <_printf_i+0x238>)
 8005c3c:	6033      	str	r3, [r6, #0]
 8005c3e:	bf14      	ite	ne
 8005c40:	230a      	movne	r3, #10
 8005c42:	2308      	moveq	r3, #8
 8005c44:	2100      	movs	r1, #0
 8005c46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005c4a:	6866      	ldr	r6, [r4, #4]
 8005c4c:	60a6      	str	r6, [r4, #8]
 8005c4e:	2e00      	cmp	r6, #0
 8005c50:	bfa2      	ittt	ge
 8005c52:	6821      	ldrge	r1, [r4, #0]
 8005c54:	f021 0104 	bicge.w	r1, r1, #4
 8005c58:	6021      	strge	r1, [r4, #0]
 8005c5a:	b90d      	cbnz	r5, 8005c60 <_printf_i+0x110>
 8005c5c:	2e00      	cmp	r6, #0
 8005c5e:	d04b      	beq.n	8005cf8 <_printf_i+0x1a8>
 8005c60:	4616      	mov	r6, r2
 8005c62:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c66:	fb03 5711 	mls	r7, r3, r1, r5
 8005c6a:	5dc7      	ldrb	r7, [r0, r7]
 8005c6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c70:	462f      	mov	r7, r5
 8005c72:	42bb      	cmp	r3, r7
 8005c74:	460d      	mov	r5, r1
 8005c76:	d9f4      	bls.n	8005c62 <_printf_i+0x112>
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d10b      	bne.n	8005c94 <_printf_i+0x144>
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	07df      	lsls	r7, r3, #31
 8005c80:	d508      	bpl.n	8005c94 <_printf_i+0x144>
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	6861      	ldr	r1, [r4, #4]
 8005c86:	4299      	cmp	r1, r3
 8005c88:	bfde      	ittt	le
 8005c8a:	2330      	movle	r3, #48	@ 0x30
 8005c8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c90:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c94:	1b92      	subs	r2, r2, r6
 8005c96:	6122      	str	r2, [r4, #16]
 8005c98:	f8cd a000 	str.w	sl, [sp]
 8005c9c:	464b      	mov	r3, r9
 8005c9e:	aa03      	add	r2, sp, #12
 8005ca0:	4621      	mov	r1, r4
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	f7ff fee6 	bl	8005a74 <_printf_common>
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d14a      	bne.n	8005d42 <_printf_i+0x1f2>
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	b004      	add	sp, #16
 8005cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	f043 0320 	orr.w	r3, r3, #32
 8005cbc:	6023      	str	r3, [r4, #0]
 8005cbe:	4833      	ldr	r0, [pc, #204]	@ (8005d8c <_printf_i+0x23c>)
 8005cc0:	2778      	movs	r7, #120	@ 0x78
 8005cc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005cc6:	6823      	ldr	r3, [r4, #0]
 8005cc8:	6831      	ldr	r1, [r6, #0]
 8005cca:	061f      	lsls	r7, r3, #24
 8005ccc:	f851 5b04 	ldr.w	r5, [r1], #4
 8005cd0:	d402      	bmi.n	8005cd8 <_printf_i+0x188>
 8005cd2:	065f      	lsls	r7, r3, #25
 8005cd4:	bf48      	it	mi
 8005cd6:	b2ad      	uxthmi	r5, r5
 8005cd8:	6031      	str	r1, [r6, #0]
 8005cda:	07d9      	lsls	r1, r3, #31
 8005cdc:	bf44      	itt	mi
 8005cde:	f043 0320 	orrmi.w	r3, r3, #32
 8005ce2:	6023      	strmi	r3, [r4, #0]
 8005ce4:	b11d      	cbz	r5, 8005cee <_printf_i+0x19e>
 8005ce6:	2310      	movs	r3, #16
 8005ce8:	e7ac      	b.n	8005c44 <_printf_i+0xf4>
 8005cea:	4827      	ldr	r0, [pc, #156]	@ (8005d88 <_printf_i+0x238>)
 8005cec:	e7e9      	b.n	8005cc2 <_printf_i+0x172>
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	f023 0320 	bic.w	r3, r3, #32
 8005cf4:	6023      	str	r3, [r4, #0]
 8005cf6:	e7f6      	b.n	8005ce6 <_printf_i+0x196>
 8005cf8:	4616      	mov	r6, r2
 8005cfa:	e7bd      	b.n	8005c78 <_printf_i+0x128>
 8005cfc:	6833      	ldr	r3, [r6, #0]
 8005cfe:	6825      	ldr	r5, [r4, #0]
 8005d00:	6961      	ldr	r1, [r4, #20]
 8005d02:	1d18      	adds	r0, r3, #4
 8005d04:	6030      	str	r0, [r6, #0]
 8005d06:	062e      	lsls	r6, r5, #24
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	d501      	bpl.n	8005d10 <_printf_i+0x1c0>
 8005d0c:	6019      	str	r1, [r3, #0]
 8005d0e:	e002      	b.n	8005d16 <_printf_i+0x1c6>
 8005d10:	0668      	lsls	r0, r5, #25
 8005d12:	d5fb      	bpl.n	8005d0c <_printf_i+0x1bc>
 8005d14:	8019      	strh	r1, [r3, #0]
 8005d16:	2300      	movs	r3, #0
 8005d18:	6123      	str	r3, [r4, #16]
 8005d1a:	4616      	mov	r6, r2
 8005d1c:	e7bc      	b.n	8005c98 <_printf_i+0x148>
 8005d1e:	6833      	ldr	r3, [r6, #0]
 8005d20:	1d1a      	adds	r2, r3, #4
 8005d22:	6032      	str	r2, [r6, #0]
 8005d24:	681e      	ldr	r6, [r3, #0]
 8005d26:	6862      	ldr	r2, [r4, #4]
 8005d28:	2100      	movs	r1, #0
 8005d2a:	4630      	mov	r0, r6
 8005d2c:	f7fa fa70 	bl	8000210 <memchr>
 8005d30:	b108      	cbz	r0, 8005d36 <_printf_i+0x1e6>
 8005d32:	1b80      	subs	r0, r0, r6
 8005d34:	6060      	str	r0, [r4, #4]
 8005d36:	6863      	ldr	r3, [r4, #4]
 8005d38:	6123      	str	r3, [r4, #16]
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d40:	e7aa      	b.n	8005c98 <_printf_i+0x148>
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	4632      	mov	r2, r6
 8005d46:	4649      	mov	r1, r9
 8005d48:	4640      	mov	r0, r8
 8005d4a:	47d0      	blx	sl
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d0ad      	beq.n	8005cac <_printf_i+0x15c>
 8005d50:	6823      	ldr	r3, [r4, #0]
 8005d52:	079b      	lsls	r3, r3, #30
 8005d54:	d413      	bmi.n	8005d7e <_printf_i+0x22e>
 8005d56:	68e0      	ldr	r0, [r4, #12]
 8005d58:	9b03      	ldr	r3, [sp, #12]
 8005d5a:	4298      	cmp	r0, r3
 8005d5c:	bfb8      	it	lt
 8005d5e:	4618      	movlt	r0, r3
 8005d60:	e7a6      	b.n	8005cb0 <_printf_i+0x160>
 8005d62:	2301      	movs	r3, #1
 8005d64:	4632      	mov	r2, r6
 8005d66:	4649      	mov	r1, r9
 8005d68:	4640      	mov	r0, r8
 8005d6a:	47d0      	blx	sl
 8005d6c:	3001      	adds	r0, #1
 8005d6e:	d09d      	beq.n	8005cac <_printf_i+0x15c>
 8005d70:	3501      	adds	r5, #1
 8005d72:	68e3      	ldr	r3, [r4, #12]
 8005d74:	9903      	ldr	r1, [sp, #12]
 8005d76:	1a5b      	subs	r3, r3, r1
 8005d78:	42ab      	cmp	r3, r5
 8005d7a:	dcf2      	bgt.n	8005d62 <_printf_i+0x212>
 8005d7c:	e7eb      	b.n	8005d56 <_printf_i+0x206>
 8005d7e:	2500      	movs	r5, #0
 8005d80:	f104 0619 	add.w	r6, r4, #25
 8005d84:	e7f5      	b.n	8005d72 <_printf_i+0x222>
 8005d86:	bf00      	nop
 8005d88:	08005f31 	.word	0x08005f31
 8005d8c:	08005f42 	.word	0x08005f42

08005d90 <memmove>:
 8005d90:	4288      	cmp	r0, r1
 8005d92:	b510      	push	{r4, lr}
 8005d94:	eb01 0402 	add.w	r4, r1, r2
 8005d98:	d902      	bls.n	8005da0 <memmove+0x10>
 8005d9a:	4284      	cmp	r4, r0
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	d807      	bhi.n	8005db0 <memmove+0x20>
 8005da0:	1e43      	subs	r3, r0, #1
 8005da2:	42a1      	cmp	r1, r4
 8005da4:	d008      	beq.n	8005db8 <memmove+0x28>
 8005da6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005daa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005dae:	e7f8      	b.n	8005da2 <memmove+0x12>
 8005db0:	4402      	add	r2, r0
 8005db2:	4601      	mov	r1, r0
 8005db4:	428a      	cmp	r2, r1
 8005db6:	d100      	bne.n	8005dba <memmove+0x2a>
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005dbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005dc2:	e7f7      	b.n	8005db4 <memmove+0x24>

08005dc4 <_sbrk_r>:
 8005dc4:	b538      	push	{r3, r4, r5, lr}
 8005dc6:	4d06      	ldr	r5, [pc, #24]	@ (8005de0 <_sbrk_r+0x1c>)
 8005dc8:	2300      	movs	r3, #0
 8005dca:	4604      	mov	r4, r0
 8005dcc:	4608      	mov	r0, r1
 8005dce:	602b      	str	r3, [r5, #0]
 8005dd0:	f7fc fb10 	bl	80023f4 <_sbrk>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_sbrk_r+0x1a>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_sbrk_r+0x1a>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	20000370 	.word	0x20000370

08005de4 <memcpy>:
 8005de4:	440a      	add	r2, r1
 8005de6:	4291      	cmp	r1, r2
 8005de8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dec:	d100      	bne.n	8005df0 <memcpy+0xc>
 8005dee:	4770      	bx	lr
 8005df0:	b510      	push	{r4, lr}
 8005df2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005df6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dfa:	4291      	cmp	r1, r2
 8005dfc:	d1f9      	bne.n	8005df2 <memcpy+0xe>
 8005dfe:	bd10      	pop	{r4, pc}

08005e00 <_realloc_r>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	4680      	mov	r8, r0
 8005e06:	4615      	mov	r5, r2
 8005e08:	460c      	mov	r4, r1
 8005e0a:	b921      	cbnz	r1, 8005e16 <_realloc_r+0x16>
 8005e0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e10:	4611      	mov	r1, r2
 8005e12:	f7ff bc4b 	b.w	80056ac <_malloc_r>
 8005e16:	b92a      	cbnz	r2, 8005e24 <_realloc_r+0x24>
 8005e18:	f7ff fbdc 	bl	80055d4 <_free_r>
 8005e1c:	2400      	movs	r4, #0
 8005e1e:	4620      	mov	r0, r4
 8005e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e24:	f000 f81a 	bl	8005e5c <_malloc_usable_size_r>
 8005e28:	4285      	cmp	r5, r0
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	d802      	bhi.n	8005e34 <_realloc_r+0x34>
 8005e2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005e32:	d8f4      	bhi.n	8005e1e <_realloc_r+0x1e>
 8005e34:	4629      	mov	r1, r5
 8005e36:	4640      	mov	r0, r8
 8005e38:	f7ff fc38 	bl	80056ac <_malloc_r>
 8005e3c:	4607      	mov	r7, r0
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d0ec      	beq.n	8005e1c <_realloc_r+0x1c>
 8005e42:	42b5      	cmp	r5, r6
 8005e44:	462a      	mov	r2, r5
 8005e46:	4621      	mov	r1, r4
 8005e48:	bf28      	it	cs
 8005e4a:	4632      	movcs	r2, r6
 8005e4c:	f7ff ffca 	bl	8005de4 <memcpy>
 8005e50:	4621      	mov	r1, r4
 8005e52:	4640      	mov	r0, r8
 8005e54:	f7ff fbbe 	bl	80055d4 <_free_r>
 8005e58:	463c      	mov	r4, r7
 8005e5a:	e7e0      	b.n	8005e1e <_realloc_r+0x1e>

08005e5c <_malloc_usable_size_r>:
 8005e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e60:	1f18      	subs	r0, r3, #4
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	bfbc      	itt	lt
 8005e66:	580b      	ldrlt	r3, [r1, r0]
 8005e68:	18c0      	addlt	r0, r0, r3
 8005e6a:	4770      	bx	lr

08005e6c <_init>:
 8005e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6e:	bf00      	nop
 8005e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e72:	bc08      	pop	{r3}
 8005e74:	469e      	mov	lr, r3
 8005e76:	4770      	bx	lr

08005e78 <_fini>:
 8005e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e7a:	bf00      	nop
 8005e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e7e:	bc08      	pop	{r3}
 8005e80:	469e      	mov	lr, r3
 8005e82:	4770      	bx	lr
